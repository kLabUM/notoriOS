ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"RTC_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	buffer_overflow,1,1
  20              		.comm	dataPointsInStack,2,2
  21              		.comm	dataPointsInStackDesired,2,2
  22              		.comm	data,6600,4
  23              		.comm	modem_state,1,1
  24              		.comm	modem_start_time_stamp,4,4
  25              		.comm	modem_info,60,4
  26              		.comm	modem_stats,32,4
  27              		.comm	updatable_parameters,5,4
  28              		.syntax unified
  29              		.global _printf_float
  30              		.thumb
  31              		.syntax unified
  32              		.comm	http_request,10000,4
  33              		.comm	http_body,10000,4
  34              		.comm	http_route,200,4
  35              		.comm	system_info,28,4
  36              		.comm	system_settings,104,4
  37              		.comm	alarmMeasure,6,4
  38              		.comm	timeToMeasure,1,1
  39              		.comm	alarmSync,6,4
  40              		.comm	timeToSync,1,1
  41              		.comm	timeToSycnRemoteParams,1,1
  42              		.comm	hey,1,1
  43              		.section	.text.RTC_EverySecondHandler,"ax",%progbits
  44              		.align	2
  45              		.thumb
  46              		.thumb_func
  47              		.type	RTC_EverySecondHandler, %function
  48              	RTC_EverySecondHandler:
  49              	.LFB64:
  50              		.file 1 "Generated_Source\\PSoC5\\RTC_INT.c"
   1:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/RTC_INT.c **** * File Name: RTC_INT.c
   3:Generated_Source\PSoC5/RTC_INT.c **** * Version 2.0
   4:Generated_Source\PSoC5/RTC_INT.c **** *
   5:Generated_Source\PSoC5/RTC_INT.c **** * Description:
   6:Generated_Source\PSoC5/RTC_INT.c **** *  This file contains the Interrupt Service Routine (ISR) for the RTC component.
   7:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt routine has entry pointes to overflow on time or date.
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 2


   8:Generated_Source\PSoC5/RTC_INT.c **** *
   9:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  10:Generated_Source\PSoC5/RTC_INT.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/RTC_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/RTC_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/RTC_INT.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/RTC_INT.c **** 
  16:Generated_Source\PSoC5/RTC_INT.c **** #include "RTC.h"
  17:Generated_Source\PSoC5/RTC_INT.c **** #include "CyLib.h"
  18:Generated_Source\PSoC5/RTC_INT.c **** #include "cyapicallbacks.h"
  19:Generated_Source\PSoC5/RTC_INT.c **** 
  20:Generated_Source\PSoC5/RTC_INT.c **** /* Function Prototypes */
  21:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void);
  22:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void);
  23:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void);
  24:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void);
  25:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void);
  26:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void);
  27:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void);
  28:Generated_Source\PSoC5/RTC_INT.c **** 
  29:Generated_Source\PSoC5/RTC_INT.c **** 
  30:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  31:Generated_Source\PSoC5/RTC_INT.c **** *  Place your includes, defines and code here
  32:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  33:Generated_Source\PSoC5/RTC_INT.c **** /* `#START RTC_ISR_DEFINITION` */
  34:Generated_Source\PSoC5/RTC_INT.c **** 
  35:Generated_Source\PSoC5/RTC_INT.c **** #include "notoriOS.h"
  36:Generated_Source\PSoC5/RTC_INT.c **** 
  37:Generated_Source\PSoC5/RTC_INT.c **** /* `#END` */
  38:Generated_Source\PSoC5/RTC_INT.c **** 
  39:Generated_Source\PSoC5/RTC_INT.c **** 
  40:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  41:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EverySecondHandler
  42:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  43:Generated_Source\PSoC5/RTC_INT.c **** *
  44:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  45:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every second.
  46:Generated_Source\PSoC5/RTC_INT.c **** *
  47:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  48:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  49:Generated_Source\PSoC5/RTC_INT.c **** *
  50:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  51:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  52:Generated_Source\PSoC5/RTC_INT.c **** *
  53:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  54:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EverySecondHandler(void)
  55:Generated_Source\PSoC5/RTC_INT.c **** {
  51              		.loc 1 55 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55 0000 80B5     		push	{r7, lr}
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 3


  60              		.cfi_def_cfa_register 7
  56:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every second handler code here. */
  57:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_SECOND_HANDLER_CODE` */
  58:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_SECOND);
  61              		.loc 1 58 0
  62 0004 0020     		movs	r0, #0
  63 0006 FFF7FEFF 		bl	AyoItsTime
  59:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  60:Generated_Source\PSoC5/RTC_INT.c ****     
  61:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_SECOND_HANDLER_CALLBACK
  62:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler_Callback();
  63:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_SECOND_HANDLER_CALLBACK */
  64:Generated_Source\PSoC5/RTC_INT.c **** }
  64              		.loc 1 64 0
  65 000a 00BF     		nop
  66 000c 80BD     		pop	{r7, pc}
  67              		.cfi_endproc
  68              	.LFE64:
  69              		.size	RTC_EverySecondHandler, .-RTC_EverySecondHandler
  70 000e 00BF     		.section	.text.RTC_EveryMinuteHandler,"ax",%progbits
  71              		.align	2
  72              		.thumb
  73              		.thumb_func
  74              		.type	RTC_EveryMinuteHandler, %function
  75              	RTC_EveryMinuteHandler:
  76              	.LFB65:
  65:Generated_Source\PSoC5/RTC_INT.c **** 
  66:Generated_Source\PSoC5/RTC_INT.c **** 
  67:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMinuteHandler
  69:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  70:Generated_Source\PSoC5/RTC_INT.c **** *
  71:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  72:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every minute.
  73:Generated_Source\PSoC5/RTC_INT.c **** *
  74:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
  75:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  76:Generated_Source\PSoC5/RTC_INT.c **** *
  77:Generated_Source\PSoC5/RTC_INT.c **** * Return:
  78:Generated_Source\PSoC5/RTC_INT.c **** *  None.
  79:Generated_Source\PSoC5/RTC_INT.c **** *
  80:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
  81:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMinuteHandler(void)
  82:Generated_Source\PSoC5/RTC_INT.c **** {
  77              		.loc 1 82 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81 0000 80B5     		push	{r7, lr}
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  83:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every minute handler code here. */
  84:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MINUTE_HANDLER_CODE` */
  85:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MINUTE);
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 4


  87              		.loc 1 85 0
  88 0004 0120     		movs	r0, #1
  89 0006 FFF7FEFF 		bl	AyoItsTime
  86:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
  87:Generated_Source\PSoC5/RTC_INT.c **** 
  88:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MINUTE_HANDLER_CALLBACK
  89:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMinuteHandler_Callback();
  90:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MINUTE_HANDLER_CALLBACK */    
  91:Generated_Source\PSoC5/RTC_INT.c **** }
  90              		.loc 1 91 0
  91 000a 00BF     		nop
  92 000c 80BD     		pop	{r7, pc}
  93              		.cfi_endproc
  94              	.LFE65:
  95              		.size	RTC_EveryMinuteHandler, .-RTC_EveryMinuteHandler
  96 000e 00BF     		.section	.text.RTC_EveryHourHandler,"ax",%progbits
  97              		.align	2
  98              		.thumb
  99              		.thumb_func
 100              		.type	RTC_EveryHourHandler, %function
 101              	RTC_EveryHourHandler:
 102              	.LFB66:
  92:Generated_Source\PSoC5/RTC_INT.c **** 
  93:Generated_Source\PSoC5/RTC_INT.c **** 
  94:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
  95:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryHourHandler
  96:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
  97:Generated_Source\PSoC5/RTC_INT.c **** *
  98:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
  99:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every hour.
 100:Generated_Source\PSoC5/RTC_INT.c **** *
 101:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 102:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 103:Generated_Source\PSoC5/RTC_INT.c **** *
 104:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 105:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 106:Generated_Source\PSoC5/RTC_INT.c **** *
 107:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 108:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryHourHandler(void)
 109:Generated_Source\PSoC5/RTC_INT.c **** {
 103              		.loc 1 109 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107 0000 80B5     		push	{r7, lr}
 108              		.cfi_def_cfa_offset 8
 109              		.cfi_offset 7, -8
 110              		.cfi_offset 14, -4
 111 0002 00AF     		add	r7, sp, #0
 112              		.cfi_def_cfa_register 7
 110:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every hour handler code here. */
 111:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_HOUR_HANDLER_CODE` */
 112:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_HOUR);
 113              		.loc 1 112 0
 114 0004 0220     		movs	r0, #2
 115 0006 FFF7FEFF 		bl	AyoItsTime
 113:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 5


 114:Generated_Source\PSoC5/RTC_INT.c ****     
 115:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_HOUR_HANDLER_CALLBACK
 116:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryHourHandler_Callback();
 117:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_HOUR_HANDLER_CALLBACK */
 118:Generated_Source\PSoC5/RTC_INT.c **** }
 116              		.loc 1 118 0
 117 000a 00BF     		nop
 118 000c 80BD     		pop	{r7, pc}
 119              		.cfi_endproc
 120              	.LFE66:
 121              		.size	RTC_EveryHourHandler, .-RTC_EveryHourHandler
 122 000e 00BF     		.section	.text.RTC_EveryDayHandler,"ax",%progbits
 123              		.align	2
 124              		.thumb
 125              		.thumb_func
 126              		.type	RTC_EveryDayHandler, %function
 127              	RTC_EveryDayHandler:
 128              	.LFB67:
 119:Generated_Source\PSoC5/RTC_INT.c **** 
 120:Generated_Source\PSoC5/RTC_INT.c **** 
 121:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 122:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryDayHandler
 123:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 124:Generated_Source\PSoC5/RTC_INT.c **** *
 125:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 126:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every day.
 127:Generated_Source\PSoC5/RTC_INT.c **** *
 128:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 129:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 130:Generated_Source\PSoC5/RTC_INT.c **** *
 131:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 132:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 133:Generated_Source\PSoC5/RTC_INT.c **** *
 134:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 135:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryDayHandler(void)
 136:Generated_Source\PSoC5/RTC_INT.c **** {
 129              		.loc 1 136 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 1, uses_anonymous_args = 0
 133 0000 80B5     		push	{r7, lr}
 134              		.cfi_def_cfa_offset 8
 135              		.cfi_offset 7, -8
 136              		.cfi_offset 14, -4
 137 0002 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 137:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your everyday handler code here. */
 138:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_DAY_HANDLER_CODE` */
 139:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_DAY);
 139              		.loc 1 139 0
 140 0004 0320     		movs	r0, #3
 141 0006 FFF7FEFF 		bl	AyoItsTime
 140:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 141:Generated_Source\PSoC5/RTC_INT.c ****     
 142:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_DAY_HANDLER_CALLBACK
 143:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryDayHandler_Callback();
 144:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_DAY_HANDLER_CALLBACK */
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 6


 145:Generated_Source\PSoC5/RTC_INT.c **** }
 142              		.loc 1 145 0
 143 000a 00BF     		nop
 144 000c 80BD     		pop	{r7, pc}
 145              		.cfi_endproc
 146              	.LFE67:
 147              		.size	RTC_EveryDayHandler, .-RTC_EveryDayHandler
 148 000e 00BF     		.section	.text.RTC_EveryWeekHandler,"ax",%progbits
 149              		.align	2
 150              		.thumb
 151              		.thumb_func
 152              		.type	RTC_EveryWeekHandler, %function
 153              	RTC_EveryWeekHandler:
 154              	.LFB68:
 146:Generated_Source\PSoC5/RTC_INT.c **** 
 147:Generated_Source\PSoC5/RTC_INT.c **** 
 148:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 149:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryWeekHandler
 150:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 151:Generated_Source\PSoC5/RTC_INT.c **** *
 152:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 153:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every week.
 154:Generated_Source\PSoC5/RTC_INT.c **** *
 155:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 156:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 157:Generated_Source\PSoC5/RTC_INT.c **** *
 158:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 159:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 160:Generated_Source\PSoC5/RTC_INT.c **** *
 161:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 162:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryWeekHandler(void)
 163:Generated_Source\PSoC5/RTC_INT.c **** {
 155              		.loc 1 163 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              		.cfi_def_cfa_offset 8
 161              		.cfi_offset 7, -8
 162              		.cfi_offset 14, -4
 163 0002 00AF     		add	r7, sp, #0
 164              		.cfi_def_cfa_register 7
 164:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every week handler code here. */
 165:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_WEEK_HANDLER_CODE` */
 166:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_WEEK);
 165              		.loc 1 166 0
 166 0004 0420     		movs	r0, #4
 167 0006 FFF7FEFF 		bl	AyoItsTime
 167:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 168:Generated_Source\PSoC5/RTC_INT.c **** 
 169:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_WEEK_HANDLER_CALLBACK
 170:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryWeekHandler_Callback();
 171:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_WEEK_HANDLER_CALLBACK */
 172:Generated_Source\PSoC5/RTC_INT.c **** }
 168              		.loc 1 172 0
 169 000a 00BF     		nop
 170 000c 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 7


 171              		.cfi_endproc
 172              	.LFE68:
 173              		.size	RTC_EveryWeekHandler, .-RTC_EveryWeekHandler
 174 000e 00BF     		.section	.text.RTC_EveryMonthHandler,"ax",%progbits
 175              		.align	2
 176              		.thumb
 177              		.thumb_func
 178              		.type	RTC_EveryMonthHandler, %function
 179              	RTC_EveryMonthHandler:
 180              	.LFB69:
 173:Generated_Source\PSoC5/RTC_INT.c **** 
 174:Generated_Source\PSoC5/RTC_INT.c **** 
 175:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryMonthHandler
 177:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 178:Generated_Source\PSoC5/RTC_INT.c **** *
 179:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 180:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every month.
 181:Generated_Source\PSoC5/RTC_INT.c **** *
 182:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 183:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 184:Generated_Source\PSoC5/RTC_INT.c **** *
 185:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 186:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 187:Generated_Source\PSoC5/RTC_INT.c **** *
 188:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 189:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryMonthHandler(void)
 190:Generated_Source\PSoC5/RTC_INT.c **** {
 181              		.loc 1 190 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 1, uses_anonymous_args = 0
 185 0000 80B5     		push	{r7, lr}
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 7, -8
 188              		.cfi_offset 14, -4
 189 0002 00AF     		add	r7, sp, #0
 190              		.cfi_def_cfa_register 7
 191:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every month handler code here. */
 192:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_MONTH_HANDLER_CODE` */
 193:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_MONTH);
 191              		.loc 1 193 0
 192 0004 0520     		movs	r0, #5
 193 0006 FFF7FEFF 		bl	AyoItsTime
 194:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 195:Generated_Source\PSoC5/RTC_INT.c ****     
 196:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_MONTH_HANDLER_CALLBACK
 197:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryMonthHandler_Callback();
 198:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_MONTH_HANDLER_CALLBACK */
 199:Generated_Source\PSoC5/RTC_INT.c **** }
 194              		.loc 1 199 0
 195 000a 00BF     		nop
 196 000c 80BD     		pop	{r7, pc}
 197              		.cfi_endproc
 198              	.LFE69:
 199              		.size	RTC_EveryMonthHandler, .-RTC_EveryMonthHandler
 200 000e 00BF     		.section	.text.RTC_EveryYearHandler,"ax",%progbits
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 8


 201              		.align	2
 202              		.thumb
 203              		.thumb_func
 204              		.type	RTC_EveryYearHandler, %function
 205              	RTC_EveryYearHandler:
 206              	.LFB70:
 200:Generated_Source\PSoC5/RTC_INT.c **** 
 201:Generated_Source\PSoC5/RTC_INT.c **** 
 202:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 203:Generated_Source\PSoC5/RTC_INT.c **** * Function Name:   RTC_EveryYearHandler
 204:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 205:Generated_Source\PSoC5/RTC_INT.c **** *
 206:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 207:Generated_Source\PSoC5/RTC_INT.c **** *  This function is called every year.
 208:Generated_Source\PSoC5/RTC_INT.c **** *
 209:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 210:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 211:Generated_Source\PSoC5/RTC_INT.c **** *
 212:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 213:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 214:Generated_Source\PSoC5/RTC_INT.c **** *
 215:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 216:Generated_Source\PSoC5/RTC_INT.c **** static void RTC_EveryYearHandler(void)
 217:Generated_Source\PSoC5/RTC_INT.c **** {
 207              		.loc 1 217 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 1, uses_anonymous_args = 0
 211 0000 80B5     		push	{r7, lr}
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 7, -8
 214              		.cfi_offset 14, -4
 215 0002 00AF     		add	r7, sp, #0
 216              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/RTC_INT.c ****     /*  Place your every year handler code here. */
 219:Generated_Source\PSoC5/RTC_INT.c ****     /* `#START EVERY_YEAR_HANDLER_CODE` */
 220:Generated_Source\PSoC5/RTC_INT.c ****     AyoItsTime(ALARM_TYPE_YEAR);
 217              		.loc 1 220 0
 218 0004 0620     		movs	r0, #6
 219 0006 FFF7FEFF 		bl	AyoItsTime
 221:Generated_Source\PSoC5/RTC_INT.c ****     /* `#END` */
 222:Generated_Source\PSoC5/RTC_INT.c **** 
 223:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_EVERY_YEAR_HANDLER_CALLBACK
 224:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EveryYearHandler_Callback();
 225:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_EVERY_YEAR_HANDLER_CALLBACK */    
 226:Generated_Source\PSoC5/RTC_INT.c **** }
 220              		.loc 1 226 0
 221 000a 00BF     		nop
 222 000c 80BD     		pop	{r7, pc}
 223              		.cfi_endproc
 224              	.LFE70:
 225              		.size	RTC_EveryYearHandler, .-RTC_EveryYearHandler
 226 000e 00BF     		.section	.text.RTC_ISR,"ax",%progbits
 227              		.align	2
 228              		.global	RTC_ISR
 229              		.thumb
 230              		.thumb_func
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 9


 231              		.type	RTC_ISR, %function
 232              	RTC_ISR:
 233              	.LFB71:
 227:Generated_Source\PSoC5/RTC_INT.c **** 
 228:Generated_Source\PSoC5/RTC_INT.c **** 
 229:Generated_Source\PSoC5/RTC_INT.c **** /*******************************************************************************
 230:Generated_Source\PSoC5/RTC_INT.c **** * Function Name: RTC_ISR
 231:Generated_Source\PSoC5/RTC_INT.c **** ********************************************************************************
 232:Generated_Source\PSoC5/RTC_INT.c **** *
 233:Generated_Source\PSoC5/RTC_INT.c **** * Summary:
 234:Generated_Source\PSoC5/RTC_INT.c **** *  This ISR is executed on 1PPS (one pulse per second) event.
 235:Generated_Source\PSoC5/RTC_INT.c **** *  Global interrupt must be enabled to invoke this ISR.
 236:Generated_Source\PSoC5/RTC_INT.c **** *  This interrupt trigs every second.
 237:Generated_Source\PSoC5/RTC_INT.c **** *
 238:Generated_Source\PSoC5/RTC_INT.c **** * Parameters:
 239:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 240:Generated_Source\PSoC5/RTC_INT.c **** *
 241:Generated_Source\PSoC5/RTC_INT.c **** * Return:
 242:Generated_Source\PSoC5/RTC_INT.c **** *  None.
 243:Generated_Source\PSoC5/RTC_INT.c **** *
 244:Generated_Source\PSoC5/RTC_INT.c **** * Global variables:
 245:Generated_Source\PSoC5/RTC_INT.c **** * RTC_currentTimeDate, RTC_dstTimeDateStart,
 246:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStop, RTC_dstTimeDateStart,
 247:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCfgTimeDate, RTC_statusDateTime,
 248:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStartStatus,
 249:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStopStatus, RTC_alarmCurStatus: global
 250:Generated_Source\PSoC5/RTC_INT.c **** *  variables are used for the time/date, DST and alarm update procedure.
 251:Generated_Source\PSoC5/RTC_INT.c **** *
 252:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstTimeDateStart and RTC_currentTimeDate:
 253:Generated_Source\PSoC5/RTC_INT.c **** *  are modified with the updated values.
 254:Generated_Source\PSoC5/RTC_INT.c **** *
 255:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_statusDateTime, RTC_dstStartStatus,
 256:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_dstStartStatus, RTC_dstStopStatus,
 257:Generated_Source\PSoC5/RTC_INT.c **** *  RTC_alarmCurStatus: global variables could be modified while
 258:Generated_Source\PSoC5/RTC_INT.c **** *  current time/date is updated.
 259:Generated_Source\PSoC5/RTC_INT.c **** *
 260:Generated_Source\PSoC5/RTC_INT.c **** * Side Effects:
 261:Generated_Source\PSoC5/RTC_INT.c **** *  Clears all interrupt status bits (react_int, limact_int, onepps_int, ctw_int,
 262:Generated_Source\PSoC5/RTC_INT.c **** *  and  ftw_int) in Power Manager Interrupt Status Register. If an interrupt
 263:Generated_Source\PSoC5/RTC_INT.c **** *  gets generated at the same time as a clear, the bit will remain set (which
 264:Generated_Source\PSoC5/RTC_INT.c **** *  causes another interrupt).
 265:Generated_Source\PSoC5/RTC_INT.c **** *
 266:Generated_Source\PSoC5/RTC_INT.c **** *******************************************************************************/
 267:Generated_Source\PSoC5/RTC_INT.c **** CY_ISR(RTC_ISR)
 268:Generated_Source\PSoC5/RTC_INT.c **** {
 234              		.loc 1 268 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 8
 237              		@ frame_needed = 1, uses_anonymous_args = 0
 238 0000 80B5     		push	{r7, lr}
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 7, -8
 241              		.cfi_offset 14, -4
 242 0002 82B0     		sub	sp, sp, #8
 243              		.cfi_def_cfa_offset 16
 244 0004 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 10


 269:Generated_Source\PSoC5/RTC_INT.c ****     uint8 RTC_tmp;
 270:Generated_Source\PSoC5/RTC_INT.c **** 
 271:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_ENTRY_CALLBACK
 272:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_EntryCallback();
 273:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_ENTRY_CALLBACK */
 274:Generated_Source\PSoC5/RTC_INT.c ****     
 275:Generated_Source\PSoC5/RTC_INT.c ****     /* Clear OPPS interrupt status flag */
 276:Generated_Source\PSoC5/RTC_INT.c ****     (void) CyPmReadStatus(CY_PM_ONEPPS_INT);
 246              		.loc 1 276 0
 247 0006 0420     		movs	r0, #4
 248 0008 FFF7FEFF 		bl	CyPmReadStatus
 277:Generated_Source\PSoC5/RTC_INT.c **** 
 278:Generated_Source\PSoC5/RTC_INT.c ****     /* Increment seconds counter */
 279:Generated_Source\PSoC5/RTC_INT.c ****     RTC_currentTimeDate.Sec++;
 249              		.loc 1 279 0
 250 000c 9E4B     		ldr	r3, .L48
 251 000e 1B78     		ldrb	r3, [r3]
 252 0010 DBB2     		uxtb	r3, r3
 253 0012 0133     		adds	r3, r3, #1
 254 0014 DAB2     		uxtb	r2, r3
 255 0016 9C4B     		ldr	r3, .L48
 256 0018 1A70     		strb	r2, [r3]
 280:Generated_Source\PSoC5/RTC_INT.c **** 
 281:Generated_Source\PSoC5/RTC_INT.c ****     /* Check if minute elapsed */
 282:Generated_Source\PSoC5/RTC_INT.c ****     if(RTC_currentTimeDate.Sec > RTC_MINUTE_ELAPSED)
 257              		.loc 1 282 0
 258 001a 9B4B     		ldr	r3, .L48
 259 001c 1B78     		ldrb	r3, [r3]
 260 001e DBB2     		uxtb	r3, r3
 261 0020 3B2B     		cmp	r3, #59
 262 0022 40F2A682 		bls	.L9
 283:Generated_Source\PSoC5/RTC_INT.c ****     {
 284:Generated_Source\PSoC5/RTC_INT.c ****         /* Inc Min */
 285:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Min++;
 263              		.loc 1 285 0
 264 0026 984B     		ldr	r3, .L48
 265 0028 5B78     		ldrb	r3, [r3, #1]
 266 002a DBB2     		uxtb	r3, r3
 267 002c 0133     		adds	r3, r3, #1
 268 002e DAB2     		uxtb	r2, r3
 269 0030 954B     		ldr	r3, .L48
 270 0032 5A70     		strb	r2, [r3, #1]
 286:Generated_Source\PSoC5/RTC_INT.c **** 
 287:Generated_Source\PSoC5/RTC_INT.c ****         /* Clear Sec */
 288:Generated_Source\PSoC5/RTC_INT.c ****         RTC_currentTimeDate.Sec = 0u;
 271              		.loc 1 288 0
 272 0034 944B     		ldr	r3, .L48
 273 0036 0022     		movs	r2, #0
 274 0038 1A70     		strb	r2, [r3]
 289:Generated_Source\PSoC5/RTC_INT.c **** 
 290:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 275              		.loc 1 290 0
 276 003a 934B     		ldr	r3, .L48
 277 003c 5B78     		ldrb	r3, [r3, #1]
 278 003e DBB2     		uxtb	r3, r3
 279 0040 3B2B     		cmp	r3, #59
 280 0042 40F24682 		bls	.L10
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 11


 291:Generated_Source\PSoC5/RTC_INT.c ****         {
 292:Generated_Source\PSoC5/RTC_INT.c ****             /* Inc HOUR */
 293:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Hour++;
 281              		.loc 1 293 0
 282 0046 904B     		ldr	r3, .L48
 283 0048 9B78     		ldrb	r3, [r3, #2]
 284 004a DBB2     		uxtb	r3, r3
 285 004c 0133     		adds	r3, r3, #1
 286 004e DAB2     		uxtb	r2, r3
 287 0050 8D4B     		ldr	r3, .L48
 288 0052 9A70     		strb	r2, [r3, #2]
 294:Generated_Source\PSoC5/RTC_INT.c **** 
 295:Generated_Source\PSoC5/RTC_INT.c ****             /* Clear Min */
 296:Generated_Source\PSoC5/RTC_INT.c ****             RTC_currentTimeDate.Min = 0u;
 289              		.loc 1 296 0
 290 0054 8C4B     		ldr	r3, .L48
 291 0056 0022     		movs	r2, #0
 292 0058 5A70     		strb	r2, [r3, #1]
 297:Generated_Source\PSoC5/RTC_INT.c **** 
 298:Generated_Source\PSoC5/RTC_INT.c ****             /* Day roll over */
 299:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 293              		.loc 1 299 0
 294 005a 8B4B     		ldr	r3, .L48
 295 005c 9B78     		ldrb	r3, [r3, #2]
 296 005e DBB2     		uxtb	r3, r3
 297 0060 172B     		cmp	r3, #23
 298 0062 40F2DD81 		bls	.L11
 300:Generated_Source\PSoC5/RTC_INT.c ****             {
 301:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfMonth */
 302:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfMonth++;
 299              		.loc 1 302 0
 300 0066 884B     		ldr	r3, .L48
 301 0068 1B79     		ldrb	r3, [r3, #4]
 302 006a DBB2     		uxtb	r3, r3
 303 006c 0133     		adds	r3, r3, #1
 304 006e DAB2     		uxtb	r2, r3
 305 0070 854B     		ldr	r3, .L48
 306 0072 1A71     		strb	r2, [r3, #4]
 303:Generated_Source\PSoC5/RTC_INT.c **** 
 304:Generated_Source\PSoC5/RTC_INT.c ****                 /* Clear Hour */
 305:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.Hour = 0u;
 307              		.loc 1 305 0
 308 0074 844B     		ldr	r3, .L48
 309 0076 0022     		movs	r2, #0
 310 0078 9A70     		strb	r2, [r3, #2]
 306:Generated_Source\PSoC5/RTC_INT.c **** 
 307:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfYear */
 308:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfYear++;
 311              		.loc 1 308 0
 312 007a 834B     		ldr	r3, .L48
 313 007c DB88     		ldrh	r3, [r3, #6]	@ movhi
 314 007e 9BB2     		uxth	r3, r3
 315 0080 0133     		adds	r3, r3, #1
 316 0082 9AB2     		uxth	r2, r3
 317 0084 804B     		ldr	r3, .L48
 318 0086 DA80     		strh	r2, [r3, #6]	@ movhi
 309:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 12


 310:Generated_Source\PSoC5/RTC_INT.c ****                 /* Inc DayOfWeek */
 311:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_currentTimeDate.DayOfWeek++;
 319              		.loc 1 311 0
 320 0088 7F4B     		ldr	r3, .L48
 321 008a DB78     		ldrb	r3, [r3, #3]
 322 008c DBB2     		uxtb	r3, r3
 323 008e 0133     		adds	r3, r3, #1
 324 0090 DAB2     		uxtb	r2, r3
 325 0092 7D4B     		ldr	r3, .L48
 326 0094 DA70     		strb	r2, [r3, #3]
 312:Generated_Source\PSoC5/RTC_INT.c **** 
 313:Generated_Source\PSoC5/RTC_INT.c ****                 /* Check DayOfWeek */
 314:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 327              		.loc 1 314 0
 328 0096 7C4B     		ldr	r3, .L48
 329 0098 DB78     		ldrb	r3, [r3, #3]
 330 009a DBB2     		uxtb	r3, r3
 331 009c 072B     		cmp	r3, #7
 332 009e 02D9     		bls	.L12
 315:Generated_Source\PSoC5/RTC_INT.c ****                 {
 316:Generated_Source\PSoC5/RTC_INT.c ****                     /* start new week */
 317:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfWeek = 1u;
 333              		.loc 1 317 0
 334 00a0 794B     		ldr	r3, .L48
 335 00a2 0122     		movs	r2, #1
 336 00a4 DA70     		strb	r2, [r3, #3]
 337              	.L12:
 318:Generated_Source\PSoC5/RTC_INT.c ****                 }
 319:Generated_Source\PSoC5/RTC_INT.c **** 
 320:Generated_Source\PSoC5/RTC_INT.c ****                 /* Day of month roll over.
 321:Generated_Source\PSoC5/RTC_INT.c ****                 * Check if day of month greater than 29 in February of leap year or
 322:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than 28 NOT in February of NON leap year or
 323:Generated_Source\PSoC5/RTC_INT.c ****                 * if day of month greater than it should be in every month in non leap year
 324:Generated_Source\PSoC5/RTC_INT.c ****                 */
 325:Generated_Source\PSoC5/RTC_INT.c ****                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 338              		.loc 1 325 0
 339 00a6 794B     		ldr	r3, .L48+4
 340 00a8 1B78     		ldrb	r3, [r3]
 341 00aa DBB2     		uxtb	r3, r3
 342 00ac 03F00203 		and	r3, r3, #2
 343 00b0 002B     		cmp	r3, #0
 344 00b2 11D0     		beq	.L13
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 345              		.loc 1 326 0 discriminator 1
 346 00b4 744B     		ldr	r3, .L48
 347 00b6 1B7A     		ldrb	r3, [r3, #8]
 348 00b8 DBB2     		uxtb	r3, r3
 325:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 349              		.loc 1 325 0 discriminator 1
 350 00ba 022B     		cmp	r3, #2
 351 00bc 0CD1     		bne	.L13
 327:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 352              		.loc 1 327 0
 353 00be 724B     		ldr	r3, .L48
 354 00c0 1B79     		ldrb	r3, [r3, #4]
 355 00c2 DBB2     		uxtb	r3, r3
 356 00c4 1946     		mov	r1, r3
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 13


 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 357              		.loc 1 328 0
 358 00c6 704B     		ldr	r3, .L48
 359 00c8 1B7A     		ldrb	r3, [r3, #8]
 360 00ca DBB2     		uxtb	r3, r3
 361 00cc 013B     		subs	r3, r3, #1
 362 00ce 704A     		ldr	r2, .L48+8
 363 00d0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 364 00d2 0133     		adds	r3, r3, #1
 326:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 365              		.loc 1 326 0
 366 00d4 9942     		cmp	r1, r3
 367 00d6 2AD8     		bhi	.L14
 368              	.L13:
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 369              		.loc 1 329 0
 370 00d8 6C4B     		ldr	r3, .L48+4
 371 00da 1B78     		ldrb	r3, [r3]
 372 00dc DBB2     		uxtb	r3, r3
 373 00de 03F00203 		and	r3, r3, #2
 328:Generated_Source\PSoC5/RTC_INT.c ****                              (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 374              		.loc 1 328 0
 375 00e2 002B     		cmp	r3, #0
 376 00e4 0FD0     		beq	.L15
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 377              		.loc 1 330 0
 378 00e6 684B     		ldr	r3, .L48
 379 00e8 1B7A     		ldrb	r3, [r3, #8]
 380 00ea DBB2     		uxtb	r3, r3
 329:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY))  &&
 381              		.loc 1 329 0
 382 00ec 022B     		cmp	r3, #2
 383 00ee 0AD0     		beq	.L15
 331:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 384              		.loc 1 331 0
 385 00f0 654B     		ldr	r3, .L48
 386 00f2 1B79     		ldrb	r3, [r3, #4]
 387 00f4 DAB2     		uxtb	r2, r3
 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 388              		.loc 1 332 0
 389 00f6 644B     		ldr	r3, .L48
 390 00f8 1B7A     		ldrb	r3, [r3, #8]
 391 00fa DBB2     		uxtb	r3, r3
 392 00fc 013B     		subs	r3, r3, #1
 393 00fe 6449     		ldr	r1, .L48+8
 394 0100 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 330:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.Month != RTC_FEBRUARY) &&
 395              		.loc 1 330 0
 396 0102 9A42     		cmp	r2, r3
 397 0104 13D8     		bhi	.L14
 398              	.L15:
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 399              		.loc 1 333 0
 400 0106 614B     		ldr	r3, .L48+4
 401 0108 1B78     		ldrb	r3, [r3]
 402 010a DBB2     		uxtb	r3, r3
 403 010c 03F00203 		and	r3, r3, #2
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 14


 332:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 404              		.loc 1 332 0
 405 0110 002B     		cmp	r3, #0
 406 0112 40F0F480 		bne	.L16
 334:Generated_Source\PSoC5/RTC_INT.c ****                     (RTC_currentTimeDate.DayOfMonth >
 407              		.loc 1 334 0
 408 0116 5C4B     		ldr	r3, .L48
 409 0118 1B79     		ldrb	r3, [r3, #4]
 410 011a DAB2     		uxtb	r2, r3
 335:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 411              		.loc 1 335 0
 412 011c 5A4B     		ldr	r3, .L48
 413 011e 1B7A     		ldrb	r3, [r3, #8]
 414 0120 DBB2     		uxtb	r3, r3
 415 0122 013B     		subs	r3, r3, #1
 416 0124 5A49     		ldr	r1, .L48+8
 417 0126 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 333:Generated_Source\PSoC5/RTC_INT.c ****                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY))  &&
 418              		.loc 1 333 0
 419 0128 9A42     		cmp	r2, r3
 420 012a 40F2E880 		bls	.L16
 421              	.L14:
 336:Generated_Source\PSoC5/RTC_INT.c ****                 {
 337:Generated_Source\PSoC5/RTC_INT.c ****                     /* Inc Month */
 338:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.Month++;
 422              		.loc 1 338 0
 423 012e 564B     		ldr	r3, .L48
 424 0130 1B7A     		ldrb	r3, [r3, #8]
 425 0132 DBB2     		uxtb	r3, r3
 426 0134 0133     		adds	r3, r3, #1
 427 0136 DAB2     		uxtb	r2, r3
 428 0138 534B     		ldr	r3, .L48
 429 013a 1A72     		strb	r2, [r3, #8]
 339:Generated_Source\PSoC5/RTC_INT.c **** 
 340:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set first day of month */
 341:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_currentTimeDate.DayOfMonth = 1u;
 430              		.loc 1 341 0
 431 013c 524B     		ldr	r3, .L48
 432 013e 0122     		movs	r2, #1
 433 0140 1A71     		strb	r2, [r3, #4]
 342:Generated_Source\PSoC5/RTC_INT.c **** 
 343:Generated_Source\PSoC5/RTC_INT.c ****                     /* Year roll over */
 344:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 434              		.loc 1 344 0
 435 0142 514B     		ldr	r3, .L48
 436 0144 1B7A     		ldrb	r3, [r3, #8]
 437 0146 DBB2     		uxtb	r3, r3
 438 0148 0C2B     		cmp	r3, #12
 439 014a 40F28580 		bls	.L17
 345:Generated_Source\PSoC5/RTC_INT.c ****                     {
 346:Generated_Source\PSoC5/RTC_INT.c ****                         /* Inc Year */
 347:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Year++;
 440              		.loc 1 347 0
 441 014e 4E4B     		ldr	r3, .L48
 442 0150 5B89     		ldrh	r3, [r3, #10]	@ movhi
 443 0152 9BB2     		uxth	r3, r3
 444 0154 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 15


 445 0156 9AB2     		uxth	r2, r3
 446 0158 4B4B     		ldr	r3, .L48
 447 015a 5A81     		strh	r2, [r3, #10]	@ movhi
 348:Generated_Source\PSoC5/RTC_INT.c **** 
 349:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first month of year */
 350:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.Month = 1u;
 448              		.loc 1 350 0
 449 015c 4A4B     		ldr	r3, .L48
 450 015e 0122     		movs	r2, #1
 451 0160 1A72     		strb	r2, [r3, #8]
 351:Generated_Source\PSoC5/RTC_INT.c **** 
 352:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set first day of year */
 353:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_currentTimeDate.DayOfYear = 1u;
 452              		.loc 1 353 0
 453 0162 494B     		ldr	r3, .L48
 454 0164 0122     		movs	r2, #1
 455 0166 DA80     		strh	r2, [r3, #6]	@ movhi
 354:Generated_Source\PSoC5/RTC_INT.c **** 
 355:Generated_Source\PSoC5/RTC_INT.c ****                         /* Is this year leap */
 356:Generated_Source\PSoC5/RTC_INT.c ****                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 456              		.loc 1 356 0
 457 0168 474B     		ldr	r3, .L48
 458 016a 5B89     		ldrh	r3, [r3, #10]	@ movhi
 459 016c 9BB2     		uxth	r3, r3
 460 016e 494A     		ldr	r2, .L48+12
 461 0170 A2FB0312 		umull	r1, r2, r2, r3
 462 0174 D209     		lsrs	r2, r2, #7
 463 0176 4FF4C871 		mov	r1, #400
 464 017a 01FB02F2 		mul	r2, r1, r2
 465 017e 9B1A     		subs	r3, r3, r2
 466 0180 9BB2     		uxth	r3, r3
 467 0182 002B     		cmp	r3, #0
 468 0184 15D0     		beq	.L18
 469              		.loc 1 356 0 is_stmt 0 discriminator 1
 470 0186 404B     		ldr	r3, .L48
 471 0188 5B89     		ldrh	r3, [r3, #10]	@ movhi
 472 018a 9BB2     		uxth	r3, r3
 473 018c 03F00303 		and	r3, r3, #3
 474 0190 9BB2     		uxth	r3, r3
 475 0192 002B     		cmp	r3, #0
 476 0194 16D1     		bne	.L19
 477              		.loc 1 356 0 discriminator 2
 478 0196 3C4B     		ldr	r3, .L48
 479 0198 5B89     		ldrh	r3, [r3, #10]	@ movhi
 480 019a 9BB2     		uxth	r3, r3
 481 019c 3D4A     		ldr	r2, .L48+12
 482 019e A2FB0312 		umull	r1, r2, r2, r3
 483 01a2 5209     		lsrs	r2, r2, #5
 484 01a4 6421     		movs	r1, #100
 485 01a6 01FB02F2 		mul	r2, r1, r2
 486 01aa 9B1A     		subs	r3, r3, r2
 487 01ac 9BB2     		uxth	r3, r3
 488 01ae 002B     		cmp	r3, #0
 489 01b0 08D0     		beq	.L19
 490              	.L18:
 357:Generated_Source\PSoC5/RTC_INT.c ****                         {
 358:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set leap year flag */
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 16


 359:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_LY;
 491              		.loc 1 359 0 is_stmt 1
 492 01b2 364B     		ldr	r3, .L48+4
 493 01b4 1B78     		ldrb	r3, [r3]
 494 01b6 DBB2     		uxtb	r3, r3
 495 01b8 43F00203 		orr	r3, r3, #2
 496 01bc DAB2     		uxtb	r2, r3
 497 01be 334B     		ldr	r3, .L48+4
 498 01c0 1A70     		strb	r2, [r3]
 499 01c2 07E0     		b	.L20
 500              	.L19:
 360:Generated_Source\PSoC5/RTC_INT.c ****                         }
 361:Generated_Source\PSoC5/RTC_INT.c ****                         else    /* not leap year */
 362:Generated_Source\PSoC5/RTC_INT.c ****                         {
 363:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear leap year */
 364:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 501              		.loc 1 364 0
 502 01c4 314B     		ldr	r3, .L48+4
 503 01c6 1B78     		ldrb	r3, [r3]
 504 01c8 DBB2     		uxtb	r3, r3
 505 01ca 23F00203 		bic	r3, r3, #2
 506 01ce DAB2     		uxtb	r2, r3
 507 01d0 2E4B     		ldr	r3, .L48+4
 508 01d2 1A70     		strb	r2, [r3]
 509              	.L20:
 365:Generated_Source\PSoC5/RTC_INT.c ****                         }
 366:Generated_Source\PSoC5/RTC_INT.c **** 
 367:Generated_Source\PSoC5/RTC_INT.c ****                         /* Alarm YEAR */
 368:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 510              		.loc 1 368 0
 511 01d4 304B     		ldr	r3, .L48+16
 512 01d6 1B78     		ldrb	r3, [r3]
 513 01d8 DBB2     		uxtb	r3, r3
 514 01da 5BB2     		sxtb	r3, r3
 515 01dc 002B     		cmp	r3, #0
 516 01de 18DA     		bge	.L21
 369:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_ALARM_YEAR_MASK))
 370:Generated_Source\PSoC5/RTC_INT.c ****                         {
 371:Generated_Source\PSoC5/RTC_INT.c ****                             /* Years match */
 372:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 517              		.loc 1 372 0
 518 01e0 2E4B     		ldr	r3, .L48+20
 519 01e2 5B89     		ldrh	r3, [r3, #10]	@ movhi
 520 01e4 9AB2     		uxth	r2, r3
 521 01e6 284B     		ldr	r3, .L48
 522 01e8 5B89     		ldrh	r3, [r3, #10]	@ movhi
 523 01ea 9BB2     		uxth	r3, r3
 524 01ec 9A42     		cmp	r2, r3
 525 01ee 08D1     		bne	.L22
 373:Generated_Source\PSoC5/RTC_INT.c ****                             {
 374:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Rise year alarm */
 375:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 526              		.loc 1 375 0
 527 01f0 2B4B     		ldr	r3, .L48+24
 528 01f2 1B78     		ldrb	r3, [r3]
 529 01f4 DBB2     		uxtb	r3, r3
 530 01f6 63F07F03 		orn	r3, r3, #127
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 17


 531 01fa DAB2     		uxtb	r2, r3
 532 01fc 284B     		ldr	r3, .L48+24
 533 01fe 1A70     		strb	r2, [r3]
 534 0200 07E0     		b	.L21
 535              	.L22:
 376:Generated_Source\PSoC5/RTC_INT.c ****                             }
 377:Generated_Source\PSoC5/RTC_INT.c ****                             else    /* Years do not match */
 378:Generated_Source\PSoC5/RTC_INT.c ****                             {
 379:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Clear year alarm */
 380:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 536              		.loc 1 380 0
 537 0202 274B     		ldr	r3, .L48+24
 538 0204 1B78     		ldrb	r3, [r3]
 539 0206 DBB2     		uxtb	r3, r3
 540 0208 03F07F03 		and	r3, r3, #127
 541 020c DAB2     		uxtb	r2, r3
 542 020e 244B     		ldr	r3, .L48+24
 543 0210 1A70     		strb	r2, [r3]
 544              	.L21:
 381:Generated_Source\PSoC5/RTC_INT.c ****                             }
 382:Generated_Source\PSoC5/RTC_INT.c ****                         } /* do not alarm year */
 383:Generated_Source\PSoC5/RTC_INT.c **** 
 384:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set Alarm flag event */
 385:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_tmp = RTC_alarmCfgMask;
 545              		.loc 1 385 0
 546 0212 214B     		ldr	r3, .L48+16
 547 0214 1B78     		ldrb	r3, [r3]
 548 0216 FB71     		strb	r3, [r7, #7]
 386:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_SET_ALARM(RTC_tmp,
 549              		.loc 1 386 0
 550 0218 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 551 021a 002B     		cmp	r3, #0
 552 021c 13D0     		beq	.L23
 553              		.loc 1 386 0 is_stmt 0 discriminator 1
 554 021e 204B     		ldr	r3, .L48+24
 555 0220 1B78     		ldrb	r3, [r3]
 556 0222 DAB2     		uxtb	r2, r3
 557 0224 FB79     		ldrb	r3, [r7, #7]
 558 0226 1340     		ands	r3, r3, r2
 559 0228 DBB2     		uxtb	r3, r3
 560 022a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 561 022c 9A42     		cmp	r2, r3
 562 022e 0AD1     		bne	.L23
 563              		.loc 1 386 0 discriminator 2
 564 0230 164B     		ldr	r3, .L48+4
 565 0232 1B78     		ldrb	r3, [r3]
 566 0234 DBB2     		uxtb	r3, r3
 567 0236 43F00803 		orr	r3, r3, #8
 568 023a DAB2     		uxtb	r2, r3
 569 023c 134B     		ldr	r3, .L48+4
 570 023e 1A70     		strb	r2, [r3]
 571 0240 174B     		ldr	r3, .L48+24
 572 0242 0022     		movs	r2, #0
 573 0244 1A70     		strb	r2, [r3]
 574              	.L23:
 387:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_alarmCurStatus,
 388:Generated_Source\PSoC5/RTC_INT.c ****                                                    RTC_statusDateTime);
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 18


 389:Generated_Source\PSoC5/RTC_INT.c **** 
 390:Generated_Source\PSoC5/RTC_INT.c ****                         /* Every Year */
 391:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 575              		.loc 1 391 0 is_stmt 1
 576 0246 174B     		ldr	r3, .L48+28
 577 0248 1B78     		ldrb	r3, [r3]
 578 024a DBB2     		uxtb	r3, r3
 579 024c 03F04003 		and	r3, r3, #64
 580 0250 002B     		cmp	r3, #0
 581 0252 01D0     		beq	.L17
 392:Generated_Source\PSoC5/RTC_INT.c ****                                                              RTC_INTERVAL_YEAR_MASK))
 393:Generated_Source\PSoC5/RTC_INT.c ****                         {
 394:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_EveryYearHandler();
 582              		.loc 1 394 0
 583 0254 FFF7FEFF 		bl	RTC_EveryYearHandler
 584              	.L17:
 395:Generated_Source\PSoC5/RTC_INT.c ****                         }
 396:Generated_Source\PSoC5/RTC_INT.c **** 
 397:Generated_Source\PSoC5/RTC_INT.c ****                     } /* Month > 12 */
 398:Generated_Source\PSoC5/RTC_INT.c **** 
 399:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 400:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 585              		.loc 1 400 0
 586 0258 0F4B     		ldr	r3, .L48+16
 587 025a 1B78     		ldrb	r3, [r3]
 588 025c DBB2     		uxtb	r3, r3
 589 025e 03F04003 		and	r3, r3, #64
 590 0262 002B     		cmp	r3, #0
 591 0264 28D0     		beq	.L24
 401:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 402:Generated_Source\PSoC5/RTC_INT.c ****                     {
 403:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 592              		.loc 1 403 0
 593 0266 0D4B     		ldr	r3, .L48+20
 594 0268 1B7A     		ldrb	r3, [r3, #8]
 595 026a DAB2     		uxtb	r2, r3
 596 026c 064B     		ldr	r3, .L48
 597 026e 1B7A     		ldrb	r3, [r3, #8]
 598 0270 DBB2     		uxtb	r3, r3
 599 0272 9A42     		cmp	r2, r3
 600 0274 18D1     		bne	.L25
 404:Generated_Source\PSoC5/RTC_INT.c ****                         {
 405:Generated_Source\PSoC5/RTC_INT.c ****                             /* Set month alarm */
 406:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 601              		.loc 1 406 0
 602 0276 0A4B     		ldr	r3, .L48+24
 603 0278 1B78     		ldrb	r3, [r3]
 604 027a DBB2     		uxtb	r3, r3
 605 027c 43F04003 		orr	r3, r3, #64
 606 0280 DAB2     		uxtb	r2, r3
 607 0282 074B     		ldr	r3, .L48+24
 608 0284 1A70     		strb	r2, [r3]
 609 0286 17E0     		b	.L24
 610              	.L49:
 611              		.align	2
 612              	.L48:
 613 0288 00000000 		.word	RTC_currentTimeDate
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 19


 614 028c 00000000 		.word	RTC_statusDateTime
 615 0290 00000000 		.word	RTC_daysInMonths
 616 0294 1F85EB51 		.word	1374389535
 617 0298 00000000 		.word	RTC_alarmCfgMask
 618 029c 00000000 		.word	RTC_alarmCfgTimeDate
 619 02a0 00000000 		.word	RTC_alarmCurStatus
 620 02a4 00000000 		.word	RTC_intervalCfgMask
 621              	.L25:
 407:Generated_Source\PSoC5/RTC_INT.c ****                         }
 408:Generated_Source\PSoC5/RTC_INT.c ****                         else
 409:Generated_Source\PSoC5/RTC_INT.c ****                         {
 410:Generated_Source\PSoC5/RTC_INT.c ****                             /* Clear month alarm */
 411:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 622              		.loc 1 411 0
 623 02a8 964B     		ldr	r3, .L50
 624 02aa 1B78     		ldrb	r3, [r3]
 625 02ac DBB2     		uxtb	r3, r3
 626 02ae 23F04003 		bic	r3, r3, #64
 627 02b2 DAB2     		uxtb	r2, r3
 628 02b4 934B     		ldr	r3, .L50
 629 02b6 1A70     		strb	r2, [r3]
 630              	.L24:
 412:Generated_Source\PSoC5/RTC_INT.c ****                         }
 413:Generated_Source\PSoC5/RTC_INT.c ****                     }   /* Month alarm is masked */
 414:Generated_Source\PSoC5/RTC_INT.c **** 
 415:Generated_Source\PSoC5/RTC_INT.c ****                     #if (1u == RTC_DST_FUNC_ENABLE)
 416:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 417:Generated_Source\PSoC5/RTC_INT.c ****                         {
 418:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus |= RTC_DST_MONTH;
 419:Generated_Source\PSoC5/RTC_INT.c ****                         }
 420:Generated_Source\PSoC5/RTC_INT.c ****                         else
 421:Generated_Source\PSoC5/RTC_INT.c ****                         {
 422:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 423:Generated_Source\PSoC5/RTC_INT.c ****                         }
 424:Generated_Source\PSoC5/RTC_INT.c **** 
 425:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_dstTimeDateStart.Month == RTC_currentTimeDate.Month)
 426:Generated_Source\PSoC5/RTC_INT.c ****                         {
 427:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus |= RTC_DST_MONTH;
 428:Generated_Source\PSoC5/RTC_INT.c ****                         }
 429:Generated_Source\PSoC5/RTC_INT.c ****                         else
 430:Generated_Source\PSoC5/RTC_INT.c ****                         {
 431:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus &= (uint8)(~RTC_DST_MONTH);
 432:Generated_Source\PSoC5/RTC_INT.c ****                         }
 433:Generated_Source\PSoC5/RTC_INT.c ****                     #endif /* 1u == RTC_DST_FUNC_ENABLE */
 434:Generated_Source\PSoC5/RTC_INT.c **** 
 435:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 436:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 631              		.loc 1 436 0
 632 02b8 934B     		ldr	r3, .L50+4
 633 02ba 1B78     		ldrb	r3, [r3]
 634 02bc FB71     		strb	r3, [r7, #7]
 437:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 635              		.loc 1 437 0
 636 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 637 02c0 002B     		cmp	r3, #0
 638 02c2 13D0     		beq	.L26
 639              		.loc 1 437 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 20


 640 02c4 8F4B     		ldr	r3, .L50
 641 02c6 1B78     		ldrb	r3, [r3]
 642 02c8 DAB2     		uxtb	r2, r3
 643 02ca FB79     		ldrb	r3, [r7, #7]
 644 02cc 1340     		ands	r3, r3, r2
 645 02ce DBB2     		uxtb	r3, r3
 646 02d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 647 02d2 9A42     		cmp	r2, r3
 648 02d4 0AD1     		bne	.L26
 649              		.loc 1 437 0 discriminator 2
 650 02d6 8D4B     		ldr	r3, .L50+8
 651 02d8 1B78     		ldrb	r3, [r3]
 652 02da DBB2     		uxtb	r3, r3
 653 02dc 43F00803 		orr	r3, r3, #8
 654 02e0 DAB2     		uxtb	r2, r3
 655 02e2 8A4B     		ldr	r3, .L50+8
 656 02e4 1A70     		strb	r2, [r3]
 657 02e6 874B     		ldr	r3, .L50
 658 02e8 0022     		movs	r2, #0
 659 02ea 1A70     		strb	r2, [r3]
 660              	.L26:
 438:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 439:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 440:Generated_Source\PSoC5/RTC_INT.c **** 
 441:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Month */
 442:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 661              		.loc 1 442 0 is_stmt 1
 662 02ec 884B     		ldr	r3, .L50+12
 663 02ee 1B78     		ldrb	r3, [r3]
 664 02f0 DBB2     		uxtb	r3, r3
 665 02f2 03F02003 		and	r3, r3, #32
 666 02f6 002B     		cmp	r3, #0
 667 02f8 01D0     		beq	.L16
 443:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_MONTH_MASK))
 444:Generated_Source\PSoC5/RTC_INT.c ****                     {
 445:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_EveryMonthHandler();
 668              		.loc 1 445 0
 669 02fa FFF7FEFF 		bl	RTC_EveryMonthHandler
 670              	.L16:
 446:Generated_Source\PSoC5/RTC_INT.c ****                     }
 447:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day roll over */
 448:Generated_Source\PSoC5/RTC_INT.c **** 
 449:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFWEEK */
 450:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 671              		.loc 1 450 0
 672 02fe 824B     		ldr	r3, .L50+4
 673 0300 1B78     		ldrb	r3, [r3]
 674 0302 DBB2     		uxtb	r3, r3
 675 0304 03F00803 		and	r3, r3, #8
 676 0308 002B     		cmp	r3, #0
 677 030a 18D0     		beq	.L27
 451:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFWEEK_MASK))
 452:Generated_Source\PSoC5/RTC_INT.c ****                 {
 453:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 678              		.loc 1 453 0
 679 030c 814B     		ldr	r3, .L50+16
 680 030e DB78     		ldrb	r3, [r3, #3]
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 21


 681 0310 DAB2     		uxtb	r2, r3
 682 0312 814B     		ldr	r3, .L50+20
 683 0314 DB78     		ldrb	r3, [r3, #3]
 684 0316 DBB2     		uxtb	r3, r3
 685 0318 9A42     		cmp	r2, r3
 686 031a 08D1     		bne	.L28
 454:Generated_Source\PSoC5/RTC_INT.c ****                     {
 455:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of week alarm */
 456:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 687              		.loc 1 456 0
 688 031c 794B     		ldr	r3, .L50
 689 031e 1B78     		ldrb	r3, [r3]
 690 0320 DBB2     		uxtb	r3, r3
 691 0322 43F00803 		orr	r3, r3, #8
 692 0326 DAB2     		uxtb	r2, r3
 693 0328 764B     		ldr	r3, .L50
 694 032a 1A70     		strb	r2, [r3]
 695 032c 07E0     		b	.L27
 696              	.L28:
 457:Generated_Source\PSoC5/RTC_INT.c ****                     }
 458:Generated_Source\PSoC5/RTC_INT.c ****                     else
 459:Generated_Source\PSoC5/RTC_INT.c ****                     {
 460:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of week alarm */
 461:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 697              		.loc 1 461 0
 698 032e 754B     		ldr	r3, .L50
 699 0330 1B78     		ldrb	r3, [r3]
 700 0332 DBB2     		uxtb	r3, r3
 701 0334 23F00803 		bic	r3, r3, #8
 702 0338 DAB2     		uxtb	r2, r3
 703 033a 724B     		ldr	r3, .L50
 704 033c 1A70     		strb	r2, [r3]
 705              	.L27:
 462:Generated_Source\PSoC5/RTC_INT.c ****                     }
 463:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of week alarm is masked */
 464:Generated_Source\PSoC5/RTC_INT.c **** 
 465:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFYEAR */
 466:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 706              		.loc 1 466 0
 707 033e 724B     		ldr	r3, .L50+4
 708 0340 1B78     		ldrb	r3, [r3]
 709 0342 DBB2     		uxtb	r3, r3
 710 0344 03F02003 		and	r3, r3, #32
 711 0348 002B     		cmp	r3, #0
 712 034a 18D0     		beq	.L29
 467:Generated_Source\PSoC5/RTC_INT.c ****                                                      RTC_ALARM_DAYOFYEAR_MASK))
 468:Generated_Source\PSoC5/RTC_INT.c ****                 {
 469:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 713              		.loc 1 469 0
 714 034c 714B     		ldr	r3, .L50+16
 715 034e DB88     		ldrh	r3, [r3, #6]	@ movhi
 716 0350 9AB2     		uxth	r2, r3
 717 0352 714B     		ldr	r3, .L50+20
 718 0354 DB88     		ldrh	r3, [r3, #6]	@ movhi
 719 0356 9BB2     		uxth	r3, r3
 720 0358 9A42     		cmp	r2, r3
 721 035a 08D1     		bne	.L30
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 22


 470:Generated_Source\PSoC5/RTC_INT.c ****                     {
 471:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of year alarm */
 472:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 722              		.loc 1 472 0
 723 035c 694B     		ldr	r3, .L50
 724 035e 1B78     		ldrb	r3, [r3]
 725 0360 DBB2     		uxtb	r3, r3
 726 0362 43F02003 		orr	r3, r3, #32
 727 0366 DAB2     		uxtb	r2, r3
 728 0368 664B     		ldr	r3, .L50
 729 036a 1A70     		strb	r2, [r3]
 730 036c 07E0     		b	.L29
 731              	.L30:
 473:Generated_Source\PSoC5/RTC_INT.c ****                     }
 474:Generated_Source\PSoC5/RTC_INT.c ****                     else
 475:Generated_Source\PSoC5/RTC_INT.c ****                     {
 476:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of year alarm */
 477:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 732              		.loc 1 477 0
 733 036e 654B     		ldr	r3, .L50
 734 0370 1B78     		ldrb	r3, [r3]
 735 0372 DBB2     		uxtb	r3, r3
 736 0374 23F02003 		bic	r3, r3, #32
 737 0378 DAB2     		uxtb	r2, r3
 738 037a 624B     		ldr	r3, .L50
 739 037c 1A70     		strb	r2, [r3]
 740              	.L29:
 478:Generated_Source\PSoC5/RTC_INT.c ****                     }
 479:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of year alarm is masked */
 480:Generated_Source\PSoC5/RTC_INT.c **** 
 481:Generated_Source\PSoC5/RTC_INT.c ****                 /* Alarm DAYOFMONTH */
 482:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 741              		.loc 1 482 0
 742 037e 624B     		ldr	r3, .L50+4
 743 0380 1B78     		ldrb	r3, [r3]
 744 0382 DBB2     		uxtb	r3, r3
 745 0384 03F01003 		and	r3, r3, #16
 746 0388 002B     		cmp	r3, #0
 747 038a 18D0     		beq	.L31
 483:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_ALARM_DAYOFMONTH_MASK))
 484:Generated_Source\PSoC5/RTC_INT.c ****                 {
 485:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 748              		.loc 1 485 0
 749 038c 614B     		ldr	r3, .L50+16
 750 038e 1B79     		ldrb	r3, [r3, #4]
 751 0390 DAB2     		uxtb	r2, r3
 752 0392 614B     		ldr	r3, .L50+20
 753 0394 1B79     		ldrb	r3, [r3, #4]
 754 0396 DBB2     		uxtb	r3, r3
 755 0398 9A42     		cmp	r2, r3
 756 039a 08D1     		bne	.L32
 486:Generated_Source\PSoC5/RTC_INT.c ****                     {
 487:Generated_Source\PSoC5/RTC_INT.c ****                         /* Set day of month alarm */
 488:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 757              		.loc 1 488 0
 758 039c 594B     		ldr	r3, .L50
 759 039e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 23


 760 03a0 DBB2     		uxtb	r3, r3
 761 03a2 43F01003 		orr	r3, r3, #16
 762 03a6 DAB2     		uxtb	r2, r3
 763 03a8 564B     		ldr	r3, .L50
 764 03aa 1A70     		strb	r2, [r3]
 765 03ac 07E0     		b	.L31
 766              	.L32:
 489:Generated_Source\PSoC5/RTC_INT.c ****                     }
 490:Generated_Source\PSoC5/RTC_INT.c ****                     else
 491:Generated_Source\PSoC5/RTC_INT.c ****                     {
 492:Generated_Source\PSoC5/RTC_INT.c ****                         /* Clear day of month alarm */
 493:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 767              		.loc 1 493 0
 768 03ae 554B     		ldr	r3, .L50
 769 03b0 1B78     		ldrb	r3, [r3]
 770 03b2 DBB2     		uxtb	r3, r3
 771 03b4 23F01003 		bic	r3, r3, #16
 772 03b8 DAB2     		uxtb	r2, r3
 773 03ba 524B     		ldr	r3, .L50
 774 03bc 1A70     		strb	r2, [r3]
 775              	.L31:
 494:Generated_Source\PSoC5/RTC_INT.c ****                     }
 495:Generated_Source\PSoC5/RTC_INT.c ****                 }   /* Day of month alarm is masked */
 496:Generated_Source\PSoC5/RTC_INT.c **** 
 497:Generated_Source\PSoC5/RTC_INT.c ****                 #if (1u == RTC_DST_FUNC_ENABLE)
 498:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStop.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 499:Generated_Source\PSoC5/RTC_INT.c ****                     {
 500:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 501:Generated_Source\PSoC5/RTC_INT.c ****                     }
 502:Generated_Source\PSoC5/RTC_INT.c ****                     else
 503:Generated_Source\PSoC5/RTC_INT.c ****                     {
 504:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 505:Generated_Source\PSoC5/RTC_INT.c ****                     }
 506:Generated_Source\PSoC5/RTC_INT.c **** 
 507:Generated_Source\PSoC5/RTC_INT.c ****                     if(RTC_dstTimeDateStart.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 508:Generated_Source\PSoC5/RTC_INT.c ****                     {
 509:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus |= RTC_DST_DAYOFMONTH;
 510:Generated_Source\PSoC5/RTC_INT.c ****                     }
 511:Generated_Source\PSoC5/RTC_INT.c ****                     else
 512:Generated_Source\PSoC5/RTC_INT.c ****                     {
 513:Generated_Source\PSoC5/RTC_INT.c ****                         RTC_dstStartStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 514:Generated_Source\PSoC5/RTC_INT.c ****                     }
 515:Generated_Source\PSoC5/RTC_INT.c ****                 #endif /* 1u == RTC_DST_FUNC_ENABLE */
 516:Generated_Source\PSoC5/RTC_INT.c **** 
 517:Generated_Source\PSoC5/RTC_INT.c ****                 /* Set Alarm flag event */
 518:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_tmp = RTC_alarmCfgMask;
 776              		.loc 1 518 0
 777 03be 524B     		ldr	r3, .L50+4
 778 03c0 1B78     		ldrb	r3, [r3]
 779 03c2 FB71     		strb	r3, [r7, #7]
 519:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_SET_ALARM(RTC_tmp,
 780              		.loc 1 519 0
 781 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 782 03c6 002B     		cmp	r3, #0
 783 03c8 13D0     		beq	.L33
 784              		.loc 1 519 0 is_stmt 0 discriminator 1
 785 03ca 4E4B     		ldr	r3, .L50
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 24


 786 03cc 1B78     		ldrb	r3, [r3]
 787 03ce DAB2     		uxtb	r2, r3
 788 03d0 FB79     		ldrb	r3, [r7, #7]
 789 03d2 1340     		ands	r3, r3, r2
 790 03d4 DBB2     		uxtb	r3, r3
 791 03d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 792 03d8 9A42     		cmp	r2, r3
 793 03da 0AD1     		bne	.L33
 794              		.loc 1 519 0 discriminator 2
 795 03dc 4B4B     		ldr	r3, .L50+8
 796 03de 1B78     		ldrb	r3, [r3]
 797 03e0 DBB2     		uxtb	r3, r3
 798 03e2 43F00803 		orr	r3, r3, #8
 799 03e6 DAB2     		uxtb	r2, r3
 800 03e8 484B     		ldr	r3, .L50+8
 801 03ea 1A70     		strb	r2, [r3]
 802 03ec 454B     		ldr	r3, .L50
 803 03ee 0022     		movs	r2, #0
 804 03f0 1A70     		strb	r2, [r3]
 805              	.L33:
 520:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_alarmCurStatus,
 521:Generated_Source\PSoC5/RTC_INT.c ****                                            RTC_statusDateTime);
 522:Generated_Source\PSoC5/RTC_INT.c **** 
 523:Generated_Source\PSoC5/RTC_INT.c ****                 /* Every Day */
 524:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 806              		.loc 1 524 0 is_stmt 1
 807 03f2 474B     		ldr	r3, .L50+12
 808 03f4 1B78     		ldrb	r3, [r3]
 809 03f6 DBB2     		uxtb	r3, r3
 810 03f8 03F00803 		and	r3, r3, #8
 811 03fc 002B     		cmp	r3, #0
 812 03fe 01D0     		beq	.L34
 525:Generated_Source\PSoC5/RTC_INT.c ****                          RTC_INTERVAL_DAY_MASK))
 526:Generated_Source\PSoC5/RTC_INT.c ****                 {
 527:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_EveryDayHandler();
 813              		.loc 1 527 0
 814 0400 FFF7FEFF 		bl	RTC_EveryDayHandler
 815              	.L34:
 528:Generated_Source\PSoC5/RTC_INT.c ****                 }
 529:Generated_Source\PSoC5/RTC_INT.c **** 
 530:Generated_Source\PSoC5/RTC_INT.c ****                 if(1u == RTC_currentTimeDate.DayOfWeek)
 816              		.loc 1 530 0
 817 0404 444B     		ldr	r3, .L50+20
 818 0406 DB78     		ldrb	r3, [r3, #3]
 819 0408 DBB2     		uxtb	r3, r3
 820 040a 012B     		cmp	r3, #1
 821 040c 08D1     		bne	.L11
 531:Generated_Source\PSoC5/RTC_INT.c ****                 {
 532:Generated_Source\PSoC5/RTC_INT.c ****                     /* Every Week */
 533:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask,
 822              		.loc 1 533 0
 823 040e 404B     		ldr	r3, .L50+12
 824 0410 1B78     		ldrb	r3, [r3]
 825 0412 DBB2     		uxtb	r3, r3
 826 0414 03F01003 		and	r3, r3, #16
 827 0418 002B     		cmp	r3, #0
 828 041a 01D0     		beq	.L11
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 25


 534:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_INTERVAL_WEEK_MASK))
 535:Generated_Source\PSoC5/RTC_INT.c ****                     {
 536:Generated_Source\PSoC5/RTC_INT.c ****                        RTC_EveryWeekHandler();
 829              		.loc 1 536 0
 830 041c FFF7FEFF 		bl	RTC_EveryWeekHandler
 831              	.L11:
 537:Generated_Source\PSoC5/RTC_INT.c ****                     }
 538:Generated_Source\PSoC5/RTC_INT.c ****                 }
 539:Generated_Source\PSoC5/RTC_INT.c **** 
 540:Generated_Source\PSoC5/RTC_INT.c ****             } /* End of day roll over */
 541:Generated_Source\PSoC5/RTC_INT.c **** 
 542:Generated_Source\PSoC5/RTC_INT.c ****             /* Status set PM/AM flag */
 543:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 832              		.loc 1 543 0
 833 0420 3D4B     		ldr	r3, .L50+20
 834 0422 9B78     		ldrb	r3, [r3, #2]
 835 0424 DBB2     		uxtb	r3, r3
 836 0426 0B2B     		cmp	r3, #11
 837 0428 08D8     		bhi	.L35
 544:Generated_Source\PSoC5/RTC_INT.c ****             {
 545:Generated_Source\PSoC5/RTC_INT.c ****                 /* AM Hour 00:00-11:59, flag zero */
 546:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 838              		.loc 1 546 0
 839 042a 384B     		ldr	r3, .L50+8
 840 042c 1B78     		ldrb	r3, [r3]
 841 042e DBB2     		uxtb	r3, r3
 842 0430 23F00403 		bic	r3, r3, #4
 843 0434 DAB2     		uxtb	r2, r3
 844 0436 354B     		ldr	r3, .L50+8
 845 0438 1A70     		strb	r2, [r3]
 846 043a 07E0     		b	.L36
 847              	.L35:
 547:Generated_Source\PSoC5/RTC_INT.c ****             }
 548:Generated_Source\PSoC5/RTC_INT.c ****             else
 549:Generated_Source\PSoC5/RTC_INT.c ****             {
 550:Generated_Source\PSoC5/RTC_INT.c ****                 /* PM Hour 12:00-23:59, flag set */
 551:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_statusDateTime |= RTC_STATUS_AM_PM;
 848              		.loc 1 551 0
 849 043c 334B     		ldr	r3, .L50+8
 850 043e 1B78     		ldrb	r3, [r3]
 851 0440 DBB2     		uxtb	r3, r3
 852 0442 43F00403 		orr	r3, r3, #4
 853 0446 DAB2     		uxtb	r2, r3
 854 0448 304B     		ldr	r3, .L50+8
 855 044a 1A70     		strb	r2, [r3]
 856              	.L36:
 552:Generated_Source\PSoC5/RTC_INT.c ****             }
 553:Generated_Source\PSoC5/RTC_INT.c **** 
 554:Generated_Source\PSoC5/RTC_INT.c ****             #if (1u == RTC_DST_FUNC_ENABLE)
 555:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStop.Hour == RTC_currentTimeDate.Hour)
 556:Generated_Source\PSoC5/RTC_INT.c ****                 {
 557:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus |= RTC_DST_HOUR;
 558:Generated_Source\PSoC5/RTC_INT.c ****                 }
 559:Generated_Source\PSoC5/RTC_INT.c ****                 else
 560:Generated_Source\PSoC5/RTC_INT.c ****                 {
 561:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStopStatus &= (uint8)(~RTC_DST_HOUR);
 562:Generated_Source\PSoC5/RTC_INT.c ****                 }
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 26


 563:Generated_Source\PSoC5/RTC_INT.c **** 
 564:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_dstTimeDateStart.Hour == RTC_currentTimeDate.Hour)
 565:Generated_Source\PSoC5/RTC_INT.c ****                 {
 566:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_dstStartStatus |= RTC_DST_HOUR;
 567:Generated_Source\PSoC5/RTC_INT.c ****                 }
 568:Generated_Source\PSoC5/RTC_INT.c ****                 else
 569:Generated_Source\PSoC5/RTC_INT.c ****                 {
 570:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_dstStartStatus &= (uint8)(~RTC_DST_HOUR);
 571:Generated_Source\PSoC5/RTC_INT.c ****                 }
 572:Generated_Source\PSoC5/RTC_INT.c **** 
 573:Generated_Source\PSoC5/RTC_INT.c ****                 /* DST Enable ? */
 574:Generated_Source\PSoC5/RTC_INT.c ****                 if(0u != RTC_IS_BIT_SET(RTC_dstModeType, RTC_DST_ENABLE))
 575:Generated_Source\PSoC5/RTC_INT.c ****                 {
 576:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_statusDateTime, RTC_STATUS_DST))
 577:Generated_Source\PSoC5/RTC_INT.c ****                     {
 578:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStopStatus, RTC_DST_HOUR |
 579:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_DAYOFMONTH | RTC_DST_MONTH))
 580:Generated_Source\PSoC5/RTC_INT.c ****                         {
 581:Generated_Source\PSoC5/RTC_INT.c ****                             /* Substruct from current value of minutes, number of minutes
 582:Generated_Source\PSoC5/RTC_INT.c ****                             * in DST offset which is out of complete hour
 583:Generated_Source\PSoC5/RTC_INT.c ****                             */
 584:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min -=
 585:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 586:Generated_Source\PSoC5/RTC_INT.c **** 
 587:Generated_Source\PSoC5/RTC_INT.c ****                             /* Is minute value negative? */
 588:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 589:Generated_Source\PSoC5/RTC_INT.c ****                             {
 590:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 591:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED -     (~currentTimeDate.Min    ) ==
 592:Generated_Source\PSoC5/RTC_INT.c ****                                 * HOUR_ELAPSED + 1 - (~currentTimeDate.Min + 1)
 593:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 594:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min = RTC_HOUR_ELAPSED -
 595:Generated_Source\PSoC5/RTC_INT.c ****                                                              ((uint8)(~RTC_currentTimeDate.Min));
 596:Generated_Source\PSoC5/RTC_INT.c **** 
 597:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour--;
 598:Generated_Source\PSoC5/RTC_INT.c ****                             }
 599:Generated_Source\PSoC5/RTC_INT.c **** 
 600:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour -= RTC_dstOffsetMin /
 601:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 602:Generated_Source\PSoC5/RTC_INT.c **** 
 603:Generated_Source\PSoC5/RTC_INT.c ****                             /* Day roll over
 604:Generated_Source\PSoC5/RTC_INT.c ****                             * Is hour value negative? */
 605:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 606:Generated_Source\PSoC5/RTC_INT.c ****                             {
 607:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Convert to the positive.
 608:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED - (~currentTimeDate.Hour) ==
 609:Generated_Source\PSoC5/RTC_INT.c ****                                 * DAY_ELAPSED + 1 - (~currentTimeDate.Hour + 1)
 610:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 611:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour = RTC_DAY_ELAPSED -
 612:Generated_Source\PSoC5/RTC_INT.c ****                                                               ((uint8)(~RTC_currentTimeDate.Hour));
 613:Generated_Source\PSoC5/RTC_INT.c **** 
 614:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 615:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 616:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 617:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 618:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 619:Generated_Source\PSoC5/RTC_INT.c ****                                 }
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 27


 620:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 621:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 622:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 623:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 624:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 625:Generated_Source\PSoC5/RTC_INT.c **** 
 626:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth--;
 627:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear--;
 628:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek--;
 629:Generated_Source\PSoC5/RTC_INT.c **** 
 630:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfWeek)
 631:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 632:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = RTC_DAYS_IN_WEEK;
 633:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 634:Generated_Source\PSoC5/RTC_INT.c **** 
 635:Generated_Source\PSoC5/RTC_INT.c ****                                 if(0u == RTC_currentTimeDate.DayOfMonth)
 636:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 637:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month--;
 638:Generated_Source\PSoC5/RTC_INT.c ****                                     if(0u == RTC_currentTimeDate.Month)
 639:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 640:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_DECEMBER;
 641:Generated_Source\PSoC5/RTC_INT.c **** 
 642:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfMonth =
 643:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
 644:Generated_Source\PSoC5/RTC_INT.c **** 
 645:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year--;
 646:Generated_Source\PSoC5/RTC_INT.c **** 
 647:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 648:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 649:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 650:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 651:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear =
 652:Generated_Source\PSoC5/RTC_INT.c ****                                                                                     RTC_DAYS_IN_LEA
 653:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 654:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 655:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 656:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 657:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfYear = RTC_DAYS_IN_YEAR;
 658:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 659:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 660:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 661:Generated_Source\PSoC5/RTC_INT.c ****                                     else
 662:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 663:Generated_Source\PSoC5/RTC_INT.c ****                                         /* Day of month roll over.
 664:Generated_Source\PSoC5/RTC_INT.c ****                                         * Check if day of month February 29 of leap year
 665:Generated_Source\PSoC5/RTC_INT.c ****                                         */
 666:Generated_Source\PSoC5/RTC_INT.c ****                                         if((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 667:Generated_Source\PSoC5/RTC_INT.c ****                                             (RTC_currentTimeDate.Month == RTC_FEBRUARY))
 668:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 669:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 670:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u]
 671:Generated_Source\PSoC5/RTC_INT.c ****                                             + 1u;
 672:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 673:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 674:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 675:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_currentTimeDate.DayOfMonth =
 676:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_daysInMonths[RTC_currentTimeDate.Month - 1u];
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 28


 677:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 678:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 679:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 680:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 681:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 682:Generated_Source\PSoC5/RTC_INT.c ****                             }
 683:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_DST);
 684:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStopStatus = 0u;
 685:Generated_Source\PSoC5/RTC_INT.c ****                         }
 686:Generated_Source\PSoC5/RTC_INT.c ****                     }
 687:Generated_Source\PSoC5/RTC_INT.c ****                     else
 688:Generated_Source\PSoC5/RTC_INT.c ****                     {
 689:Generated_Source\PSoC5/RTC_INT.c ****                         if(0u != RTC_IS_BIT_SET(RTC_dstStartStatus,
 690:Generated_Source\PSoC5/RTC_INT.c ****                                                       (RTC_DST_HOUR | RTC_DST_DAYOFMONTH |
 691:Generated_Source\PSoC5/RTC_INT.c ****                                                        RTC_DST_MONTH)))
 692:Generated_Source\PSoC5/RTC_INT.c ****                         {
 693:Generated_Source\PSoC5/RTC_INT.c ****                             /* Add Hour and Min */
 694:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Min +=
 695:Generated_Source\PSoC5/RTC_INT.c ****                                                 RTC_dstOffsetMin % (RTC_HOUR_ELAPSED + 1u);
 696:Generated_Source\PSoC5/RTC_INT.c **** 
 697:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Min > RTC_HOUR_ELAPSED)
 698:Generated_Source\PSoC5/RTC_INT.c ****                             {
 699:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust Min */
 700:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Min -= (RTC_HOUR_ELAPSED + 1u);
 701:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour++;
 702:Generated_Source\PSoC5/RTC_INT.c ****                             }
 703:Generated_Source\PSoC5/RTC_INT.c **** 
 704:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_currentTimeDate.Hour += RTC_dstOffsetMin /
 705:Generated_Source\PSoC5/RTC_INT.c ****                                                                      (RTC_HOUR_ELAPSED + 1u);
 706:Generated_Source\PSoC5/RTC_INT.c **** 
 707:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_currentTimeDate.Hour > RTC_DAY_ELAPSED)
 708:Generated_Source\PSoC5/RTC_INT.c ****                             {
 709:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Adjust hour, add day */
 710:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.Hour -= (RTC_DAY_ELAPSED + 1u);
 711:Generated_Source\PSoC5/RTC_INT.c **** 
 712:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Status set PM/AM flag */
 713:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.Hour < RTC_HALF_OF_DAY_ELAPSED)
 714:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 715:Generated_Source\PSoC5/RTC_INT.c ****                                     /* AM Hour 00:00-11:59, flag zero */
 716:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime &= (uint8)(~RTC_STATUS_AM_PM);
 717:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 718:Generated_Source\PSoC5/RTC_INT.c ****                                 else
 719:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 720:Generated_Source\PSoC5/RTC_INT.c ****                                     /* PM Hour 12:00-23:59, flag set */
 721:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_statusDateTime |= RTC_STATUS_AM_PM;
 722:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 723:Generated_Source\PSoC5/RTC_INT.c **** 
 724:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfMonth++;
 725:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfYear++;
 726:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_currentTimeDate.DayOfWeek++;
 727:Generated_Source\PSoC5/RTC_INT.c **** 
 728:Generated_Source\PSoC5/RTC_INT.c ****                                 if(RTC_currentTimeDate.DayOfWeek > RTC_WEEK_ELAPSED)
 729:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 730:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfWeek = 1u;
 731:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 732:Generated_Source\PSoC5/RTC_INT.c **** 
 733:Generated_Source\PSoC5/RTC_INT.c ****                                 /* Day of month roll over.
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 29


 734:Generated_Source\PSoC5/RTC_INT.c ****                                 * Check if day of month greater than 29 in February of leap year or
 735:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than 28 NOT in February of NON leap year 
 736:Generated_Source\PSoC5/RTC_INT.c ****                                 * if day of month greater than it should be in every month in non l
 737:Generated_Source\PSoC5/RTC_INT.c ****                                 */
 738:Generated_Source\PSoC5/RTC_INT.c ****                                 if(((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 739:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month == RTC_FEBRUARY)  &&
 740:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 741:Generated_Source\PSoC5/RTC_INT.c ****                                   (RTC_daysInMonths[RTC_currentTimeDate.Month - 1u] + 1u))) ||
 742:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u != (RTC_statusDateTime & RTC_STATUS_LY)) &&
 743:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.Month != RTC_FEBRUARY)  &&
 744:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 745:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])) ||
 746:Generated_Source\PSoC5/RTC_INT.c ****                                    ((0u == (RTC_statusDateTime & RTC_STATUS_LY)) &&
 747:Generated_Source\PSoC5/RTC_INT.c ****                                     (RTC_currentTimeDate.DayOfMonth >
 748:Generated_Source\PSoC5/RTC_INT.c ****                                      RTC_daysInMonths[RTC_currentTimeDate.Month - 1u])))
 749:Generated_Source\PSoC5/RTC_INT.c ****                                 {
 750:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.Month++;
 751:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_currentTimeDate.DayOfMonth = 1u;
 752:Generated_Source\PSoC5/RTC_INT.c ****                                     if(RTC_currentTimeDate.Month > RTC_YEAR_ELAPSED)
 753:Generated_Source\PSoC5/RTC_INT.c ****                                     {
 754:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Month = RTC_JANUARY;
 755:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.Year++;
 756:Generated_Source\PSoC5/RTC_INT.c **** 
 757:Generated_Source\PSoC5/RTC_INT.c ****                                         if(1u == RTC_LEAP_YEAR(RTC_currentTimeDate.Year))
 758:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 759:Generated_Source\PSoC5/RTC_INT.c ****                                             /* LP - true, else - false */
 760:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime |= RTC_STATUS_LY;
 761:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 762:Generated_Source\PSoC5/RTC_INT.c ****                                         else
 763:Generated_Source\PSoC5/RTC_INT.c ****                                         {
 764:Generated_Source\PSoC5/RTC_INT.c ****                                             RTC_statusDateTime &= (uint8)(~RTC_STATUS_LY);
 765:Generated_Source\PSoC5/RTC_INT.c ****                                         }
 766:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_currentTimeDate.DayOfYear = 1u;
 767:Generated_Source\PSoC5/RTC_INT.c **** 
 768:Generated_Source\PSoC5/RTC_INT.c ****                                         RTC_EveryYearHandler();
 769:Generated_Source\PSoC5/RTC_INT.c ****                                     }
 770:Generated_Source\PSoC5/RTC_INT.c ****                                     RTC_EveryMonthHandler();
 771:Generated_Source\PSoC5/RTC_INT.c ****                                 }
 772:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_EveryDayHandler();
 773:Generated_Source\PSoC5/RTC_INT.c ****                             }
 774:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_statusDateTime |= RTC_STATUS_DST;
 775:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_dstStartStatus = 0u;
 776:Generated_Source\PSoC5/RTC_INT.c **** 
 777:Generated_Source\PSoC5/RTC_INT.c ****                             /* Month */
 778:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.Month == RTC_currentTimeDate.Month)
 779:Generated_Source\PSoC5/RTC_INT.c ****                             {
 780:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_MONTH;
 781:Generated_Source\PSoC5/RTC_INT.c ****                             }
 782:Generated_Source\PSoC5/RTC_INT.c ****                             else
 783:Generated_Source\PSoC5/RTC_INT.c ****                             {
 784:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_MONTH);
 785:Generated_Source\PSoC5/RTC_INT.c ****                             }
 786:Generated_Source\PSoC5/RTC_INT.c **** 
 787:Generated_Source\PSoC5/RTC_INT.c ****                             /* DayOfMonth */
 788:Generated_Source\PSoC5/RTC_INT.c ****                             if(RTC_dstTimeDateStop.DayOfMonth ==
 789:Generated_Source\PSoC5/RTC_INT.c ****                                                                             RTC_currentTimeDate.Day
 790:Generated_Source\PSoC5/RTC_INT.c ****                             {
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 30


 791:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus |= RTC_DST_DAYOFMONTH;
 792:Generated_Source\PSoC5/RTC_INT.c ****                             }
 793:Generated_Source\PSoC5/RTC_INT.c ****                             else
 794:Generated_Source\PSoC5/RTC_INT.c ****                             {
 795:Generated_Source\PSoC5/RTC_INT.c ****                                 RTC_dstStopStatus &= (uint8)(~RTC_DST_DAYOFMONTH);
 796:Generated_Source\PSoC5/RTC_INT.c ****                             }
 797:Generated_Source\PSoC5/RTC_INT.c ****                         }
 798:Generated_Source\PSoC5/RTC_INT.c ****                     }
 799:Generated_Source\PSoC5/RTC_INT.c **** 
 800:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFWEEK */
 801:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 802:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFWEEK_MASK))
 803:Generated_Source\PSoC5/RTC_INT.c ****                     {
 804:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfWeek == RTC_currentTimeDate.DayOfWeek)
 805:Generated_Source\PSoC5/RTC_INT.c ****                         {
 806:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFWEEK_MASK;
 807:Generated_Source\PSoC5/RTC_INT.c ****                         }
 808:Generated_Source\PSoC5/RTC_INT.c ****                         else
 809:Generated_Source\PSoC5/RTC_INT.c ****                         {
 810:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFWEEK_MASK);
 811:Generated_Source\PSoC5/RTC_INT.c ****                         }
 812:Generated_Source\PSoC5/RTC_INT.c ****                     }
 813:Generated_Source\PSoC5/RTC_INT.c **** 
 814:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFYEAR */
 815:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 816:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFYEAR_MASK))
 817:Generated_Source\PSoC5/RTC_INT.c ****                     {
 818:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfYear == RTC_currentTimeDate.DayOfYear)
 819:Generated_Source\PSoC5/RTC_INT.c ****                         {
 820:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFYEAR_MASK;
 821:Generated_Source\PSoC5/RTC_INT.c ****                         }
 822:Generated_Source\PSoC5/RTC_INT.c ****                         else
 823:Generated_Source\PSoC5/RTC_INT.c ****                         {
 824:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFYEAR_MASK);
 825:Generated_Source\PSoC5/RTC_INT.c ****                         }
 826:Generated_Source\PSoC5/RTC_INT.c ****                     }
 827:Generated_Source\PSoC5/RTC_INT.c **** 
 828:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm DAYOFMONTH */
 829:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 830:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_DAYOFMONTH_MASK))
 831:Generated_Source\PSoC5/RTC_INT.c ****                     {
 832:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.DayOfMonth == RTC_currentTimeDate.DayOfMonth)
 833:Generated_Source\PSoC5/RTC_INT.c ****                         {
 834:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_DAYOFMONTH_MASK;
 835:Generated_Source\PSoC5/RTC_INT.c ****                         }
 836:Generated_Source\PSoC5/RTC_INT.c ****                         else
 837:Generated_Source\PSoC5/RTC_INT.c ****                         {
 838:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_DAYOFMONTH_MASK);
 839:Generated_Source\PSoC5/RTC_INT.c ****                         }
 840:Generated_Source\PSoC5/RTC_INT.c ****                     }
 841:Generated_Source\PSoC5/RTC_INT.c **** 
 842:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm MONTH */
 843:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 844:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_MONTH_MASK))
 845:Generated_Source\PSoC5/RTC_INT.c ****                     {
 846:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Month == RTC_currentTimeDate.Month)
 847:Generated_Source\PSoC5/RTC_INT.c ****                         {
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 31


 848:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_MONTH_MASK;
 849:Generated_Source\PSoC5/RTC_INT.c ****                         }
 850:Generated_Source\PSoC5/RTC_INT.c ****                         else
 851:Generated_Source\PSoC5/RTC_INT.c ****                         {
 852:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MONTH_MASK);
 853:Generated_Source\PSoC5/RTC_INT.c ****                         }
 854:Generated_Source\PSoC5/RTC_INT.c ****                     }
 855:Generated_Source\PSoC5/RTC_INT.c **** 
 856:Generated_Source\PSoC5/RTC_INT.c ****                     /* Alarm YEAR */
 857:Generated_Source\PSoC5/RTC_INT.c ****                     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask,
 858:Generated_Source\PSoC5/RTC_INT.c ****                                                          RTC_ALARM_YEAR_MASK))
 859:Generated_Source\PSoC5/RTC_INT.c ****                     {
 860:Generated_Source\PSoC5/RTC_INT.c ****                         if(RTC_alarmCfgTimeDate.Year == RTC_currentTimeDate.Year)
 861:Generated_Source\PSoC5/RTC_INT.c ****                         {
 862:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus |= RTC_ALARM_YEAR_MASK;
 863:Generated_Source\PSoC5/RTC_INT.c ****                         }
 864:Generated_Source\PSoC5/RTC_INT.c ****                         else
 865:Generated_Source\PSoC5/RTC_INT.c ****                         {
 866:Generated_Source\PSoC5/RTC_INT.c ****                             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_YEAR_MASK);
 867:Generated_Source\PSoC5/RTC_INT.c ****                         }
 868:Generated_Source\PSoC5/RTC_INT.c ****                     }
 869:Generated_Source\PSoC5/RTC_INT.c **** 
 870:Generated_Source\PSoC5/RTC_INT.c ****                     /* Set Alarm flag event */
 871:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_tmp = RTC_alarmCfgMask;
 872:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_SET_ALARM(RTC_tmp,
 873:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_alarmCurStatus,
 874:Generated_Source\PSoC5/RTC_INT.c ****                                                RTC_statusDateTime);
 875:Generated_Source\PSoC5/RTC_INT.c ****                 }
 876:Generated_Source\PSoC5/RTC_INT.c ****             #endif /* 1u == RTC_DST_FUNC_ENABLE */
 877:Generated_Source\PSoC5/RTC_INT.c **** 
 878:Generated_Source\PSoC5/RTC_INT.c ****             /* Alarm HOUR */
 879:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_HOUR_MASK))
 857              		.loc 1 879 0
 858 044c 2E4B     		ldr	r3, .L50+4
 859 044e 1B78     		ldrb	r3, [r3]
 860 0450 DBB2     		uxtb	r3, r3
 861 0452 03F00403 		and	r3, r3, #4
 862 0456 002B     		cmp	r3, #0
 863 0458 18D0     		beq	.L37
 880:Generated_Source\PSoC5/RTC_INT.c ****             {
 881:Generated_Source\PSoC5/RTC_INT.c ****                 if(RTC_alarmCfgTimeDate.Hour == RTC_currentTimeDate.Hour)
 864              		.loc 1 881 0
 865 045a 2E4B     		ldr	r3, .L50+16
 866 045c 9B78     		ldrb	r3, [r3, #2]
 867 045e DAB2     		uxtb	r2, r3
 868 0460 2D4B     		ldr	r3, .L50+20
 869 0462 9B78     		ldrb	r3, [r3, #2]
 870 0464 DBB2     		uxtb	r3, r3
 871 0466 9A42     		cmp	r2, r3
 872 0468 08D1     		bne	.L38
 882:Generated_Source\PSoC5/RTC_INT.c ****                 {
 883:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus |= RTC_ALARM_HOUR_MASK;
 873              		.loc 1 883 0
 874 046a 264B     		ldr	r3, .L50
 875 046c 1B78     		ldrb	r3, [r3]
 876 046e DBB2     		uxtb	r3, r3
 877 0470 43F00403 		orr	r3, r3, #4
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 32


 878 0474 DAB2     		uxtb	r2, r3
 879 0476 234B     		ldr	r3, .L50
 880 0478 1A70     		strb	r2, [r3]
 881 047a 07E0     		b	.L37
 882              	.L38:
 884:Generated_Source\PSoC5/RTC_INT.c ****                 }
 885:Generated_Source\PSoC5/RTC_INT.c ****                 else
 886:Generated_Source\PSoC5/RTC_INT.c ****                 {
 887:Generated_Source\PSoC5/RTC_INT.c ****                     RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_HOUR_MASK);
 883              		.loc 1 887 0
 884 047c 214B     		ldr	r3, .L50
 885 047e 1B78     		ldrb	r3, [r3]
 886 0480 DBB2     		uxtb	r3, r3
 887 0482 23F00403 		bic	r3, r3, #4
 888 0486 DAB2     		uxtb	r2, r3
 889 0488 1E4B     		ldr	r3, .L50
 890 048a 1A70     		strb	r2, [r3]
 891              	.L37:
 888:Generated_Source\PSoC5/RTC_INT.c ****                 }
 889:Generated_Source\PSoC5/RTC_INT.c ****             }
 890:Generated_Source\PSoC5/RTC_INT.c **** 
 891:Generated_Source\PSoC5/RTC_INT.c ****             /* Set Alarm flag event */
 892:Generated_Source\PSoC5/RTC_INT.c ****             RTC_tmp = RTC_alarmCfgMask;
 892              		.loc 1 892 0
 893 048c 1E4B     		ldr	r3, .L50+4
 894 048e 1B78     		ldrb	r3, [r3]
 895 0490 FB71     		strb	r3, [r7, #7]
 893:Generated_Source\PSoC5/RTC_INT.c ****             RTC_SET_ALARM(RTC_tmp,
 896              		.loc 1 893 0
 897 0492 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 898 0494 002B     		cmp	r3, #0
 899 0496 13D0     		beq	.L39
 900              		.loc 1 893 0 is_stmt 0 discriminator 1
 901 0498 1A4B     		ldr	r3, .L50
 902 049a 1B78     		ldrb	r3, [r3]
 903 049c DAB2     		uxtb	r2, r3
 904 049e FB79     		ldrb	r3, [r7, #7]
 905 04a0 1340     		ands	r3, r3, r2
 906 04a2 DBB2     		uxtb	r3, r3
 907 04a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 908 04a6 9A42     		cmp	r2, r3
 909 04a8 0AD1     		bne	.L39
 910              		.loc 1 893 0 discriminator 2
 911 04aa 184B     		ldr	r3, .L50+8
 912 04ac 1B78     		ldrb	r3, [r3]
 913 04ae DBB2     		uxtb	r3, r3
 914 04b0 43F00803 		orr	r3, r3, #8
 915 04b4 DAB2     		uxtb	r2, r3
 916 04b6 154B     		ldr	r3, .L50+8
 917 04b8 1A70     		strb	r2, [r3]
 918 04ba 124B     		ldr	r3, .L50
 919 04bc 0022     		movs	r2, #0
 920 04be 1A70     		strb	r2, [r3]
 921              	.L39:
 894:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_alarmCurStatus,
 895:Generated_Source\PSoC5/RTC_INT.c ****                                        RTC_statusDateTime);
 896:Generated_Source\PSoC5/RTC_INT.c **** 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 33


 897:Generated_Source\PSoC5/RTC_INT.c ****             /* Every Hour */
 898:Generated_Source\PSoC5/RTC_INT.c ****             if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_HOUR_MASK))
 922              		.loc 1 898 0 is_stmt 1
 923 04c0 134B     		ldr	r3, .L50+12
 924 04c2 1B78     		ldrb	r3, [r3]
 925 04c4 DBB2     		uxtb	r3, r3
 926 04c6 03F00403 		and	r3, r3, #4
 927 04ca 002B     		cmp	r3, #0
 928 04cc 01D0     		beq	.L10
 899:Generated_Source\PSoC5/RTC_INT.c ****             {
 900:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_EveryHourHandler();
 929              		.loc 1 900 0
 930 04ce FFF7FEFF 		bl	RTC_EveryHourHandler
 931              	.L10:
 901:Generated_Source\PSoC5/RTC_INT.c ****             }
 902:Generated_Source\PSoC5/RTC_INT.c ****         } /* Min > 59 = Hour */
 903:Generated_Source\PSoC5/RTC_INT.c **** 
 904:Generated_Source\PSoC5/RTC_INT.c ****         /* Alarm MIN */
 905:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_MIN_MASK))
 932              		.loc 1 905 0
 933 04d2 0D4B     		ldr	r3, .L50+4
 934 04d4 1B78     		ldrb	r3, [r3]
 935 04d6 DBB2     		uxtb	r3, r3
 936 04d8 03F00203 		and	r3, r3, #2
 937 04dc 002B     		cmp	r3, #0
 938 04de 25D0     		beq	.L40
 906:Generated_Source\PSoC5/RTC_INT.c ****         {
 907:Generated_Source\PSoC5/RTC_INT.c ****             if(RTC_alarmCfgTimeDate.Min == RTC_currentTimeDate.Min)
 939              		.loc 1 907 0
 940 04e0 0C4B     		ldr	r3, .L50+16
 941 04e2 5B78     		ldrb	r3, [r3, #1]
 942 04e4 DAB2     		uxtb	r2, r3
 943 04e6 0C4B     		ldr	r3, .L50+20
 944 04e8 5B78     		ldrb	r3, [r3, #1]
 945 04ea DBB2     		uxtb	r3, r3
 946 04ec 9A42     		cmp	r2, r3
 947 04ee 15D1     		bne	.L41
 908:Generated_Source\PSoC5/RTC_INT.c ****             {
 909:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus |= RTC_ALARM_MIN_MASK;
 948              		.loc 1 909 0
 949 04f0 044B     		ldr	r3, .L50
 950 04f2 1B78     		ldrb	r3, [r3]
 951 04f4 DBB2     		uxtb	r3, r3
 952 04f6 43F00203 		orr	r3, r3, #2
 953 04fa DAB2     		uxtb	r2, r3
 954 04fc 014B     		ldr	r3, .L50
 955 04fe 1A70     		strb	r2, [r3]
 956 0500 14E0     		b	.L40
 957              	.L51:
 958 0502 00BF     		.align	2
 959              	.L50:
 960 0504 00000000 		.word	RTC_alarmCurStatus
 961 0508 00000000 		.word	RTC_alarmCfgMask
 962 050c 00000000 		.word	RTC_statusDateTime
 963 0510 00000000 		.word	RTC_intervalCfgMask
 964 0514 00000000 		.word	RTC_alarmCfgTimeDate
 965 0518 00000000 		.word	RTC_currentTimeDate
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 34


 966              	.L41:
 910:Generated_Source\PSoC5/RTC_INT.c ****             }
 911:Generated_Source\PSoC5/RTC_INT.c ****             else
 912:Generated_Source\PSoC5/RTC_INT.c ****             {
 913:Generated_Source\PSoC5/RTC_INT.c ****                 RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_MIN_MASK);
 967              		.loc 1 913 0
 968 051c 384B     		ldr	r3, .L52
 969 051e 1B78     		ldrb	r3, [r3]
 970 0520 DBB2     		uxtb	r3, r3
 971 0522 23F00203 		bic	r3, r3, #2
 972 0526 DAB2     		uxtb	r2, r3
 973 0528 354B     		ldr	r3, .L52
 974 052a 1A70     		strb	r2, [r3]
 975              	.L40:
 914:Generated_Source\PSoC5/RTC_INT.c ****             }
 915:Generated_Source\PSoC5/RTC_INT.c ****         }
 916:Generated_Source\PSoC5/RTC_INT.c **** 
 917:Generated_Source\PSoC5/RTC_INT.c ****         /* Set Alarm flag event */
 918:Generated_Source\PSoC5/RTC_INT.c ****         RTC_tmp = RTC_alarmCfgMask;
 976              		.loc 1 918 0
 977 052c 354B     		ldr	r3, .L52+4
 978 052e 1B78     		ldrb	r3, [r3]
 979 0530 FB71     		strb	r3, [r7, #7]
 919:Generated_Source\PSoC5/RTC_INT.c ****         RTC_SET_ALARM(RTC_tmp,
 980              		.loc 1 919 0
 981 0532 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 982 0534 002B     		cmp	r3, #0
 983 0536 13D0     		beq	.L42
 984              		.loc 1 919 0 is_stmt 0 discriminator 1
 985 0538 314B     		ldr	r3, .L52
 986 053a 1B78     		ldrb	r3, [r3]
 987 053c DAB2     		uxtb	r2, r3
 988 053e FB79     		ldrb	r3, [r7, #7]
 989 0540 1340     		ands	r3, r3, r2
 990 0542 DBB2     		uxtb	r3, r3
 991 0544 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 992 0546 9A42     		cmp	r2, r3
 993 0548 0AD1     		bne	.L42
 994              		.loc 1 919 0 discriminator 2
 995 054a 2F4B     		ldr	r3, .L52+8
 996 054c 1B78     		ldrb	r3, [r3]
 997 054e DBB2     		uxtb	r3, r3
 998 0550 43F00803 		orr	r3, r3, #8
 999 0554 DAB2     		uxtb	r2, r3
 1000 0556 2C4B     		ldr	r3, .L52+8
 1001 0558 1A70     		strb	r2, [r3]
 1002 055a 294B     		ldr	r3, .L52
 1003 055c 0022     		movs	r2, #0
 1004 055e 1A70     		strb	r2, [r3]
 1005              	.L42:
 920:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_alarmCurStatus,
 921:Generated_Source\PSoC5/RTC_INT.c ****                                    RTC_statusDateTime);
 922:Generated_Source\PSoC5/RTC_INT.c **** 
 923:Generated_Source\PSoC5/RTC_INT.c ****         /* Every Min */
 924:Generated_Source\PSoC5/RTC_INT.c ****         if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_MIN_MASK))
 1006              		.loc 1 924 0 is_stmt 1
 1007 0560 2A4B     		ldr	r3, .L52+12
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 35


 1008 0562 1B78     		ldrb	r3, [r3]
 1009 0564 DBB2     		uxtb	r3, r3
 1010 0566 03F00203 		and	r3, r3, #2
 1011 056a 002B     		cmp	r3, #0
 1012 056c 01D0     		beq	.L9
 925:Generated_Source\PSoC5/RTC_INT.c ****         {
 926:Generated_Source\PSoC5/RTC_INT.c ****             RTC_EveryMinuteHandler();
 1013              		.loc 1 926 0
 1014 056e FFF7FEFF 		bl	RTC_EveryMinuteHandler
 1015              	.L9:
 927:Generated_Source\PSoC5/RTC_INT.c ****         }
 928:Generated_Source\PSoC5/RTC_INT.c ****     } /* Sec */
 929:Generated_Source\PSoC5/RTC_INT.c **** 
 930:Generated_Source\PSoC5/RTC_INT.c ****     /* Alarm SEC */
 931:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_alarmCfgMask, RTC_ALARM_SEC_MASK))
 1016              		.loc 1 931 0
 1017 0572 244B     		ldr	r3, .L52+4
 1018 0574 1B78     		ldrb	r3, [r3]
 1019 0576 DBB2     		uxtb	r3, r3
 1020 0578 03F00103 		and	r3, r3, #1
 1021 057c 002B     		cmp	r3, #0
 1022 057e 18D0     		beq	.L43
 932:Generated_Source\PSoC5/RTC_INT.c ****     {
 933:Generated_Source\PSoC5/RTC_INT.c ****         if(RTC_alarmCfgTimeDate.Sec == RTC_currentTimeDate.Sec)
 1023              		.loc 1 933 0
 1024 0580 234B     		ldr	r3, .L52+16
 1025 0582 1B78     		ldrb	r3, [r3]
 1026 0584 DAB2     		uxtb	r2, r3
 1027 0586 234B     		ldr	r3, .L52+20
 1028 0588 1B78     		ldrb	r3, [r3]
 1029 058a DBB2     		uxtb	r3, r3
 1030 058c 9A42     		cmp	r2, r3
 1031 058e 08D1     		bne	.L44
 934:Generated_Source\PSoC5/RTC_INT.c ****         {
 935:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus |= RTC_ALARM_SEC_MASK;
 1032              		.loc 1 935 0
 1033 0590 1B4B     		ldr	r3, .L52
 1034 0592 1B78     		ldrb	r3, [r3]
 1035 0594 DBB2     		uxtb	r3, r3
 1036 0596 43F00103 		orr	r3, r3, #1
 1037 059a DAB2     		uxtb	r2, r3
 1038 059c 184B     		ldr	r3, .L52
 1039 059e 1A70     		strb	r2, [r3]
 1040 05a0 07E0     		b	.L43
 1041              	.L44:
 936:Generated_Source\PSoC5/RTC_INT.c ****         }
 937:Generated_Source\PSoC5/RTC_INT.c ****         else
 938:Generated_Source\PSoC5/RTC_INT.c ****         {
 939:Generated_Source\PSoC5/RTC_INT.c ****             RTC_alarmCurStatus &= (uint8)(~RTC_ALARM_SEC_MASK);
 1042              		.loc 1 939 0
 1043 05a2 174B     		ldr	r3, .L52
 1044 05a4 1B78     		ldrb	r3, [r3]
 1045 05a6 DBB2     		uxtb	r3, r3
 1046 05a8 23F00103 		bic	r3, r3, #1
 1047 05ac DAB2     		uxtb	r2, r3
 1048 05ae 144B     		ldr	r3, .L52
 1049 05b0 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 36


 1050              	.L43:
 940:Generated_Source\PSoC5/RTC_INT.c ****         }
 941:Generated_Source\PSoC5/RTC_INT.c ****     }
 942:Generated_Source\PSoC5/RTC_INT.c **** 
 943:Generated_Source\PSoC5/RTC_INT.c ****     /* Set Alarm flag event */
 944:Generated_Source\PSoC5/RTC_INT.c ****     RTC_tmp = RTC_alarmCfgMask;
 1051              		.loc 1 944 0
 1052 05b2 144B     		ldr	r3, .L52+4
 1053 05b4 1B78     		ldrb	r3, [r3]
 1054 05b6 FB71     		strb	r3, [r7, #7]
 945:Generated_Source\PSoC5/RTC_INT.c ****     RTC_SET_ALARM(RTC_tmp, RTC_alarmCurStatus, RTC_statusDateTime);
 1055              		.loc 1 945 0
 1056 05b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1057 05ba 002B     		cmp	r3, #0
 1058 05bc 13D0     		beq	.L45
 1059              		.loc 1 945 0 is_stmt 0 discriminator 1
 1060 05be 104B     		ldr	r3, .L52
 1061 05c0 1B78     		ldrb	r3, [r3]
 1062 05c2 DAB2     		uxtb	r2, r3
 1063 05c4 FB79     		ldrb	r3, [r7, #7]
 1064 05c6 1340     		ands	r3, r3, r2
 1065 05c8 DBB2     		uxtb	r3, r3
 1066 05ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1067 05cc 9A42     		cmp	r2, r3
 1068 05ce 0AD1     		bne	.L45
 1069              		.loc 1 945 0 discriminator 2
 1070 05d0 0D4B     		ldr	r3, .L52+8
 1071 05d2 1B78     		ldrb	r3, [r3]
 1072 05d4 DBB2     		uxtb	r3, r3
 1073 05d6 43F00803 		orr	r3, r3, #8
 1074 05da DAB2     		uxtb	r2, r3
 1075 05dc 0A4B     		ldr	r3, .L52+8
 1076 05de 1A70     		strb	r2, [r3]
 1077 05e0 074B     		ldr	r3, .L52
 1078 05e2 0022     		movs	r2, #0
 1079 05e4 1A70     		strb	r2, [r3]
 1080              	.L45:
 946:Generated_Source\PSoC5/RTC_INT.c **** 
 947:Generated_Source\PSoC5/RTC_INT.c ****     /* Execute every second handler if needed */
 948:Generated_Source\PSoC5/RTC_INT.c ****     if(0u != RTC_IS_BIT_SET(RTC_intervalCfgMask, RTC_INTERVAL_SEC_MASK))
 1081              		.loc 1 948 0 is_stmt 1
 1082 05e6 094B     		ldr	r3, .L52+12
 1083 05e8 1B78     		ldrb	r3, [r3]
 1084 05ea DBB2     		uxtb	r3, r3
 1085 05ec 03F00103 		and	r3, r3, #1
 1086 05f0 002B     		cmp	r3, #0
 1087 05f2 01D0     		beq	.L47
 949:Generated_Source\PSoC5/RTC_INT.c ****     {
 950:Generated_Source\PSoC5/RTC_INT.c ****         RTC_EverySecondHandler();
 1088              		.loc 1 950 0
 1089 05f4 FFF7FEFF 		bl	RTC_EverySecondHandler
 1090              	.L47:
 951:Generated_Source\PSoC5/RTC_INT.c ****     }
 952:Generated_Source\PSoC5/RTC_INT.c ****     
 953:Generated_Source\PSoC5/RTC_INT.c ****     #ifdef RTC_ISR_EXIT_CALLBACK
 954:Generated_Source\PSoC5/RTC_INT.c ****         RTC_ISR_ExitCallback();
 955:Generated_Source\PSoC5/RTC_INT.c ****     #endif /* RTC_ISR_EXIT_CALLBACK */
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 37


 956:Generated_Source\PSoC5/RTC_INT.c **** }
 1091              		.loc 1 956 0
 1092 05f8 00BF     		nop
 1093 05fa 0837     		adds	r7, r7, #8
 1094              		.cfi_def_cfa_offset 8
 1095 05fc BD46     		mov	sp, r7
 1096              		.cfi_def_cfa_register 13
 1097              		@ sp needed
 1098 05fe 80BD     		pop	{r7, pc}
 1099              	.L53:
 1100              		.align	2
 1101              	.L52:
 1102 0600 00000000 		.word	RTC_alarmCurStatus
 1103 0604 00000000 		.word	RTC_alarmCfgMask
 1104 0608 00000000 		.word	RTC_statusDateTime
 1105 060c 00000000 		.word	RTC_intervalCfgMask
 1106 0610 00000000 		.word	RTC_alarmCfgTimeDate
 1107 0614 00000000 		.word	RTC_currentTimeDate
 1108              		.cfi_endproc
 1109              	.LFE71:
 1110              		.size	RTC_ISR, .-RTC_ISR
 1111              		.text
 1112              	.Letext0:
 1113              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1114              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1115              		.file 4 "Generated_Source\\PSoC5\\cytypes.h"
 1116              		.file 5 "Generated_Source\\PSoC5\\RTC.h"
 1117              		.file 6 "./data.h"
 1118              		.file 7 "./modem.h"
 1119              		.file 8 "./notoriOS.h"
 1120              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 1121              		.section	.debug_info,"",%progbits
 1122              	.Ldebug_info0:
 1123 0000 02060000 		.4byte	0x602
 1124 0004 0400     		.2byte	0x4
 1125 0006 00000000 		.4byte	.Ldebug_abbrev0
 1126 000a 04       		.byte	0x4
 1127 000b 01       		.uleb128 0x1
 1128 000c 81000000 		.4byte	.LASF93
 1129 0010 0C       		.byte	0xc
 1130 0011 E9040000 		.4byte	.LASF94
 1131 0015 72040000 		.4byte	.LASF95
 1132 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1133 001d 00000000 		.4byte	0
 1134 0021 00000000 		.4byte	.Ldebug_line0
 1135 0025 02       		.uleb128 0x2
 1136 0026 01       		.byte	0x1
 1137 0027 06       		.byte	0x6
 1138 0028 99020000 		.4byte	.LASF0
 1139 002c 02       		.uleb128 0x2
 1140 002d 01       		.byte	0x1
 1141 002e 08       		.byte	0x8
 1142 002f 4E020000 		.4byte	.LASF1
 1143 0033 02       		.uleb128 0x2
 1144 0034 02       		.byte	0x2
 1145 0035 05       		.byte	0x5
 1146 0036 66000000 		.4byte	.LASF2
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 38


 1147 003a 02       		.uleb128 0x2
 1148 003b 02       		.byte	0x2
 1149 003c 07       		.byte	0x7
 1150 003d 5F030000 		.4byte	.LASF3
 1151 0041 03       		.uleb128 0x3
 1152 0042 C7040000 		.4byte	.LASF9
 1153 0046 02       		.byte	0x2
 1154 0047 3F       		.byte	0x3f
 1155 0048 4C000000 		.4byte	0x4c
 1156 004c 02       		.uleb128 0x2
 1157 004d 04       		.byte	0x4
 1158 004e 05       		.byte	0x5
 1159 004f BF010000 		.4byte	.LASF4
 1160 0053 02       		.uleb128 0x2
 1161 0054 04       		.byte	0x4
 1162 0055 07       		.byte	0x7
 1163 0056 30040000 		.4byte	.LASF5
 1164 005a 02       		.uleb128 0x2
 1165 005b 08       		.byte	0x8
 1166 005c 05       		.byte	0x5
 1167 005d AC010000 		.4byte	.LASF6
 1168 0061 02       		.uleb128 0x2
 1169 0062 08       		.byte	0x8
 1170 0063 07       		.byte	0x7
 1171 0064 BA020000 		.4byte	.LASF7
 1172 0068 04       		.uleb128 0x4
 1173 0069 04       		.byte	0x4
 1174 006a 05       		.byte	0x5
 1175 006b 696E7400 		.ascii	"int\000"
 1176 006f 02       		.uleb128 0x2
 1177 0070 04       		.byte	0x4
 1178 0071 07       		.byte	0x7
 1179 0072 F5020000 		.4byte	.LASF8
 1180 0076 03       		.uleb128 0x3
 1181 0077 AE030000 		.4byte	.LASF10
 1182 007b 03       		.byte	0x3
 1183 007c 2C       		.byte	0x2c
 1184 007d 41000000 		.4byte	0x41
 1185 0081 05       		.uleb128 0x5
 1186 0082 68010000 		.4byte	.LASF11
 1187 0086 04       		.byte	0x4
 1188 0087 9201     		.2byte	0x192
 1189 0089 2C000000 		.4byte	0x2c
 1190 008d 05       		.uleb128 0x5
 1191 008e 47010000 		.4byte	.LASF12
 1192 0092 04       		.byte	0x4
 1193 0093 9301     		.2byte	0x193
 1194 0095 3A000000 		.4byte	0x3a
 1195 0099 05       		.uleb128 0x5
 1196 009a 73010000 		.4byte	.LASF13
 1197 009e 04       		.byte	0x4
 1198 009f 9601     		.2byte	0x196
 1199 00a1 33000000 		.4byte	0x33
 1200 00a5 05       		.uleb128 0x5
 1201 00a6 42040000 		.4byte	.LASF14
 1202 00aa 04       		.byte	0x4
 1203 00ab 9701     		.2byte	0x197
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 39


 1204 00ad 4C000000 		.4byte	0x4c
 1205 00b1 02       		.uleb128 0x2
 1206 00b2 04       		.byte	0x4
 1207 00b3 04       		.byte	0x4
 1208 00b4 9C010000 		.4byte	.LASF15
 1209 00b8 02       		.uleb128 0x2
 1210 00b9 08       		.byte	0x8
 1211 00ba 04       		.byte	0x4
 1212 00bb 48040000 		.4byte	.LASF16
 1213 00bf 02       		.uleb128 0x2
 1214 00c0 01       		.byte	0x1
 1215 00c1 08       		.byte	0x8
 1216 00c2 BA010000 		.4byte	.LASF17
 1217 00c6 06       		.uleb128 0x6
 1218 00c7 81000000 		.4byte	0x81
 1219 00cb 07       		.uleb128 0x7
 1220 00cc 0C       		.byte	0xc
 1221 00cd 05       		.byte	0x5
 1222 00ce 30       		.byte	0x30
 1223 00cf 34010000 		.4byte	0x134
 1224 00d3 08       		.uleb128 0x8
 1225 00d4 53656300 		.ascii	"Sec\000"
 1226 00d8 05       		.byte	0x5
 1227 00d9 32       		.byte	0x32
 1228 00da 81000000 		.4byte	0x81
 1229 00de 00       		.byte	0
 1230 00df 08       		.uleb128 0x8
 1231 00e0 4D696E00 		.ascii	"Min\000"
 1232 00e4 05       		.byte	0x5
 1233 00e5 33       		.byte	0x33
 1234 00e6 81000000 		.4byte	0x81
 1235 00ea 01       		.byte	0x1
 1236 00eb 09       		.uleb128 0x9
 1237 00ec 29010000 		.4byte	.LASF18
 1238 00f0 05       		.byte	0x5
 1239 00f1 34       		.byte	0x34
 1240 00f2 81000000 		.4byte	0x81
 1241 00f6 02       		.byte	0x2
 1242 00f7 09       		.uleb128 0x9
 1243 00f8 A2010000 		.4byte	.LASF19
 1244 00fc 05       		.byte	0x5
 1245 00fd 35       		.byte	0x35
 1246 00fe 81000000 		.4byte	0x81
 1247 0102 03       		.byte	0x3
 1248 0103 09       		.uleb128 0x9
 1249 0104 FE030000 		.4byte	.LASF20
 1250 0108 05       		.byte	0x5
 1251 0109 36       		.byte	0x36
 1252 010a 81000000 		.4byte	0x81
 1253 010e 04       		.byte	0x4
 1254 010f 09       		.uleb128 0x9
 1255 0110 8D050000 		.4byte	.LASF21
 1256 0114 05       		.byte	0x5
 1257 0115 37       		.byte	0x37
 1258 0116 8D000000 		.4byte	0x8d
 1259 011a 06       		.byte	0x6
 1260 011b 09       		.uleb128 0x9
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 40


 1261 011c 0B020000 		.4byte	.LASF22
 1262 0120 05       		.byte	0x5
 1263 0121 38       		.byte	0x38
 1264 0122 81000000 		.4byte	0x81
 1265 0126 08       		.byte	0x8
 1266 0127 09       		.uleb128 0x9
 1267 0128 06020000 		.4byte	.LASF23
 1268 012c 05       		.byte	0x5
 1269 012d 39       		.byte	0x39
 1270 012e 8D000000 		.4byte	0x8d
 1271 0132 0A       		.byte	0xa
 1272 0133 00       		.byte	0
 1273 0134 03       		.uleb128 0x3
 1274 0135 3F050000 		.4byte	.LASF24
 1275 0139 05       		.byte	0x5
 1276 013a 3A       		.byte	0x3a
 1277 013b 3F010000 		.4byte	0x13f
 1278 013f 06       		.uleb128 0x6
 1279 0140 CB000000 		.4byte	0xcb
 1280 0144 02       		.uleb128 0x2
 1281 0145 08       		.byte	0x8
 1282 0146 04       		.byte	0x4
 1283 0147 42020000 		.4byte	.LASF25
 1284 014b 02       		.uleb128 0x2
 1285 014c 04       		.byte	0x4
 1286 014d 07       		.byte	0x7
 1287 014e 70000000 		.4byte	.LASF26
 1288 0152 0A       		.uleb128 0xa
 1289 0153 BF000000 		.4byte	0xbf
 1290 0157 62010000 		.4byte	0x162
 1291 015b 0B       		.uleb128 0xb
 1292 015c 4B010000 		.4byte	0x14b
 1293 0160 17       		.byte	0x17
 1294 0161 00       		.byte	0
 1295 0162 07       		.uleb128 0x7
 1296 0163 2C       		.byte	0x2c
 1297 0164 06       		.byte	0x6
 1298 0165 14       		.byte	0x14
 1299 0166 8F010000 		.4byte	0x18f
 1300 016a 08       		.uleb128 0x8
 1301 016b 6B657900 		.ascii	"key\000"
 1302 016f 06       		.byte	0x6
 1303 0170 15       		.byte	0x15
 1304 0171 8F010000 		.4byte	0x18f
 1305 0175 00       		.byte	0
 1306 0176 09       		.uleb128 0x9
 1307 0177 41010000 		.4byte	.LASF27
 1308 017b 06       		.byte	0x6
 1309 017c 16       		.byte	0x16
 1310 017d 8F010000 		.4byte	0x18f
 1311 0181 14       		.byte	0x14
 1312 0182 09       		.uleb128 0x9
 1313 0183 79010000 		.4byte	.LASF28
 1314 0187 06       		.byte	0x6
 1315 0188 17       		.byte	0x17
 1316 0189 A5000000 		.4byte	0xa5
 1317 018d 28       		.byte	0x28
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 41


 1318 018e 00       		.byte	0
 1319 018f 0A       		.uleb128 0xa
 1320 0190 BF000000 		.4byte	0xbf
 1321 0194 9F010000 		.4byte	0x19f
 1322 0198 0B       		.uleb128 0xb
 1323 0199 4B010000 		.4byte	0x14b
 1324 019d 13       		.byte	0x13
 1325 019e 00       		.byte	0
 1326 019f 03       		.uleb128 0x3
 1327 01a0 02030000 		.4byte	.LASF29
 1328 01a4 06       		.byte	0x6
 1329 01a5 19       		.byte	0x19
 1330 01a6 62010000 		.4byte	0x162
 1331 01aa 07       		.uleb128 0x7
 1332 01ab 3C       		.byte	0x3c
 1333 01ac 07       		.byte	0x7
 1334 01ad 35       		.byte	0x35
 1335 01ae D7010000 		.4byte	0x1d7
 1336 01b2 09       		.uleb128 0x9
 1337 01b3 1A000000 		.4byte	.LASF30
 1338 01b7 07       		.byte	0x7
 1339 01b8 36       		.byte	0x36
 1340 01b9 8F010000 		.4byte	0x18f
 1341 01bd 00       		.byte	0
 1342 01be 09       		.uleb128 0x9
 1343 01bf 00000000 		.4byte	.LASF31
 1344 01c3 07       		.byte	0x7
 1345 01c4 37       		.byte	0x37
 1346 01c5 8F010000 		.4byte	0x18f
 1347 01c9 14       		.byte	0x14
 1348 01ca 09       		.uleb128 0x9
 1349 01cb A9030000 		.4byte	.LASF32
 1350 01cf 07       		.byte	0x7
 1351 01d0 38       		.byte	0x38
 1352 01d1 8F010000 		.4byte	0x18f
 1353 01d5 28       		.byte	0x28
 1354 01d6 00       		.byte	0
 1355 01d7 03       		.uleb128 0x3
 1356 01d8 99040000 		.4byte	.LASF33
 1357 01dc 07       		.byte	0x7
 1358 01dd 3A       		.byte	0x3a
 1359 01de AA010000 		.4byte	0x1aa
 1360 01e2 07       		.uleb128 0x7
 1361 01e3 20       		.byte	0x20
 1362 01e4 07       		.byte	0x7
 1363 01e5 3C       		.byte	0x3c
 1364 01e6 4B020000 		.4byte	0x24b
 1365 01ea 09       		.uleb128 0x9
 1366 01eb 0E030000 		.4byte	.LASF34
 1367 01ef 07       		.byte	0x7
 1368 01f0 3D       		.byte	0x3d
 1369 01f1 68000000 		.4byte	0x68
 1370 01f5 00       		.byte	0
 1371 01f6 08       		.uleb128 0x8
 1372 01f7 62657200 		.ascii	"ber\000"
 1373 01fb 07       		.byte	0x7
 1374 01fc 3E       		.byte	0x3e
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 42


 1375 01fd 68000000 		.4byte	0x68
 1376 0201 04       		.byte	0x4
 1377 0202 09       		.uleb128 0x9
 1378 0203 6E010000 		.4byte	.LASF35
 1379 0207 07       		.byte	0x7
 1380 0208 3F       		.byte	0x3f
 1381 0209 68000000 		.4byte	0x68
 1382 020d 08       		.byte	0x8
 1383 020e 09       		.uleb128 0x9
 1384 020f 3C010000 		.4byte	.LASF36
 1385 0213 07       		.byte	0x7
 1386 0214 40       		.byte	0x40
 1387 0215 68000000 		.4byte	0x68
 1388 0219 0C       		.byte	0xc
 1389 021a 09       		.uleb128 0x9
 1390 021b 09040000 		.4byte	.LASF37
 1391 021f 07       		.byte	0x7
 1392 0220 41       		.byte	0x41
 1393 0221 68000000 		.4byte	0x68
 1394 0225 10       		.byte	0x10
 1395 0226 09       		.uleb128 0x9
 1396 0227 5C020000 		.4byte	.LASF38
 1397 022b 07       		.byte	0x7
 1398 022c 42       		.byte	0x42
 1399 022d 68000000 		.4byte	0x68
 1400 0231 14       		.byte	0x14
 1401 0232 09       		.uleb128 0x9
 1402 0233 72030000 		.4byte	.LASF39
 1403 0237 07       		.byte	0x7
 1404 0238 43       		.byte	0x43
 1405 0239 68000000 		.4byte	0x68
 1406 023d 18       		.byte	0x18
 1407 023e 09       		.uleb128 0x9
 1408 023f 96030000 		.4byte	.LASF40
 1409 0243 07       		.byte	0x7
 1410 0244 44       		.byte	0x44
 1411 0245 68000000 		.4byte	0x68
 1412 0249 1C       		.byte	0x1c
 1413 024a 00       		.byte	0
 1414 024b 03       		.uleb128 0x3
 1415 024c BE030000 		.4byte	.LASF41
 1416 0250 07       		.byte	0x7
 1417 0251 46       		.byte	0x46
 1418 0252 E2010000 		.4byte	0x1e2
 1419 0256 07       		.uleb128 0x7
 1420 0257 05       		.byte	0x5
 1421 0258 07       		.byte	0x7
 1422 0259 52       		.byte	0x52
 1423 025a 9B020000 		.4byte	0x29b
 1424 025e 09       		.uleb128 0x9
 1425 025f 6B050000 		.4byte	.LASF42
 1426 0263 07       		.byte	0x7
 1427 0264 54       		.byte	0x54
 1428 0265 81000000 		.4byte	0x81
 1429 0269 00       		.byte	0
 1430 026a 09       		.uleb128 0x9
 1431 026b 4B030000 		.4byte	.LASF43
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 43


 1432 026f 07       		.byte	0x7
 1433 0270 56       		.byte	0x56
 1434 0271 9B020000 		.4byte	0x29b
 1435 0275 01       		.byte	0x1
 1436 0276 09       		.uleb128 0x9
 1437 0277 2B020000 		.4byte	.LASF44
 1438 027b 07       		.byte	0x7
 1439 027c 58       		.byte	0x58
 1440 027d 81000000 		.4byte	0x81
 1441 0281 02       		.byte	0x2
 1442 0282 09       		.uleb128 0x9
 1443 0283 14030000 		.4byte	.LASF45
 1444 0287 07       		.byte	0x7
 1445 0288 5A       		.byte	0x5a
 1446 0289 81000000 		.4byte	0x81
 1447 028d 03       		.byte	0x3
 1448 028e 09       		.uleb128 0x9
 1449 028f 8D040000 		.4byte	.LASF46
 1450 0293 07       		.byte	0x7
 1451 0294 5D       		.byte	0x5d
 1452 0295 81000000 		.4byte	0x81
 1453 0299 04       		.byte	0x4
 1454 029a 00       		.byte	0
 1455 029b 02       		.uleb128 0x2
 1456 029c 01       		.byte	0x1
 1457 029d 02       		.byte	0x2
 1458 029e CC030000 		.4byte	.LASF47
 1459 02a2 03       		.uleb128 0x3
 1460 02a3 34030000 		.4byte	.LASF48
 1461 02a7 07       		.byte	0x7
 1462 02a8 5F       		.byte	0x5f
 1463 02a9 56020000 		.4byte	0x256
 1464 02ad 07       		.uleb128 0x7
 1465 02ae 06       		.byte	0x6
 1466 02af 08       		.byte	0x8
 1467 02b0 2D       		.byte	0x2d
 1468 02b1 E6020000 		.4byte	0x2e6
 1469 02b5 09       		.uleb128 0x9
 1470 02b6 57000000 		.4byte	.LASF49
 1471 02ba 08       		.byte	0x8
 1472 02bb 2F       		.byte	0x2f
 1473 02bc 8D000000 		.4byte	0x8d
 1474 02c0 00       		.byte	0
 1475 02c1 09       		.uleb128 0x9
 1476 02c2 41000000 		.4byte	.LASF50
 1477 02c6 08       		.byte	0x8
 1478 02c7 30       		.byte	0x30
 1479 02c8 99000000 		.4byte	0x99
 1480 02cc 02       		.byte	0x2
 1481 02cd 09       		.uleb128 0x9
 1482 02ce A6040000 		.4byte	.LASF51
 1483 02d2 08       		.byte	0x8
 1484 02d3 31       		.byte	0x31
 1485 02d4 81000000 		.4byte	0x81
 1486 02d8 04       		.byte	0x4
 1487 02d9 09       		.uleb128 0x9
 1488 02da D1040000 		.4byte	.LASF52
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 44


 1489 02de 08       		.byte	0x8
 1490 02df 32       		.byte	0x32
 1491 02e0 81000000 		.4byte	0x81
 1492 02e4 05       		.byte	0x5
 1493 02e5 00       		.byte	0
 1494 02e6 03       		.uleb128 0x3
 1495 02e7 25020000 		.4byte	.LASF53
 1496 02eb 08       		.byte	0x8
 1497 02ec 35       		.byte	0x35
 1498 02ed F1020000 		.4byte	0x2f1
 1499 02f1 06       		.uleb128 0x6
 1500 02f2 AD020000 		.4byte	0x2ad
 1501 02f6 07       		.uleb128 0x7
 1502 02f7 1C       		.byte	0x1c
 1503 02f8 08       		.byte	0x8
 1504 02f9 38       		.byte	0x38
 1505 02fa 17030000 		.4byte	0x317
 1506 02fe 09       		.uleb128 0x9
 1507 02ff D8010000 		.4byte	.LASF54
 1508 0303 08       		.byte	0x8
 1509 0304 3A       		.byte	0x3a
 1510 0305 17030000 		.4byte	0x317
 1511 0309 00       		.byte	0
 1512 030a 09       		.uleb128 0x9
 1513 030b 2E010000 		.4byte	.LASF55
 1514 030f 08       		.byte	0x8
 1515 0310 3B       		.byte	0x3b
 1516 0311 52010000 		.4byte	0x152
 1517 0315 04       		.byte	0x4
 1518 0316 00       		.byte	0
 1519 0317 0C       		.uleb128 0xc
 1520 0318 04       		.byte	0x4
 1521 0319 D7010000 		.4byte	0x1d7
 1522 031d 03       		.uleb128 0x3
 1523 031e 54030000 		.4byte	.LASF56
 1524 0322 08       		.byte	0x8
 1525 0323 3D       		.byte	0x3d
 1526 0324 F6020000 		.4byte	0x2f6
 1527 0328 07       		.uleb128 0x7
 1528 0329 68       		.byte	0x68
 1529 032a 08       		.byte	0x8
 1530 032b 43       		.byte	0x43
 1531 032c 49030000 		.4byte	0x349
 1532 0330 09       		.uleb128 0x9
 1533 0331 79000000 		.4byte	.LASF57
 1534 0335 08       		.byte	0x8
 1535 0336 48       		.byte	0x48
 1536 0337 49030000 		.4byte	0x349
 1537 033b 00       		.byte	0
 1538 033c 09       		.uleb128 0x9
 1539 033d 4E010000 		.4byte	.LASF58
 1540 0341 08       		.byte	0x8
 1541 0342 49       		.byte	0x49
 1542 0343 68000000 		.4byte	0x68
 1543 0347 64       		.byte	0x64
 1544 0348 00       		.byte	0
 1545 0349 0A       		.uleb128 0xa
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 45


 1546 034a BF000000 		.4byte	0xbf
 1547 034e 59030000 		.4byte	0x359
 1548 0352 0B       		.uleb128 0xb
 1549 0353 4B010000 		.4byte	0x14b
 1550 0357 63       		.byte	0x63
 1551 0358 00       		.byte	0
 1552 0359 03       		.uleb128 0x3
 1553 035a 32000000 		.4byte	.LASF59
 1554 035e 08       		.byte	0x8
 1555 035f 4F       		.byte	0x4f
 1556 0360 28030000 		.4byte	0x328
 1557 0364 0D       		.uleb128 0xd
 1558 0365 4F040000 		.4byte	.LASF60
 1559 0369 01       		.byte	0x1
 1560 036a 36       		.byte	0x36
 1561 036b 00000000 		.4byte	.LFB64
 1562 036f 0E000000 		.4byte	.LFE64-.LFB64
 1563 0373 01       		.uleb128 0x1
 1564 0374 9C       		.byte	0x9c
 1565 0375 0D       		.uleb128 0xd
 1566 0376 19040000 		.4byte	.LASF61
 1567 037a 01       		.byte	0x1
 1568 037b 51       		.byte	0x51
 1569 037c 00000000 		.4byte	.LFB65
 1570 0380 0E000000 		.4byte	.LFE65-.LFB65
 1571 0384 01       		.uleb128 0x1
 1572 0385 9C       		.byte	0x9c
 1573 0386 0D       		.uleb128 0xd
 1574 0387 E9030000 		.4byte	.LASF62
 1575 038b 01       		.byte	0x1
 1576 038c 6C       		.byte	0x6c
 1577 038d 00000000 		.4byte	.LFB66
 1578 0391 0E000000 		.4byte	.LFE66-.LFB66
 1579 0395 01       		.uleb128 0x1
 1580 0396 9C       		.byte	0x9c
 1581 0397 0D       		.uleb128 0xd
 1582 0398 11020000 		.4byte	.LASF63
 1583 039c 01       		.byte	0x1
 1584 039d 87       		.byte	0x87
 1585 039e 00000000 		.4byte	.LFB67
 1586 03a2 0E000000 		.4byte	.LFE67-.LFB67
 1587 03a6 01       		.uleb128 0x1
 1588 03a7 9C       		.byte	0x9c
 1589 03a8 0D       		.uleb128 0xd
 1590 03a9 0F010000 		.4byte	.LASF64
 1591 03ad 01       		.byte	0x1
 1592 03ae A2       		.byte	0xa2
 1593 03af 00000000 		.4byte	.LFB68
 1594 03b3 0E000000 		.4byte	.LFE68-.LFB68
 1595 03b7 01       		.uleb128 0x1
 1596 03b8 9C       		.byte	0x9c
 1597 03b9 0D       		.uleb128 0xd
 1598 03ba E3010000 		.4byte	.LASF65
 1599 03be 01       		.byte	0x1
 1600 03bf BD       		.byte	0xbd
 1601 03c0 00000000 		.4byte	.LFB69
 1602 03c4 0E000000 		.4byte	.LFE69-.LFB69
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 46


 1603 03c8 01       		.uleb128 0x1
 1604 03c9 9C       		.byte	0x9c
 1605 03ca 0D       		.uleb128 0xd
 1606 03cb A5020000 		.4byte	.LASF66
 1607 03cf 01       		.byte	0x1
 1608 03d0 D8       		.byte	0xd8
 1609 03d1 00000000 		.4byte	.LFB70
 1610 03d5 0E000000 		.4byte	.LFE70-.LFB70
 1611 03d9 01       		.uleb128 0x1
 1612 03da 9C       		.byte	0x9c
 1613 03db 0E       		.uleb128 0xe
 1614 03dc 1E030000 		.4byte	.LASF96
 1615 03e0 01       		.byte	0x1
 1616 03e1 0B01     		.2byte	0x10b
 1617 03e3 00000000 		.4byte	.LFB71
 1618 03e7 18060000 		.4byte	.LFE71-.LFB71
 1619 03eb 01       		.uleb128 0x1
 1620 03ec 9C       		.byte	0x9c
 1621 03ed 01040000 		.4byte	0x401
 1622 03f1 0F       		.uleb128 0xf
 1623 03f2 B6030000 		.4byte	.LASF97
 1624 03f6 01       		.byte	0x1
 1625 03f7 0D01     		.2byte	0x10d
 1626 03f9 81000000 		.4byte	0x81
 1627 03fd 02       		.uleb128 0x2
 1628 03fe 91       		.byte	0x91
 1629 03ff 77       		.sleb128 -9
 1630 0400 00       		.byte	0
 1631 0401 10       		.uleb128 0x10
 1632 0402 78020000 		.4byte	.LASF67
 1633 0406 05       		.byte	0x5
 1634 0407 2D01     		.2byte	0x12d
 1635 0409 34010000 		.4byte	0x134
 1636 040d 10       		.uleb128 0x10
 1637 040e E1020000 		.4byte	.LASF68
 1638 0412 05       		.byte	0x5
 1639 0413 2E01     		.2byte	0x12e
 1640 0415 34010000 		.4byte	0x134
 1641 0419 10       		.uleb128 0x10
 1642 041a 09000000 		.4byte	.LASF69
 1643 041e 05       		.byte	0x5
 1644 041f 3901     		.2byte	0x139
 1645 0421 C6000000 		.4byte	0xc6
 1646 0425 10       		.uleb128 0x10
 1647 0426 0A050000 		.4byte	.LASF70
 1648 042a 05       		.byte	0x5
 1649 042b 3A01     		.2byte	0x13a
 1650 042d C6000000 		.4byte	0xc6
 1651 0431 10       		.uleb128 0x10
 1652 0432 4D050000 		.4byte	.LASF71
 1653 0436 05       		.byte	0x5
 1654 0437 3B01     		.2byte	0x13b
 1655 0439 C6000000 		.4byte	0xc6
 1656 043d 10       		.uleb128 0x10
 1657 043e B4040000 		.4byte	.LASF72
 1658 0442 05       		.byte	0x5
 1659 0443 3C01     		.2byte	0x13c
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 47


 1660 0445 C6000000 		.4byte	0xc6
 1661 0449 0A       		.uleb128 0xa
 1662 044a 59040000 		.4byte	0x459
 1663 044e 59040000 		.4byte	0x459
 1664 0452 0B       		.uleb128 0xb
 1665 0453 4B010000 		.4byte	0x14b
 1666 0457 0B       		.byte	0xb
 1667 0458 00       		.byte	0
 1668 0459 11       		.uleb128 0x11
 1669 045a 81000000 		.4byte	0x81
 1670 045e 10       		.uleb128 0x10
 1671 045f 21000000 		.4byte	.LASF73
 1672 0463 05       		.byte	0x5
 1673 0464 3E01     		.2byte	0x13e
 1674 0466 6A040000 		.4byte	0x46a
 1675 046a 11       		.uleb128 0x11
 1676 046b 49040000 		.4byte	0x449
 1677 046f 10       		.uleb128 0x10
 1678 0470 32050000 		.4byte	.LASF74
 1679 0474 09       		.byte	0x9
 1680 0475 1207     		.2byte	0x712
 1681 0477 7B040000 		.4byte	0x47b
 1682 047b 06       		.uleb128 0x6
 1683 047c 76000000 		.4byte	0x76
 1684 0480 12       		.uleb128 0x12
 1685 0481 C8010000 		.4byte	.LASF75
 1686 0485 06       		.byte	0x6
 1687 0486 11       		.byte	0x11
 1688 0487 9B020000 		.4byte	0x29b
 1689 048b 05       		.uleb128 0x5
 1690 048c 03       		.byte	0x3
 1691 048d 00000000 		.4byte	buffer_overflow
 1692 0491 12       		.uleb128 0x12
 1693 0492 56010000 		.4byte	.LASF76
 1694 0496 06       		.byte	0x6
 1695 0497 22       		.byte	0x22
 1696 0498 8D000000 		.4byte	0x8d
 1697 049c 05       		.uleb128 0x5
 1698 049d 03       		.byte	0x3
 1699 049e 00000000 		.4byte	dataPointsInStack
 1700 04a2 12       		.uleb128 0x12
 1701 04a3 83010000 		.4byte	.LASF77
 1702 04a7 06       		.byte	0x6
 1703 04a8 23       		.byte	0x23
 1704 04a9 8D000000 		.4byte	0x8d
 1705 04ad 05       		.uleb128 0x5
 1706 04ae 03       		.byte	0x3
 1707 04af 00000000 		.4byte	dataPointsInStackDesired
 1708 04b3 0A       		.uleb128 0xa
 1709 04b4 9F010000 		.4byte	0x19f
 1710 04b8 C3040000 		.4byte	0x4c3
 1711 04bc 0B       		.uleb128 0xb
 1712 04bd 4B010000 		.4byte	0x14b
 1713 04c1 95       		.byte	0x95
 1714 04c2 00       		.byte	0
 1715 04c3 12       		.uleb128 0x12
 1716 04c4 24010000 		.4byte	.LASF78
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 48


 1717 04c8 06       		.byte	0x6
 1718 04c9 24       		.byte	0x24
 1719 04ca B3040000 		.4byte	0x4b3
 1720 04ce 05       		.uleb128 0x5
 1721 04cf 03       		.byte	0x3
 1722 04d0 00000000 		.4byte	data
 1723 04d4 12       		.uleb128 0x12
 1724 04d5 8D020000 		.4byte	.LASF79
 1725 04d9 07       		.byte	0x7
 1726 04da 1F       		.byte	0x1f
 1727 04db 81000000 		.4byte	0x81
 1728 04df 05       		.uleb128 0x5
 1729 04e0 03       		.byte	0x3
 1730 04e1 00000000 		.4byte	modem_state
 1731 04e5 12       		.uleb128 0x12
 1732 04e6 61020000 		.4byte	.LASF80
 1733 04ea 07       		.byte	0x7
 1734 04eb 62       		.byte	0x62
 1735 04ec A5000000 		.4byte	0xa5
 1736 04f0 05       		.uleb128 0x5
 1737 04f1 03       		.byte	0x3
 1738 04f2 00000000 		.4byte	modem_start_time_stamp
 1739 04f6 12       		.uleb128 0x12
 1740 04f7 D8010000 		.4byte	.LASF54
 1741 04fb 07       		.byte	0x7
 1742 04fc 63       		.byte	0x63
 1743 04fd D7010000 		.4byte	0x1d7
 1744 0501 05       		.uleb128 0x5
 1745 0502 03       		.byte	0x3
 1746 0503 00000000 		.4byte	modem_info
 1747 0507 12       		.uleb128 0x12
 1748 0508 66040000 		.4byte	.LASF81
 1749 050c 07       		.byte	0x7
 1750 050d 64       		.byte	0x64
 1751 050e 4B020000 		.4byte	0x24b
 1752 0512 05       		.uleb128 0x5
 1753 0513 03       		.byte	0x3
 1754 0514 00000000 		.4byte	modem_stats
 1755 0518 12       		.uleb128 0x12
 1756 0519 1D050000 		.4byte	.LASF82
 1757 051d 07       		.byte	0x7
 1758 051e 65       		.byte	0x65
 1759 051f A2020000 		.4byte	0x2a2
 1760 0523 05       		.uleb128 0x5
 1761 0524 03       		.byte	0x3
 1762 0525 00000000 		.4byte	updatable_parameters
 1763 0529 0A       		.uleb128 0xa
 1764 052a BF000000 		.4byte	0xbf
 1765 052e 3A050000 		.4byte	0x53a
 1766 0532 13       		.uleb128 0x13
 1767 0533 4B010000 		.4byte	0x14b
 1768 0537 0F27     		.2byte	0x270f
 1769 0539 00       		.byte	0
 1770 053a 12       		.uleb128 0x12
 1771 053b 75050000 		.4byte	.LASF83
 1772 053f 08       		.byte	0x8
 1773 0540 17       		.byte	0x17
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 49


 1774 0541 29050000 		.4byte	0x529
 1775 0545 05       		.uleb128 0x5
 1776 0546 03       		.byte	0x3
 1777 0547 00000000 		.4byte	http_request
 1778 054b 12       		.uleb128 0x12
 1779 054c 61050000 		.4byte	.LASF84
 1780 0550 08       		.byte	0x8
 1781 0551 18       		.byte	0x18
 1782 0552 29050000 		.4byte	0x529
 1783 0556 05       		.uleb128 0x5
 1784 0557 03       		.byte	0x3
 1785 0558 00000000 		.4byte	http_body
 1786 055c 0A       		.uleb128 0xa
 1787 055d BF000000 		.4byte	0xbf
 1788 0561 6C050000 		.4byte	0x56c
 1789 0565 0B       		.uleb128 0xb
 1790 0566 4B010000 		.4byte	0x14b
 1791 056a C7       		.byte	0xc7
 1792 056b 00       		.byte	0
 1793 056c 12       		.uleb128 0x12
 1794 056d 0E040000 		.4byte	.LASF85
 1795 0571 08       		.byte	0x8
 1796 0572 19       		.byte	0x19
 1797 0573 5C050000 		.4byte	0x55c
 1798 0577 05       		.uleb128 0x5
 1799 0578 03       		.byte	0x3
 1800 0579 00000000 		.4byte	http_route
 1801 057d 12       		.uleb128 0x12
 1802 057e 8A030000 		.4byte	.LASF86
 1803 0582 08       		.byte	0x8
 1804 0583 40       		.byte	0x40
 1805 0584 1D030000 		.4byte	0x31d
 1806 0588 05       		.uleb128 0x5
 1807 0589 03       		.byte	0x3
 1808 058a 00000000 		.4byte	system_info
 1809 058e 12       		.uleb128 0x12
 1810 058f D1020000 		.4byte	.LASF87
 1811 0593 08       		.byte	0x8
 1812 0594 52       		.byte	0x52
 1813 0595 59030000 		.4byte	0x359
 1814 0599 05       		.uleb128 0x5
 1815 059a 03       		.byte	0x3
 1816 059b 00000000 		.4byte	system_settings
 1817 059f 12       		.uleb128 0x12
 1818 05a0 F9010000 		.4byte	.LASF88
 1819 05a4 08       		.byte	0x8
 1820 05a5 6E       		.byte	0x6e
 1821 05a6 E6020000 		.4byte	0x2e6
 1822 05aa 05       		.uleb128 0x5
 1823 05ab 03       		.byte	0x3
 1824 05ac 00000000 		.4byte	alarmMeasure
 1825 05b0 12       		.uleb128 0x12
 1826 05b1 26030000 		.4byte	.LASF89
 1827 05b5 08       		.byte	0x8
 1828 05b6 6F       		.byte	0x6f
 1829 05b7 81000000 		.4byte	0x81
 1830 05bb 05       		.uleb128 0x5
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 50


 1831 05bc 03       		.byte	0x3
 1832 05bd 00000000 		.4byte	timeToMeasure
 1833 05c1 12       		.uleb128 0x12
 1834 05c2 38020000 		.4byte	.LASF90
 1835 05c6 08       		.byte	0x8
 1836 05c7 70       		.byte	0x70
 1837 05c8 E6020000 		.4byte	0x2e6
 1838 05cc 05       		.uleb128 0x5
 1839 05cd 03       		.byte	0x3
 1840 05ce 00000000 		.4byte	alarmSync
 1841 05d2 12       		.uleb128 0x12
 1842 05d3 82050000 		.4byte	.LASF91
 1843 05d7 08       		.byte	0x8
 1844 05d8 71       		.byte	0x71
 1845 05d9 81000000 		.4byte	0x81
 1846 05dd 05       		.uleb128 0x5
 1847 05de 03       		.byte	0x3
 1848 05df 00000000 		.4byte	timeToSync
 1849 05e3 12       		.uleb128 0x12
 1850 05e4 D2030000 		.4byte	.LASF92
 1851 05e8 08       		.byte	0x8
 1852 05e9 72       		.byte	0x72
 1853 05ea 81000000 		.4byte	0x81
 1854 05ee 05       		.uleb128 0x5
 1855 05ef 03       		.byte	0x3
 1856 05f0 00000000 		.4byte	timeToSycnRemoteParams
 1857 05f4 14       		.uleb128 0x14
 1858 05f5 68657900 		.ascii	"hey\000"
 1859 05f9 08       		.byte	0x8
 1860 05fa 73       		.byte	0x73
 1861 05fb 81000000 		.4byte	0x81
 1862 05ff 05       		.uleb128 0x5
 1863 0600 03       		.byte	0x3
 1864 0601 00000000 		.4byte	hey
 1865 0605 00       		.byte	0
 1866              		.section	.debug_abbrev,"",%progbits
 1867              	.Ldebug_abbrev0:
 1868 0000 01       		.uleb128 0x1
 1869 0001 11       		.uleb128 0x11
 1870 0002 01       		.byte	0x1
 1871 0003 25       		.uleb128 0x25
 1872 0004 0E       		.uleb128 0xe
 1873 0005 13       		.uleb128 0x13
 1874 0006 0B       		.uleb128 0xb
 1875 0007 03       		.uleb128 0x3
 1876 0008 0E       		.uleb128 0xe
 1877 0009 1B       		.uleb128 0x1b
 1878 000a 0E       		.uleb128 0xe
 1879 000b 55       		.uleb128 0x55
 1880 000c 17       		.uleb128 0x17
 1881 000d 11       		.uleb128 0x11
 1882 000e 01       		.uleb128 0x1
 1883 000f 10       		.uleb128 0x10
 1884 0010 17       		.uleb128 0x17
 1885 0011 00       		.byte	0
 1886 0012 00       		.byte	0
 1887 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 51


 1888 0014 24       		.uleb128 0x24
 1889 0015 00       		.byte	0
 1890 0016 0B       		.uleb128 0xb
 1891 0017 0B       		.uleb128 0xb
 1892 0018 3E       		.uleb128 0x3e
 1893 0019 0B       		.uleb128 0xb
 1894 001a 03       		.uleb128 0x3
 1895 001b 0E       		.uleb128 0xe
 1896 001c 00       		.byte	0
 1897 001d 00       		.byte	0
 1898 001e 03       		.uleb128 0x3
 1899 001f 16       		.uleb128 0x16
 1900 0020 00       		.byte	0
 1901 0021 03       		.uleb128 0x3
 1902 0022 0E       		.uleb128 0xe
 1903 0023 3A       		.uleb128 0x3a
 1904 0024 0B       		.uleb128 0xb
 1905 0025 3B       		.uleb128 0x3b
 1906 0026 0B       		.uleb128 0xb
 1907 0027 49       		.uleb128 0x49
 1908 0028 13       		.uleb128 0x13
 1909 0029 00       		.byte	0
 1910 002a 00       		.byte	0
 1911 002b 04       		.uleb128 0x4
 1912 002c 24       		.uleb128 0x24
 1913 002d 00       		.byte	0
 1914 002e 0B       		.uleb128 0xb
 1915 002f 0B       		.uleb128 0xb
 1916 0030 3E       		.uleb128 0x3e
 1917 0031 0B       		.uleb128 0xb
 1918 0032 03       		.uleb128 0x3
 1919 0033 08       		.uleb128 0x8
 1920 0034 00       		.byte	0
 1921 0035 00       		.byte	0
 1922 0036 05       		.uleb128 0x5
 1923 0037 16       		.uleb128 0x16
 1924 0038 00       		.byte	0
 1925 0039 03       		.uleb128 0x3
 1926 003a 0E       		.uleb128 0xe
 1927 003b 3A       		.uleb128 0x3a
 1928 003c 0B       		.uleb128 0xb
 1929 003d 3B       		.uleb128 0x3b
 1930 003e 05       		.uleb128 0x5
 1931 003f 49       		.uleb128 0x49
 1932 0040 13       		.uleb128 0x13
 1933 0041 00       		.byte	0
 1934 0042 00       		.byte	0
 1935 0043 06       		.uleb128 0x6
 1936 0044 35       		.uleb128 0x35
 1937 0045 00       		.byte	0
 1938 0046 49       		.uleb128 0x49
 1939 0047 13       		.uleb128 0x13
 1940 0048 00       		.byte	0
 1941 0049 00       		.byte	0
 1942 004a 07       		.uleb128 0x7
 1943 004b 13       		.uleb128 0x13
 1944 004c 01       		.byte	0x1
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 52


 1945 004d 0B       		.uleb128 0xb
 1946 004e 0B       		.uleb128 0xb
 1947 004f 3A       		.uleb128 0x3a
 1948 0050 0B       		.uleb128 0xb
 1949 0051 3B       		.uleb128 0x3b
 1950 0052 0B       		.uleb128 0xb
 1951 0053 01       		.uleb128 0x1
 1952 0054 13       		.uleb128 0x13
 1953 0055 00       		.byte	0
 1954 0056 00       		.byte	0
 1955 0057 08       		.uleb128 0x8
 1956 0058 0D       		.uleb128 0xd
 1957 0059 00       		.byte	0
 1958 005a 03       		.uleb128 0x3
 1959 005b 08       		.uleb128 0x8
 1960 005c 3A       		.uleb128 0x3a
 1961 005d 0B       		.uleb128 0xb
 1962 005e 3B       		.uleb128 0x3b
 1963 005f 0B       		.uleb128 0xb
 1964 0060 49       		.uleb128 0x49
 1965 0061 13       		.uleb128 0x13
 1966 0062 38       		.uleb128 0x38
 1967 0063 0B       		.uleb128 0xb
 1968 0064 00       		.byte	0
 1969 0065 00       		.byte	0
 1970 0066 09       		.uleb128 0x9
 1971 0067 0D       		.uleb128 0xd
 1972 0068 00       		.byte	0
 1973 0069 03       		.uleb128 0x3
 1974 006a 0E       		.uleb128 0xe
 1975 006b 3A       		.uleb128 0x3a
 1976 006c 0B       		.uleb128 0xb
 1977 006d 3B       		.uleb128 0x3b
 1978 006e 0B       		.uleb128 0xb
 1979 006f 49       		.uleb128 0x49
 1980 0070 13       		.uleb128 0x13
 1981 0071 38       		.uleb128 0x38
 1982 0072 0B       		.uleb128 0xb
 1983 0073 00       		.byte	0
 1984 0074 00       		.byte	0
 1985 0075 0A       		.uleb128 0xa
 1986 0076 01       		.uleb128 0x1
 1987 0077 01       		.byte	0x1
 1988 0078 49       		.uleb128 0x49
 1989 0079 13       		.uleb128 0x13
 1990 007a 01       		.uleb128 0x1
 1991 007b 13       		.uleb128 0x13
 1992 007c 00       		.byte	0
 1993 007d 00       		.byte	0
 1994 007e 0B       		.uleb128 0xb
 1995 007f 21       		.uleb128 0x21
 1996 0080 00       		.byte	0
 1997 0081 49       		.uleb128 0x49
 1998 0082 13       		.uleb128 0x13
 1999 0083 2F       		.uleb128 0x2f
 2000 0084 0B       		.uleb128 0xb
 2001 0085 00       		.byte	0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 53


 2002 0086 00       		.byte	0
 2003 0087 0C       		.uleb128 0xc
 2004 0088 0F       		.uleb128 0xf
 2005 0089 00       		.byte	0
 2006 008a 0B       		.uleb128 0xb
 2007 008b 0B       		.uleb128 0xb
 2008 008c 49       		.uleb128 0x49
 2009 008d 13       		.uleb128 0x13
 2010 008e 00       		.byte	0
 2011 008f 00       		.byte	0
 2012 0090 0D       		.uleb128 0xd
 2013 0091 2E       		.uleb128 0x2e
 2014 0092 00       		.byte	0
 2015 0093 03       		.uleb128 0x3
 2016 0094 0E       		.uleb128 0xe
 2017 0095 3A       		.uleb128 0x3a
 2018 0096 0B       		.uleb128 0xb
 2019 0097 3B       		.uleb128 0x3b
 2020 0098 0B       		.uleb128 0xb
 2021 0099 27       		.uleb128 0x27
 2022 009a 19       		.uleb128 0x19
 2023 009b 11       		.uleb128 0x11
 2024 009c 01       		.uleb128 0x1
 2025 009d 12       		.uleb128 0x12
 2026 009e 06       		.uleb128 0x6
 2027 009f 40       		.uleb128 0x40
 2028 00a0 18       		.uleb128 0x18
 2029 00a1 9642     		.uleb128 0x2116
 2030 00a3 19       		.uleb128 0x19
 2031 00a4 00       		.byte	0
 2032 00a5 00       		.byte	0
 2033 00a6 0E       		.uleb128 0xe
 2034 00a7 2E       		.uleb128 0x2e
 2035 00a8 01       		.byte	0x1
 2036 00a9 3F       		.uleb128 0x3f
 2037 00aa 19       		.uleb128 0x19
 2038 00ab 03       		.uleb128 0x3
 2039 00ac 0E       		.uleb128 0xe
 2040 00ad 3A       		.uleb128 0x3a
 2041 00ae 0B       		.uleb128 0xb
 2042 00af 3B       		.uleb128 0x3b
 2043 00b0 05       		.uleb128 0x5
 2044 00b1 27       		.uleb128 0x27
 2045 00b2 19       		.uleb128 0x19
 2046 00b3 11       		.uleb128 0x11
 2047 00b4 01       		.uleb128 0x1
 2048 00b5 12       		.uleb128 0x12
 2049 00b6 06       		.uleb128 0x6
 2050 00b7 40       		.uleb128 0x40
 2051 00b8 18       		.uleb128 0x18
 2052 00b9 9642     		.uleb128 0x2116
 2053 00bb 19       		.uleb128 0x19
 2054 00bc 01       		.uleb128 0x1
 2055 00bd 13       		.uleb128 0x13
 2056 00be 00       		.byte	0
 2057 00bf 00       		.byte	0
 2058 00c0 0F       		.uleb128 0xf
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 54


 2059 00c1 34       		.uleb128 0x34
 2060 00c2 00       		.byte	0
 2061 00c3 03       		.uleb128 0x3
 2062 00c4 0E       		.uleb128 0xe
 2063 00c5 3A       		.uleb128 0x3a
 2064 00c6 0B       		.uleb128 0xb
 2065 00c7 3B       		.uleb128 0x3b
 2066 00c8 05       		.uleb128 0x5
 2067 00c9 49       		.uleb128 0x49
 2068 00ca 13       		.uleb128 0x13
 2069 00cb 02       		.uleb128 0x2
 2070 00cc 18       		.uleb128 0x18
 2071 00cd 00       		.byte	0
 2072 00ce 00       		.byte	0
 2073 00cf 10       		.uleb128 0x10
 2074 00d0 34       		.uleb128 0x34
 2075 00d1 00       		.byte	0
 2076 00d2 03       		.uleb128 0x3
 2077 00d3 0E       		.uleb128 0xe
 2078 00d4 3A       		.uleb128 0x3a
 2079 00d5 0B       		.uleb128 0xb
 2080 00d6 3B       		.uleb128 0x3b
 2081 00d7 05       		.uleb128 0x5
 2082 00d8 49       		.uleb128 0x49
 2083 00d9 13       		.uleb128 0x13
 2084 00da 3F       		.uleb128 0x3f
 2085 00db 19       		.uleb128 0x19
 2086 00dc 3C       		.uleb128 0x3c
 2087 00dd 19       		.uleb128 0x19
 2088 00de 00       		.byte	0
 2089 00df 00       		.byte	0
 2090 00e0 11       		.uleb128 0x11
 2091 00e1 26       		.uleb128 0x26
 2092 00e2 00       		.byte	0
 2093 00e3 49       		.uleb128 0x49
 2094 00e4 13       		.uleb128 0x13
 2095 00e5 00       		.byte	0
 2096 00e6 00       		.byte	0
 2097 00e7 12       		.uleb128 0x12
 2098 00e8 34       		.uleb128 0x34
 2099 00e9 00       		.byte	0
 2100 00ea 03       		.uleb128 0x3
 2101 00eb 0E       		.uleb128 0xe
 2102 00ec 3A       		.uleb128 0x3a
 2103 00ed 0B       		.uleb128 0xb
 2104 00ee 3B       		.uleb128 0x3b
 2105 00ef 0B       		.uleb128 0xb
 2106 00f0 49       		.uleb128 0x49
 2107 00f1 13       		.uleb128 0x13
 2108 00f2 3F       		.uleb128 0x3f
 2109 00f3 19       		.uleb128 0x19
 2110 00f4 02       		.uleb128 0x2
 2111 00f5 18       		.uleb128 0x18
 2112 00f6 00       		.byte	0
 2113 00f7 00       		.byte	0
 2114 00f8 13       		.uleb128 0x13
 2115 00f9 21       		.uleb128 0x21
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 55


 2116 00fa 00       		.byte	0
 2117 00fb 49       		.uleb128 0x49
 2118 00fc 13       		.uleb128 0x13
 2119 00fd 2F       		.uleb128 0x2f
 2120 00fe 05       		.uleb128 0x5
 2121 00ff 00       		.byte	0
 2122 0100 00       		.byte	0
 2123 0101 14       		.uleb128 0x14
 2124 0102 34       		.uleb128 0x34
 2125 0103 00       		.byte	0
 2126 0104 03       		.uleb128 0x3
 2127 0105 08       		.uleb128 0x8
 2128 0106 3A       		.uleb128 0x3a
 2129 0107 0B       		.uleb128 0xb
 2130 0108 3B       		.uleb128 0x3b
 2131 0109 0B       		.uleb128 0xb
 2132 010a 49       		.uleb128 0x49
 2133 010b 13       		.uleb128 0x13
 2134 010c 3F       		.uleb128 0x3f
 2135 010d 19       		.uleb128 0x19
 2136 010e 02       		.uleb128 0x2
 2137 010f 18       		.uleb128 0x18
 2138 0110 00       		.byte	0
 2139 0111 00       		.byte	0
 2140 0112 00       		.byte	0
 2141              		.section	.debug_aranges,"",%progbits
 2142 0000 54000000 		.4byte	0x54
 2143 0004 0200     		.2byte	0x2
 2144 0006 00000000 		.4byte	.Ldebug_info0
 2145 000a 04       		.byte	0x4
 2146 000b 00       		.byte	0
 2147 000c 0000     		.2byte	0
 2148 000e 0000     		.2byte	0
 2149 0010 00000000 		.4byte	.LFB64
 2150 0014 0E000000 		.4byte	.LFE64-.LFB64
 2151 0018 00000000 		.4byte	.LFB65
 2152 001c 0E000000 		.4byte	.LFE65-.LFB65
 2153 0020 00000000 		.4byte	.LFB66
 2154 0024 0E000000 		.4byte	.LFE66-.LFB66
 2155 0028 00000000 		.4byte	.LFB67
 2156 002c 0E000000 		.4byte	.LFE67-.LFB67
 2157 0030 00000000 		.4byte	.LFB68
 2158 0034 0E000000 		.4byte	.LFE68-.LFB68
 2159 0038 00000000 		.4byte	.LFB69
 2160 003c 0E000000 		.4byte	.LFE69-.LFB69
 2161 0040 00000000 		.4byte	.LFB70
 2162 0044 0E000000 		.4byte	.LFE70-.LFB70
 2163 0048 00000000 		.4byte	.LFB71
 2164 004c 18060000 		.4byte	.LFE71-.LFB71
 2165 0050 00000000 		.4byte	0
 2166 0054 00000000 		.4byte	0
 2167              		.section	.debug_ranges,"",%progbits
 2168              	.Ldebug_ranges0:
 2169 0000 00000000 		.4byte	.LFB64
 2170 0004 0E000000 		.4byte	.LFE64
 2171 0008 00000000 		.4byte	.LFB65
 2172 000c 0E000000 		.4byte	.LFE65
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 56


 2173 0010 00000000 		.4byte	.LFB66
 2174 0014 0E000000 		.4byte	.LFE66
 2175 0018 00000000 		.4byte	.LFB67
 2176 001c 0E000000 		.4byte	.LFE67
 2177 0020 00000000 		.4byte	.LFB68
 2178 0024 0E000000 		.4byte	.LFE68
 2179 0028 00000000 		.4byte	.LFB69
 2180 002c 0E000000 		.4byte	.LFE69
 2181 0030 00000000 		.4byte	.LFB70
 2182 0034 0E000000 		.4byte	.LFE70
 2183 0038 00000000 		.4byte	.LFB71
 2184 003c 18060000 		.4byte	.LFE71
 2185 0040 00000000 		.4byte	0
 2186 0044 00000000 		.4byte	0
 2187              		.section	.debug_line,"",%progbits
 2188              	.Ldebug_line0:
 2189 0000 E2020000 		.section	.debug_str,"MS",%progbits,1
 2189      02008101 
 2189      00000201 
 2189      FB0E0D00 
 2189      01010101 
 2190              	.LASF31:
 2191 0000 6D6F6465 		.ascii	"model_id\000"
 2191      6C5F6964 
 2191      00
 2192              	.LASF69:
 2193 0009 5254435F 		.ascii	"RTC_alarmCfgMask\000"
 2193      616C6172 
 2193      6D436667 
 2193      4D61736B 
 2193      00
 2194              	.LASF30:
 2195 001a 73696D5F 		.ascii	"sim_id\000"
 2195      696400
 2196              	.LASF73:
 2197 0021 5254435F 		.ascii	"RTC_daysInMonths\000"
 2197      64617973 
 2197      496E4D6F 
 2197      6E746873 
 2197      00
 2198              	.LASF59:
 2199 0032 7379735F 		.ascii	"sys_settings_t\000"
 2199      73657474 
 2199      696E6773 
 2199      5F7400
 2200              	.LASF50:
 2201 0041 63757272 		.ascii	"currentCountDownValue\000"
 2201      656E7443 
 2201      6F756E74 
 2201      446F776E 
 2201      56616C75 
 2202              	.LASF49:
 2203 0057 636F756E 		.ascii	"countDownValue\000"
 2203      74446F77 
 2203      6E56616C 
 2203      756500
 2204              	.LASF2:
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 57


 2205 0066 73686F72 		.ascii	"short int\000"
 2205      7420696E 
 2205      7400
 2206              	.LASF26:
 2207 0070 73697A65 		.ascii	"sizetype\000"
 2207      74797065 
 2207      00
 2208              	.LASF57:
 2209 0079 65705F68 		.ascii	"ep_host\000"
 2209      6F737400 
 2210              	.LASF93:
 2211 0081 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2211      43313120 
 2211      352E342E 
 2211      31203230 
 2211      31363036 
 2212 00b4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2212      20726576 
 2212      6973696F 
 2212      6E203233 
 2212      37373135 
 2213 00e7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2213      66756E63 
 2213      74696F6E 
 2213      2D736563 
 2213      74696F6E 
 2214              	.LASF64:
 2215 010f 5254435F 		.ascii	"RTC_EveryWeekHandler\000"
 2215      45766572 
 2215      79576565 
 2215      6B48616E 
 2215      646C6572 
 2216              	.LASF78:
 2217 0124 64617461 		.ascii	"data\000"
 2217      00
 2218              	.LASF18:
 2219 0129 486F7572 		.ascii	"Hour\000"
 2219      00
 2220              	.LASF55:
 2221 012e 63686970 		.ascii	"chip_uniqueId\000"
 2221      5F756E69 
 2221      71756549 
 2221      6400
 2222              	.LASF36:
 2223 013c 65636E6F 		.ascii	"ecno\000"
 2223      00
 2224              	.LASF27:
 2225 0141 76616C75 		.ascii	"value\000"
 2225      6500
 2226              	.LASF12:
 2227 0147 75696E74 		.ascii	"uint16\000"
 2227      313600
 2228              	.LASF58:
 2229 014e 65705F70 		.ascii	"ep_port\000"
 2229      6F727400 
 2230              	.LASF76:
 2231 0156 64617461 		.ascii	"dataPointsInStack\000"
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 58


 2231      506F696E 
 2231      7473496E 
 2231      53746163 
 2231      6B00
 2232              	.LASF11:
 2233 0168 75696E74 		.ascii	"uint8\000"
 2233      3800
 2234              	.LASF35:
 2235 016e 72736370 		.ascii	"rscp\000"
 2235      00
 2236              	.LASF13:
 2237 0173 696E7431 		.ascii	"int16\000"
 2237      3600
 2238              	.LASF28:
 2239 0179 74696D65 		.ascii	"timeStamp\000"
 2239      5374616D 
 2239      7000
 2240              	.LASF77:
 2241 0183 64617461 		.ascii	"dataPointsInStackDesired\000"
 2241      506F696E 
 2241      7473496E 
 2241      53746163 
 2241      6B446573 
 2242              	.LASF15:
 2243 019c 666C6F61 		.ascii	"float\000"
 2243      7400
 2244              	.LASF19:
 2245 01a2 4461794F 		.ascii	"DayOfWeek\000"
 2245      66576565 
 2245      6B00
 2246              	.LASF6:
 2247 01ac 6C6F6E67 		.ascii	"long long int\000"
 2247      206C6F6E 
 2247      6720696E 
 2247      7400
 2248              	.LASF17:
 2249 01ba 63686172 		.ascii	"char\000"
 2249      00
 2250              	.LASF4:
 2251 01bf 6C6F6E67 		.ascii	"long int\000"
 2251      20696E74 
 2251      00
 2252              	.LASF75:
 2253 01c8 62756666 		.ascii	"buffer_overflow\000"
 2253      65725F6F 
 2253      76657266 
 2253      6C6F7700 
 2254              	.LASF54:
 2255 01d8 6D6F6465 		.ascii	"modem_info\000"
 2255      6D5F696E 
 2255      666F00
 2256              	.LASF65:
 2257 01e3 5254435F 		.ascii	"RTC_EveryMonthHandler\000"
 2257      45766572 
 2257      794D6F6E 
 2257      74684861 
 2257      6E646C65 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 59


 2258              	.LASF88:
 2259 01f9 616C6172 		.ascii	"alarmMeasure\000"
 2259      6D4D6561 
 2259      73757265 
 2259      00
 2260              	.LASF23:
 2261 0206 59656172 		.ascii	"Year\000"
 2261      00
 2262              	.LASF22:
 2263 020b 4D6F6E74 		.ascii	"Month\000"
 2263      6800
 2264              	.LASF63:
 2265 0211 5254435F 		.ascii	"RTC_EveryDayHandler\000"
 2265      45766572 
 2265      79446179 
 2265      48616E64 
 2265      6C657200 
 2266              	.LASF53:
 2267 0225 616C6172 		.ascii	"alarm\000"
 2267      6D00
 2268              	.LASF44:
 2269 022b 6D656173 		.ascii	"measure_time\000"
 2269      7572655F 
 2269      74696D65 
 2269      00
 2270              	.LASF90:
 2271 0238 616C6172 		.ascii	"alarmSync\000"
 2271      6D53796E 
 2271      6300
 2272              	.LASF25:
 2273 0242 6C6F6E67 		.ascii	"long double\000"
 2273      20646F75 
 2273      626C6500 
 2274              	.LASF1:
 2275 024e 756E7369 		.ascii	"unsigned char\000"
 2275      676E6564 
 2275      20636861 
 2275      7200
 2276              	.LASF38:
 2277 025c 72737270 		.ascii	"rsrp\000"
 2277      00
 2278              	.LASF80:
 2279 0261 6D6F6465 		.ascii	"modem_start_time_stamp\000"
 2279      6D5F7374 
 2279      6172745F 
 2279      74696D65 
 2279      5F737461 
 2280              	.LASF67:
 2281 0278 5254435F 		.ascii	"RTC_alarmCfgTimeDate\000"
 2281      616C6172 
 2281      6D436667 
 2281      54696D65 
 2281      44617465 
 2282              	.LASF79:
 2283 028d 6D6F6465 		.ascii	"modem_state\000"
 2283      6D5F7374 
 2283      61746500 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 60


 2284              	.LASF0:
 2285 0299 7369676E 		.ascii	"signed char\000"
 2285      65642063 
 2285      68617200 
 2286              	.LASF66:
 2287 02a5 5254435F 		.ascii	"RTC_EveryYearHandler\000"
 2287      45766572 
 2287      79596561 
 2287      7248616E 
 2287      646C6572 
 2288              	.LASF7:
 2289 02ba 6C6F6E67 		.ascii	"long long unsigned int\000"
 2289      206C6F6E 
 2289      6720756E 
 2289      7369676E 
 2289      65642069 
 2290              	.LASF87:
 2291 02d1 73797374 		.ascii	"system_settings\000"
 2291      656D5F73 
 2291      65747469 
 2291      6E677300 
 2292              	.LASF68:
 2293 02e1 5254435F 		.ascii	"RTC_currentTimeDate\000"
 2293      63757272 
 2293      656E7454 
 2293      696D6544 
 2293      61746500 
 2294              	.LASF8:
 2295 02f5 756E7369 		.ascii	"unsigned int\000"
 2295      676E6564 
 2295      20696E74 
 2295      00
 2296              	.LASF29:
 2297 0302 6B65795F 		.ascii	"key_value_t\000"
 2297      76616C75 
 2297      655F7400 
 2298              	.LASF34:
 2299 030e 72786C65 		.ascii	"rxlev\000"
 2299      7600
 2300              	.LASF45:
 2301 0314 73796E63 		.ascii	"sync_time\000"
 2301      5F74696D 
 2301      6500
 2302              	.LASF96:
 2303 031e 5254435F 		.ascii	"RTC_ISR\000"
 2303      49535200 
 2304              	.LASF89:
 2305 0326 74696D65 		.ascii	"timeToMeasure\000"
 2305      546F4D65 
 2305      61737572 
 2305      6500
 2306              	.LASF48:
 2307 0334 75706461 		.ascii	"updatable_parameters_t\000"
 2307      7461626C 
 2307      655F7061 
 2307      72616D65 
 2307      74657273 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 61


 2308              	.LASF43:
 2309 034b 73696D5F 		.ascii	"sim_type\000"
 2309      74797065 
 2309      00
 2310              	.LASF56:
 2311 0354 7379735F 		.ascii	"sys_info_t\000"
 2311      696E666F 
 2311      5F7400
 2312              	.LASF3:
 2313 035f 73686F72 		.ascii	"short unsigned int\000"
 2313      7420756E 
 2313      7369676E 
 2313      65642069 
 2313      6E7400
 2314              	.LASF39:
 2315 0372 74696D65 		.ascii	"time_to_network_connect\000"
 2315      5F746F5F 
 2315      6E657477 
 2315      6F726B5F 
 2315      636F6E6E 
 2316              	.LASF86:
 2317 038a 73797374 		.ascii	"system_info\000"
 2317      656D5F69 
 2317      6E666F00 
 2318              	.LASF40:
 2319 0396 74696D65 		.ascii	"time_to_acquire_ip\000"
 2319      5F746F5F 
 2319      61637175 
 2319      6972655F 
 2319      697000
 2320              	.LASF32:
 2321 03a9 696D6569 		.ascii	"imei\000"
 2321      00
 2322              	.LASF10:
 2323 03ae 696E7433 		.ascii	"int32_t\000"
 2323      325F7400 
 2324              	.LASF97:
 2325 03b6 5254435F 		.ascii	"RTC_tmp\000"
 2325      746D7000 
 2326              	.LASF41:
 2327 03be 6D6F6465 		.ascii	"modem_stats_t\000"
 2327      6D5F7374 
 2327      6174735F 
 2327      7400
 2328              	.LASF47:
 2329 03cc 5F426F6F 		.ascii	"_Bool\000"
 2329      6C00
 2330              	.LASF92:
 2331 03d2 74696D65 		.ascii	"timeToSycnRemoteParams\000"
 2331      546F5379 
 2331      636E5265 
 2331      6D6F7465 
 2331      50617261 
 2332              	.LASF62:
 2333 03e9 5254435F 		.ascii	"RTC_EveryHourHandler\000"
 2333      45766572 
 2333      79486F75 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 62


 2333      7248616E 
 2333      646C6572 
 2334              	.LASF20:
 2335 03fe 4461794F 		.ascii	"DayOfMonth\000"
 2335      664D6F6E 
 2335      746800
 2336              	.LASF37:
 2337 0409 72737271 		.ascii	"rsrq\000"
 2337      00
 2338              	.LASF85:
 2339 040e 68747470 		.ascii	"http_route\000"
 2339      5F726F75 
 2339      746500
 2340              	.LASF61:
 2341 0419 5254435F 		.ascii	"RTC_EveryMinuteHandler\000"
 2341      45766572 
 2341      794D696E 
 2341      75746548 
 2341      616E646C 
 2342              	.LASF5:
 2343 0430 6C6F6E67 		.ascii	"long unsigned int\000"
 2343      20756E73 
 2343      69676E65 
 2343      6420696E 
 2343      7400
 2344              	.LASF14:
 2345 0442 696E7433 		.ascii	"int32\000"
 2345      3200
 2346              	.LASF16:
 2347 0448 646F7562 		.ascii	"double\000"
 2347      6C6500
 2348              	.LASF60:
 2349 044f 5254435F 		.ascii	"RTC_EverySecondHandler\000"
 2349      45766572 
 2349      79536563 
 2349      6F6E6448 
 2349      616E646C 
 2350              	.LASF81:
 2351 0466 6D6F6465 		.ascii	"modem_stats\000"
 2351      6D5F7374 
 2351      61747300 
 2352              	.LASF95:
 2353 0472 433A5C6E 		.ascii	"C:\\notoriOS\\notoriOS.cydsn\000"
 2353      6F746F72 
 2353      694F535C 
 2353      6E6F746F 
 2353      72694F53 
 2354              	.LASF46:
 2355 048d 64656275 		.ascii	"debug_level\000"
 2355      675F6C65 
 2355      76656C00 
 2356              	.LASF33:
 2357 0499 6D6F6465 		.ascii	"modem_info_t\000"
 2357      6D5F696E 
 2357      666F5F74 
 2357      00
 2358              	.LASF51:
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 63


 2359 04a6 636F756E 		.ascii	"countDownType\000"
 2359      74446F77 
 2359      6E547970 
 2359      6500
 2360              	.LASF72:
 2361 04b4 5254435F 		.ascii	"RTC_statusDateTime\000"
 2361      73746174 
 2361      75734461 
 2361      74655469 
 2361      6D6500
 2362              	.LASF9:
 2363 04c7 5F5F696E 		.ascii	"__int32_t\000"
 2363      7433325F 
 2363      7400
 2364              	.LASF52:
 2365 04d1 636F756E 		.ascii	"countDownResetCondition\000"
 2365      74446F77 
 2365      6E526573 
 2365      6574436F 
 2365      6E646974 
 2366              	.LASF94:
 2367 04e9 47656E65 		.ascii	"Generated_Source\\PSoC5\\RTC_INT.c\000"
 2367      72617465 
 2367      645F536F 
 2367      75726365 
 2367      5C50536F 
 2368              	.LASF70:
 2369 050a 5254435F 		.ascii	"RTC_alarmCurStatus\000"
 2369      616C6172 
 2369      6D437572 
 2369      53746174 
 2369      757300
 2370              	.LASF82:
 2371 051d 75706461 		.ascii	"updatable_parameters\000"
 2371      7461626C 
 2371      655F7061 
 2371      72616D65 
 2371      74657273 
 2372              	.LASF74:
 2373 0532 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2373      52784275 
 2373      66666572 
 2373      00
 2374              	.LASF24:
 2375 053f 5254435F 		.ascii	"RTC_TIME_DATE\000"
 2375      54494D45 
 2375      5F444154 
 2375      4500
 2376              	.LASF71:
 2377 054d 5254435F 		.ascii	"RTC_intervalCfgMask\000"
 2377      696E7465 
 2377      7276616C 
 2377      4366674D 
 2377      61736B00 
 2378              	.LASF84:
 2379 0561 68747470 		.ascii	"http_body\000"
 2379      5F626F64 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccgcw07s.s 			page 64


 2379      7900
 2380              	.LASF42:
 2381 056b 6E6F6465 		.ascii	"node_type\000"
 2381      5F747970 
 2381      6500
 2382              	.LASF83:
 2383 0575 68747470 		.ascii	"http_request\000"
 2383      5F726571 
 2383      75657374 
 2383      00
 2384              	.LASF91:
 2385 0582 74696D65 		.ascii	"timeToSync\000"
 2385      546F5379 
 2385      6E6300
 2386              	.LASF21:
 2387 058d 4461794F 		.ascii	"DayOfYear\000"
 2387      66596561 
 2387      7200
 2388              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
