ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"SleepTimer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	SleepTimer_initVar
  20              		.bss
  21              		.type	SleepTimer_initVar, %object
  22              		.size	SleepTimer_initVar, 1
  23              	SleepTimer_initVar:
  24 0000 00       		.space	1
  25              		.section	.text.SleepTimer_Start,"ax",%progbits
  26              		.align	2
  27              		.global	SleepTimer_Start
  28              		.thumb
  29              		.thumb_func
  30              		.type	SleepTimer_Start, %function
  31              	SleepTimer_Start:
  32              	.LFB0:
  33              		.file 1 "Generated_Source\\PSoC5\\SleepTimer.c"
   1:Generated_Source\PSoC5/SleepTimer.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/SleepTimer.c **** * File Name: SleepTimer.c
   3:Generated_Source\PSoC5/SleepTimer.c **** * Version 3.20
   4:Generated_Source\PSoC5/SleepTimer.c **** *
   5:Generated_Source\PSoC5/SleepTimer.c **** * Description:
   6:Generated_Source\PSoC5/SleepTimer.c **** *  This file provides the source code to API for the Sleep Timer.
   7:Generated_Source\PSoC5/SleepTimer.c **** *
   8:Generated_Source\PSoC5/SleepTimer.c **** ********************************************************************************
   9:Generated_Source\PSoC5/SleepTimer.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  10:Generated_Source\PSoC5/SleepTimer.c **** * You may use this file only in accordance with the license, terms, conditions,
  11:Generated_Source\PSoC5/SleepTimer.c **** * disclaimers, and limitations in the end user license agreement accompanying
  12:Generated_Source\PSoC5/SleepTimer.c **** * the software package with which this file was provided.
  13:Generated_Source\PSoC5/SleepTimer.c **** *******************************************************************************/
  14:Generated_Source\PSoC5/SleepTimer.c **** 
  15:Generated_Source\PSoC5/SleepTimer.c **** #include "SleepTimer.h"
  16:Generated_Source\PSoC5/SleepTimer.c **** #include "CyLib.h"
  17:Generated_Source\PSoC5/SleepTimer.c **** 
  18:Generated_Source\PSoC5/SleepTimer.c **** /* Variables were not initialized */
  19:Generated_Source\PSoC5/SleepTimer.c **** uint8 SleepTimer_initVar = 0u;
  20:Generated_Source\PSoC5/SleepTimer.c **** 
  21:Generated_Source\PSoC5/SleepTimer.c **** 
  22:Generated_Source\PSoC5/SleepTimer.c **** /*******************************************************************************
  23:Generated_Source\PSoC5/SleepTimer.c **** * Function Name: SleepTimer_Start
  24:Generated_Source\PSoC5/SleepTimer.c **** ********************************************************************************
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 2


  25:Generated_Source\PSoC5/SleepTimer.c **** *
  26:Generated_Source\PSoC5/SleepTimer.c **** * Summary:
  27:Generated_Source\PSoC5/SleepTimer.c **** *  This is the preferred method to begin component operation. SleepTimer_Start()
  28:Generated_Source\PSoC5/SleepTimer.c **** *  sets the initVar variable, calls the SleepTimer_Init() function, and then
  29:Generated_Source\PSoC5/SleepTimer.c **** *  calls the SleepTimer_Enable() function. It enables the 1-kHz ILO clock and
  30:Generated_Source\PSoC5/SleepTimer.c **** *  leaves it enabled after the Sleep Timer component is stopped.
  31:Generated_Source\PSoC5/SleepTimer.c **** *
  32:Generated_Source\PSoC5/SleepTimer.c **** * Parameters:
  33:Generated_Source\PSoC5/SleepTimer.c **** *  None
  34:Generated_Source\PSoC5/SleepTimer.c **** *
  35:Generated_Source\PSoC5/SleepTimer.c **** * Return:
  36:Generated_Source\PSoC5/SleepTimer.c **** *  None
  37:Generated_Source\PSoC5/SleepTimer.c **** *
  38:Generated_Source\PSoC5/SleepTimer.c **** * Global variables:
  39:Generated_Source\PSoC5/SleepTimer.c **** *  The SleepTimer_initVar variable is used to indicate initial
  40:Generated_Source\PSoC5/SleepTimer.c **** *  configuration of this component.  The variable is initialized to zero and
  41:Generated_Source\PSoC5/SleepTimer.c **** *  set to 1 the first time SleepTimer_Start() is called. This allows for
  42:Generated_Source\PSoC5/SleepTimer.c **** *  component initialization without re-initialization in all subsequent calls
  43:Generated_Source\PSoC5/SleepTimer.c **** *  to the SleepTimer_Start() routine.
  44:Generated_Source\PSoC5/SleepTimer.c **** *
  45:Generated_Source\PSoC5/SleepTimer.c **** * Reentrant:
  46:Generated_Source\PSoC5/SleepTimer.c **** *  No
  47:Generated_Source\PSoC5/SleepTimer.c **** *
  48:Generated_Source\PSoC5/SleepTimer.c **** * Side Effects:
  49:Generated_Source\PSoC5/SleepTimer.c **** *  If the initVar variable is already set, this function only calls the
  50:Generated_Source\PSoC5/SleepTimer.c **** *  SleepTimer_Enable() function.
  51:Generated_Source\PSoC5/SleepTimer.c **** *
  52:Generated_Source\PSoC5/SleepTimer.c **** *******************************************************************************/
  53:Generated_Source\PSoC5/SleepTimer.c **** void SleepTimer_Start(void) 
  54:Generated_Source\PSoC5/SleepTimer.c **** {
  34              		.loc 1 54 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  55:Generated_Source\PSoC5/SleepTimer.c ****     /* Execute once in normal flow */
  56:Generated_Source\PSoC5/SleepTimer.c ****     if (0u == SleepTimer_initVar)
  44              		.loc 1 56 0
  45 0004 064B     		ldr	r3, .L3
  46 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  47 0008 002B     		cmp	r3, #0
  48 000a 04D1     		bne	.L2
  57:Generated_Source\PSoC5/SleepTimer.c ****     {
  58:Generated_Source\PSoC5/SleepTimer.c ****         SleepTimer_Init();
  49              		.loc 1 58 0
  50 000c FFF7FEFF 		bl	SleepTimer_Init
  59:Generated_Source\PSoC5/SleepTimer.c ****         SleepTimer_initVar = 1u;
  51              		.loc 1 59 0
  52 0010 034B     		ldr	r3, .L3
  53 0012 0122     		movs	r2, #1
  54 0014 1A70     		strb	r2, [r3]
  55              	.L2:
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 3


  60:Generated_Source\PSoC5/SleepTimer.c ****     }
  61:Generated_Source\PSoC5/SleepTimer.c **** 
  62:Generated_Source\PSoC5/SleepTimer.c ****     /* Enables the component operation */
  63:Generated_Source\PSoC5/SleepTimer.c ****     SleepTimer_Enable();
  56              		.loc 1 63 0
  57 0016 FFF7FEFF 		bl	SleepTimer_Enable
  64:Generated_Source\PSoC5/SleepTimer.c **** }
  58              		.loc 1 64 0
  59 001a 00BF     		nop
  60 001c 80BD     		pop	{r7, pc}
  61              	.L4:
  62 001e 00BF     		.align	2
  63              	.L3:
  64 0020 00000000 		.word	SleepTimer_initVar
  65              		.cfi_endproc
  66              	.LFE0:
  67              		.size	SleepTimer_Start, .-SleepTimer_Start
  68              		.section	.text.SleepTimer_Init,"ax",%progbits
  69              		.align	2
  70              		.global	SleepTimer_Init
  71              		.thumb
  72              		.thumb_func
  73              		.type	SleepTimer_Init, %function
  74              	SleepTimer_Init:
  75              	.LFB1:
  65:Generated_Source\PSoC5/SleepTimer.c **** 
  66:Generated_Source\PSoC5/SleepTimer.c **** 
  67:Generated_Source\PSoC5/SleepTimer.c **** /*******************************************************************************
  68:Generated_Source\PSoC5/SleepTimer.c **** * Function Name: SleepTimer_Init
  69:Generated_Source\PSoC5/SleepTimer.c **** ********************************************************************************
  70:Generated_Source\PSoC5/SleepTimer.c **** *
  71:Generated_Source\PSoC5/SleepTimer.c **** * Summary:
  72:Generated_Source\PSoC5/SleepTimer.c **** *  This function initializes or restores the component according to the
  73:Generated_Source\PSoC5/SleepTimer.c **** *  customizer Configure dialog settings. It is not necessary to call
  74:Generated_Source\PSoC5/SleepTimer.c **** *  SleepTimer_Init() because the SleepTimer_Start() API calls this function and
  75:Generated_Source\PSoC5/SleepTimer.c **** *  is the preferred method to begin component operation. Sets CTW interval
  76:Generated_Source\PSoC5/SleepTimer.c **** *  period and enables or disables CTW interrupt (according to the customizer's
  77:Generated_Source\PSoC5/SleepTimer.c **** *  settings).
  78:Generated_Source\PSoC5/SleepTimer.c **** *
  79:Generated_Source\PSoC5/SleepTimer.c **** * Parameters:
  80:Generated_Source\PSoC5/SleepTimer.c **** *  None
  81:Generated_Source\PSoC5/SleepTimer.c **** *
  82:Generated_Source\PSoC5/SleepTimer.c **** * Return:
  83:Generated_Source\PSoC5/SleepTimer.c **** *  None
  84:Generated_Source\PSoC5/SleepTimer.c **** *
  85:Generated_Source\PSoC5/SleepTimer.c **** *******************************************************************************/
  86:Generated_Source\PSoC5/SleepTimer.c **** void SleepTimer_Init(void)  
  87:Generated_Source\PSoC5/SleepTimer.c **** {
  76              		.loc 1 87 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 7, -8
  83              		.cfi_offset 14, -4
  84 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 4


  85              		.cfi_def_cfa_register 7
  88:Generated_Source\PSoC5/SleepTimer.c ****     /* Sets default (passed from customizer) interval */
  89:Generated_Source\PSoC5/SleepTimer.c ****     SleepTimer_SetInterval(SleepTimer_INTERVAL);
  86              		.loc 1 89 0
  87 0004 0A20     		movs	r0, #10
  88 0006 FFF7FEFF 		bl	SleepTimer_SetInterval
  90:Generated_Source\PSoC5/SleepTimer.c **** 
  91:Generated_Source\PSoC5/SleepTimer.c ****     /* Check if user sets to issue an interrupt in customizer */
  92:Generated_Source\PSoC5/SleepTimer.c ****     #if (1u == SleepTimer_ENABLE_INTERRUPT)
  93:Generated_Source\PSoC5/SleepTimer.c ****     {
  94:Generated_Source\PSoC5/SleepTimer.c ****         /* Enable interrupt */
  95:Generated_Source\PSoC5/SleepTimer.c ****         SleepTimer_EnableInt();
  89              		.loc 1 95 0
  90 000a FFF7FEFF 		bl	SleepTimer_EnableInt
  96:Generated_Source\PSoC5/SleepTimer.c ****     }
  97:Generated_Source\PSoC5/SleepTimer.c ****     #else /* interrupt should be disabled */
  98:Generated_Source\PSoC5/SleepTimer.c ****     {
  99:Generated_Source\PSoC5/SleepTimer.c ****         /* Disable interrupt */
 100:Generated_Source\PSoC5/SleepTimer.c ****         SleepTimer_DisableInt();
 101:Generated_Source\PSoC5/SleepTimer.c ****     }   /* Interrupt is disabled  */
 102:Generated_Source\PSoC5/SleepTimer.c ****     #endif  /* (1u == SleepTimer_ENABLE_INTERRUPT) */
 103:Generated_Source\PSoC5/SleepTimer.c **** }
  91              		.loc 1 103 0
  92 000e 00BF     		nop
  93 0010 80BD     		pop	{r7, pc}
  94              		.cfi_endproc
  95              	.LFE1:
  96              		.size	SleepTimer_Init, .-SleepTimer_Init
  97 0012 00BF     		.section	.text.SleepTimer_Enable,"ax",%progbits
  98              		.align	2
  99              		.global	SleepTimer_Enable
 100              		.thumb
 101              		.thumb_func
 102              		.type	SleepTimer_Enable, %function
 103              	SleepTimer_Enable:
 104              	.LFB2:
 104:Generated_Source\PSoC5/SleepTimer.c **** 
 105:Generated_Source\PSoC5/SleepTimer.c **** 
 106:Generated_Source\PSoC5/SleepTimer.c **** /*******************************************************************************
 107:Generated_Source\PSoC5/SleepTimer.c **** * Function Name: SleepTimer_Enable
 108:Generated_Source\PSoC5/SleepTimer.c **** ********************************************************************************
 109:Generated_Source\PSoC5/SleepTimer.c **** * Summary:
 110:Generated_Source\PSoC5/SleepTimer.c **** *  This function activates the 1-kHz ILO and the CTW and begins component
 111:Generated_Source\PSoC5/SleepTimer.c **** *  operation. It is not necessary to call SleepTimer_Enable() because the
 112:Generated_Source\PSoC5/SleepTimer.c **** *  SleepTimer_Start() API calls this function, which is the preferred method to
 113:Generated_Source\PSoC5/SleepTimer.c **** *  begin component operation.
 114:Generated_Source\PSoC5/SleepTimer.c **** *
 115:Generated_Source\PSoC5/SleepTimer.c **** * Parameters:
 116:Generated_Source\PSoC5/SleepTimer.c **** *  None
 117:Generated_Source\PSoC5/SleepTimer.c **** *
 118:Generated_Source\PSoC5/SleepTimer.c **** * Return:
 119:Generated_Source\PSoC5/SleepTimer.c **** *  None
 120:Generated_Source\PSoC5/SleepTimer.c **** *
 121:Generated_Source\PSoC5/SleepTimer.c **** * Side Effects:
 122:Generated_Source\PSoC5/SleepTimer.c **** *  Enables 1 kHz ILO clocks and leaves it enabled after Sleep Time component
 123:Generated_Source\PSoC5/SleepTimer.c **** *  is stopped.
 124:Generated_Source\PSoC5/SleepTimer.c **** *
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 5


 125:Generated_Source\PSoC5/SleepTimer.c **** *******************************************************************************/
 126:Generated_Source\PSoC5/SleepTimer.c **** void SleepTimer_Enable(void) 
 127:Generated_Source\PSoC5/SleepTimer.c **** {
 105              		.loc 1 127 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 8
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109 0000 80B5     		push	{r7, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113 0002 82B0     		sub	sp, sp, #8
 114              		.cfi_def_cfa_offset 16
 115 0004 00AF     		add	r7, sp, #0
 116              		.cfi_def_cfa_register 7
 128:Generated_Source\PSoC5/SleepTimer.c ****     uint8 interruptState;
 129:Generated_Source\PSoC5/SleepTimer.c **** 
 130:Generated_Source\PSoC5/SleepTimer.c ****     /* If 1kHz ILO is disabled */
 131:Generated_Source\PSoC5/SleepTimer.c ****     if(0u == (SleepTimer_ILO_CFG_REG & SleepTimer_ILO_1KHZ_EN))
 117              		.loc 1 131 0
 118 0006 1A4B     		ldr	r3, .L10
 119 0008 1B78     		ldrb	r3, [r3]
 120 000a DBB2     		uxtb	r3, r3
 121 000c 03F00203 		and	r3, r3, #2
 122 0010 002B     		cmp	r3, #0
 123 0012 18D1     		bne	.L7
 132:Generated_Source\PSoC5/SleepTimer.c ****     {
 133:Generated_Source\PSoC5/SleepTimer.c ****         /* Enter critical section */
 134:Generated_Source\PSoC5/SleepTimer.c ****         interruptState = CyEnterCriticalSection();
 124              		.loc 1 134 0
 125 0014 FFF7FEFF 		bl	CyEnterCriticalSection
 126 0018 0346     		mov	r3, r0
 127 001a FB71     		strb	r3, [r7, #7]
 135:Generated_Source\PSoC5/SleepTimer.c **** 
 136:Generated_Source\PSoC5/SleepTimer.c ****         /* Enable 1kHz ILO */
 137:Generated_Source\PSoC5/SleepTimer.c ****         SleepTimer_ILO_CFG_REG |=SleepTimer_ILO_1KHZ_EN;
 128              		.loc 1 137 0
 129 001c 144A     		ldr	r2, .L10
 130 001e 144B     		ldr	r3, .L10
 131 0020 1B78     		ldrb	r3, [r3]
 132 0022 DBB2     		uxtb	r3, r3
 133 0024 43F00203 		orr	r3, r3, #2
 134 0028 DBB2     		uxtb	r3, r3
 135 002a 1370     		strb	r3, [r2]
 138:Generated_Source\PSoC5/SleepTimer.c **** 
 139:Generated_Source\PSoC5/SleepTimer.c ****         /* Enable the CTW counter */
 140:Generated_Source\PSoC5/SleepTimer.c ****         SleepTimer_TW_CFG_REG |= SleepTimer_CTW_EN;
 136              		.loc 1 140 0
 137 002c 114A     		ldr	r2, .L10+4
 138 002e 114B     		ldr	r3, .L10+4
 139 0030 1B78     		ldrb	r3, [r3]
 140 0032 DBB2     		uxtb	r3, r3
 141 0034 43F00403 		orr	r3, r3, #4
 142 0038 DBB2     		uxtb	r3, r3
 143 003a 1370     		strb	r3, [r2]
 141:Generated_Source\PSoC5/SleepTimer.c **** 
 142:Generated_Source\PSoC5/SleepTimer.c ****         /* Exit critical section */
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 6


 143:Generated_Source\PSoC5/SleepTimer.c ****         CyExitCriticalSection(interruptState);
 144              		.loc 1 143 0
 145 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 146 003e 1846     		mov	r0, r3
 147 0040 FFF7FEFF 		bl	CyExitCriticalSection
 144:Generated_Source\PSoC5/SleepTimer.c ****     }
 145:Generated_Source\PSoC5/SleepTimer.c ****     else /* If 1kHz ILO is enabled - enable CTW counter */
 146:Generated_Source\PSoC5/SleepTimer.c ****     {
 147:Generated_Source\PSoC5/SleepTimer.c ****         /* Enter critical section */
 148:Generated_Source\PSoC5/SleepTimer.c ****         interruptState = CyEnterCriticalSection();
 149:Generated_Source\PSoC5/SleepTimer.c **** 
 150:Generated_Source\PSoC5/SleepTimer.c ****         /* Enable the CTW counter */
 151:Generated_Source\PSoC5/SleepTimer.c ****         SleepTimer_TW_CFG_REG |= SleepTimer_CTW_EN;
 152:Generated_Source\PSoC5/SleepTimer.c **** 
 153:Generated_Source\PSoC5/SleepTimer.c ****         /* Exit critical section */
 154:Generated_Source\PSoC5/SleepTimer.c ****         CyExitCriticalSection(interruptState);
 155:Generated_Source\PSoC5/SleepTimer.c ****     }
 156:Generated_Source\PSoC5/SleepTimer.c **** }
 148              		.loc 1 156 0
 149 0044 0FE0     		b	.L9
 150              	.L7:
 148:Generated_Source\PSoC5/SleepTimer.c **** 
 151              		.loc 1 148 0
 152 0046 FFF7FEFF 		bl	CyEnterCriticalSection
 153 004a 0346     		mov	r3, r0
 154 004c FB71     		strb	r3, [r7, #7]
 151:Generated_Source\PSoC5/SleepTimer.c **** 
 155              		.loc 1 151 0
 156 004e 094A     		ldr	r2, .L10+4
 157 0050 084B     		ldr	r3, .L10+4
 158 0052 1B78     		ldrb	r3, [r3]
 159 0054 DBB2     		uxtb	r3, r3
 160 0056 43F00403 		orr	r3, r3, #4
 161 005a DBB2     		uxtb	r3, r3
 162 005c 1370     		strb	r3, [r2]
 154:Generated_Source\PSoC5/SleepTimer.c ****     }
 163              		.loc 1 154 0
 164 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 165 0060 1846     		mov	r0, r3
 166 0062 FFF7FEFF 		bl	CyExitCriticalSection
 167              	.L9:
 168              		.loc 1 156 0
 169 0066 00BF     		nop
 170 0068 0837     		adds	r7, r7, #8
 171              		.cfi_def_cfa_offset 8
 172 006a BD46     		mov	sp, r7
 173              		.cfi_def_cfa_register 13
 174              		@ sp needed
 175 006c 80BD     		pop	{r7, pc}
 176              	.L11:
 177 006e 00BF     		.align	2
 178              	.L10:
 179 0070 00430040 		.word	1073758976
 180 0074 82430040 		.word	1073759106
 181              		.cfi_endproc
 182              	.LFE2:
 183              		.size	SleepTimer_Enable, .-SleepTimer_Enable
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 7


 184              		.section	.text.SleepTimer_Stop,"ax",%progbits
 185              		.align	2
 186              		.global	SleepTimer_Stop
 187              		.thumb
 188              		.thumb_func
 189              		.type	SleepTimer_Stop, %function
 190              	SleepTimer_Stop:
 191              	.LFB3:
 157:Generated_Source\PSoC5/SleepTimer.c **** 
 158:Generated_Source\PSoC5/SleepTimer.c **** 
 159:Generated_Source\PSoC5/SleepTimer.c **** /*******************************************************************************
 160:Generated_Source\PSoC5/SleepTimer.c **** * Function Name: SleepTimer_Stop
 161:Generated_Source\PSoC5/SleepTimer.c **** ********************************************************************************
 162:Generated_Source\PSoC5/SleepTimer.c **** *
 163:Generated_Source\PSoC5/SleepTimer.c **** * Summary:
 164:Generated_Source\PSoC5/SleepTimer.c **** *  This function stops Sleep Timer operation and disables wakeup and interrupt.
 165:Generated_Source\PSoC5/SleepTimer.c **** *  The device does not wake up when the CTW counter reaches terminal count, and
 166:Generated_Source\PSoC5/SleepTimer.c **** *  an interrupt is not issued.
 167:Generated_Source\PSoC5/SleepTimer.c **** *
 168:Generated_Source\PSoC5/SleepTimer.c **** * Parameters:
 169:Generated_Source\PSoC5/SleepTimer.c **** *  None
 170:Generated_Source\PSoC5/SleepTimer.c **** *
 171:Generated_Source\PSoC5/SleepTimer.c **** * Return:
 172:Generated_Source\PSoC5/SleepTimer.c **** *  None
 173:Generated_Source\PSoC5/SleepTimer.c **** *
 174:Generated_Source\PSoC5/SleepTimer.c **** * Side Effects:
 175:Generated_Source\PSoC5/SleepTimer.c **** *  Leaves the 1 kHz ILO clock enabled after Sleep Time component is stopped.
 176:Generated_Source\PSoC5/SleepTimer.c **** *
 177:Generated_Source\PSoC5/SleepTimer.c **** *******************************************************************************/
 178:Generated_Source\PSoC5/SleepTimer.c **** void SleepTimer_Stop(void) 
 179:Generated_Source\PSoC5/SleepTimer.c **** {
 192              		.loc 1 179 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 8
 195              		@ frame_needed = 1, uses_anonymous_args = 0
 196 0000 80B5     		push	{r7, lr}
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 7, -8
 199              		.cfi_offset 14, -4
 200 0002 82B0     		sub	sp, sp, #8
 201              		.cfi_def_cfa_offset 16
 202 0004 00AF     		add	r7, sp, #0
 203              		.cfi_def_cfa_register 7
 180:Generated_Source\PSoC5/SleepTimer.c ****     uint8 interruptState;
 181:Generated_Source\PSoC5/SleepTimer.c **** 
 182:Generated_Source\PSoC5/SleepTimer.c ****     /* Enter critical section */
 183:Generated_Source\PSoC5/SleepTimer.c ****     interruptState = CyEnterCriticalSection();
 204              		.loc 1 183 0
 205 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 206 000a 0346     		mov	r3, r0
 207 000c FB71     		strb	r3, [r7, #7]
 184:Generated_Source\PSoC5/SleepTimer.c **** 
 185:Generated_Source\PSoC5/SleepTimer.c ****     /* Disable CTW counter */
 186:Generated_Source\PSoC5/SleepTimer.c ****     SleepTimer_TW_CFG_REG &= (uint8)(~SleepTimer_CTW_EN);
 208              		.loc 1 186 0
 209 000e 084A     		ldr	r2, .L13
 210 0010 074B     		ldr	r3, .L13
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 8


 211 0012 1B78     		ldrb	r3, [r3]
 212 0014 DBB2     		uxtb	r3, r3
 213 0016 23F00403 		bic	r3, r3, #4
 214 001a DBB2     		uxtb	r3, r3
 215 001c 1370     		strb	r3, [r2]
 187:Generated_Source\PSoC5/SleepTimer.c **** 
 188:Generated_Source\PSoC5/SleepTimer.c ****     /* Exit critical section */
 189:Generated_Source\PSoC5/SleepTimer.c ****     CyExitCriticalSection(interruptState);
 216              		.loc 1 189 0
 217 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 218 0020 1846     		mov	r0, r3
 219 0022 FFF7FEFF 		bl	CyExitCriticalSection
 190:Generated_Source\PSoC5/SleepTimer.c **** }
 220              		.loc 1 190 0
 221 0026 00BF     		nop
 222 0028 0837     		adds	r7, r7, #8
 223              		.cfi_def_cfa_offset 8
 224 002a BD46     		mov	sp, r7
 225              		.cfi_def_cfa_register 13
 226              		@ sp needed
 227 002c 80BD     		pop	{r7, pc}
 228              	.L14:
 229 002e 00BF     		.align	2
 230              	.L13:
 231 0030 82430040 		.word	1073759106
 232              		.cfi_endproc
 233              	.LFE3:
 234              		.size	SleepTimer_Stop, .-SleepTimer_Stop
 235              		.section	.text.SleepTimer_EnableInt,"ax",%progbits
 236              		.align	2
 237              		.global	SleepTimer_EnableInt
 238              		.thumb
 239              		.thumb_func
 240              		.type	SleepTimer_EnableInt, %function
 241              	SleepTimer_EnableInt:
 242              	.LFB4:
 191:Generated_Source\PSoC5/SleepTimer.c **** 
 192:Generated_Source\PSoC5/SleepTimer.c **** 
 193:Generated_Source\PSoC5/SleepTimer.c **** /*******************************************************************************
 194:Generated_Source\PSoC5/SleepTimer.c **** * Function Name: SleepTimer_EnableInt
 195:Generated_Source\PSoC5/SleepTimer.c **** ********************************************************************************
 196:Generated_Source\PSoC5/SleepTimer.c **** *
 197:Generated_Source\PSoC5/SleepTimer.c **** * Summary:
 198:Generated_Source\PSoC5/SleepTimer.c **** *  This function enables the CTW terminal count interrupt.
 199:Generated_Source\PSoC5/SleepTimer.c **** *
 200:Generated_Source\PSoC5/SleepTimer.c **** * Parameters:
 201:Generated_Source\PSoC5/SleepTimer.c **** *  None
 202:Generated_Source\PSoC5/SleepTimer.c **** *
 203:Generated_Source\PSoC5/SleepTimer.c **** * Return:
 204:Generated_Source\PSoC5/SleepTimer.c **** *  None
 205:Generated_Source\PSoC5/SleepTimer.c **** *
 206:Generated_Source\PSoC5/SleepTimer.c **** *******************************************************************************/
 207:Generated_Source\PSoC5/SleepTimer.c **** void SleepTimer_EnableInt(void) 
 208:Generated_Source\PSoC5/SleepTimer.c **** {
 243              		.loc 1 208 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 9


 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247 0000 80B5     		push	{r7, lr}
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 82B0     		sub	sp, sp, #8
 252              		.cfi_def_cfa_offset 16
 253 0004 00AF     		add	r7, sp, #0
 254              		.cfi_def_cfa_register 7
 209:Generated_Source\PSoC5/SleepTimer.c ****     uint8 interruptState;
 210:Generated_Source\PSoC5/SleepTimer.c **** 
 211:Generated_Source\PSoC5/SleepTimer.c ****     /* Enter critical section */
 212:Generated_Source\PSoC5/SleepTimer.c ****     interruptState = CyEnterCriticalSection();
 255              		.loc 1 212 0
 256 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 257 000a 0346     		mov	r3, r0
 258 000c FB71     		strb	r3, [r7, #7]
 213:Generated_Source\PSoC5/SleepTimer.c **** 
 214:Generated_Source\PSoC5/SleepTimer.c ****      /* Enable interrupt on wake up */
 215:Generated_Source\PSoC5/SleepTimer.c ****     SleepTimer_TW_CFG_REG |= SleepTimer_CTW_IE;
 259              		.loc 1 215 0
 260 000e 084A     		ldr	r2, .L16
 261 0010 074B     		ldr	r3, .L16
 262 0012 1B78     		ldrb	r3, [r3]
 263 0014 DBB2     		uxtb	r3, r3
 264 0016 43F00803 		orr	r3, r3, #8
 265 001a DBB2     		uxtb	r3, r3
 266 001c 1370     		strb	r3, [r2]
 216:Generated_Source\PSoC5/SleepTimer.c **** 
 217:Generated_Source\PSoC5/SleepTimer.c ****     /* Exit critical section */
 218:Generated_Source\PSoC5/SleepTimer.c ****     CyExitCriticalSection(interruptState);
 267              		.loc 1 218 0
 268 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 269 0020 1846     		mov	r0, r3
 270 0022 FFF7FEFF 		bl	CyExitCriticalSection
 219:Generated_Source\PSoC5/SleepTimer.c **** }
 271              		.loc 1 219 0
 272 0026 00BF     		nop
 273 0028 0837     		adds	r7, r7, #8
 274              		.cfi_def_cfa_offset 8
 275 002a BD46     		mov	sp, r7
 276              		.cfi_def_cfa_register 13
 277              		@ sp needed
 278 002c 80BD     		pop	{r7, pc}
 279              	.L17:
 280 002e 00BF     		.align	2
 281              	.L16:
 282 0030 82430040 		.word	1073759106
 283              		.cfi_endproc
 284              	.LFE4:
 285              		.size	SleepTimer_EnableInt, .-SleepTimer_EnableInt
 286              		.section	.text.SleepTimer_DisableInt,"ax",%progbits
 287              		.align	2
 288              		.global	SleepTimer_DisableInt
 289              		.thumb
 290              		.thumb_func
 291              		.type	SleepTimer_DisableInt, %function
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 10


 292              	SleepTimer_DisableInt:
 293              	.LFB5:
 220:Generated_Source\PSoC5/SleepTimer.c **** 
 221:Generated_Source\PSoC5/SleepTimer.c **** 
 222:Generated_Source\PSoC5/SleepTimer.c **** /*******************************************************************************
 223:Generated_Source\PSoC5/SleepTimer.c **** * Function Name: SleepTimer_DisableInt
 224:Generated_Source\PSoC5/SleepTimer.c **** ********************************************************************************
 225:Generated_Source\PSoC5/SleepTimer.c **** *
 226:Generated_Source\PSoC5/SleepTimer.c **** * Summary:
 227:Generated_Source\PSoC5/SleepTimer.c **** *  This function disables the CTW terminal count interrupt.
 228:Generated_Source\PSoC5/SleepTimer.c **** *
 229:Generated_Source\PSoC5/SleepTimer.c **** * Parameters:
 230:Generated_Source\PSoC5/SleepTimer.c **** *  None
 231:Generated_Source\PSoC5/SleepTimer.c **** *
 232:Generated_Source\PSoC5/SleepTimer.c **** * Return:
 233:Generated_Source\PSoC5/SleepTimer.c **** *  None
 234:Generated_Source\PSoC5/SleepTimer.c **** *
 235:Generated_Source\PSoC5/SleepTimer.c **** *******************************************************************************/
 236:Generated_Source\PSoC5/SleepTimer.c **** void SleepTimer_DisableInt(void) 
 237:Generated_Source\PSoC5/SleepTimer.c **** {
 294              		.loc 1 237 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 8
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298 0000 80B5     		push	{r7, lr}
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 0002 82B0     		sub	sp, sp, #8
 303              		.cfi_def_cfa_offset 16
 304 0004 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
 238:Generated_Source\PSoC5/SleepTimer.c ****     uint8 interruptState;
 239:Generated_Source\PSoC5/SleepTimer.c **** 
 240:Generated_Source\PSoC5/SleepTimer.c ****     /* Enter critical section */
 241:Generated_Source\PSoC5/SleepTimer.c ****     interruptState = CyEnterCriticalSection();
 306              		.loc 1 241 0
 307 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 308 000a 0346     		mov	r3, r0
 309 000c FB71     		strb	r3, [r7, #7]
 242:Generated_Source\PSoC5/SleepTimer.c **** 
 243:Generated_Source\PSoC5/SleepTimer.c ****     /* Disable interrupt on wake up */
 244:Generated_Source\PSoC5/SleepTimer.c ****     SleepTimer_TW_CFG_REG &= (uint8)(~SleepTimer_CTW_IE);
 310              		.loc 1 244 0
 311 000e 084A     		ldr	r2, .L19
 312 0010 074B     		ldr	r3, .L19
 313 0012 1B78     		ldrb	r3, [r3]
 314 0014 DBB2     		uxtb	r3, r3
 315 0016 23F00803 		bic	r3, r3, #8
 316 001a DBB2     		uxtb	r3, r3
 317 001c 1370     		strb	r3, [r2]
 245:Generated_Source\PSoC5/SleepTimer.c **** 
 246:Generated_Source\PSoC5/SleepTimer.c ****     /* Exit critical section */
 247:Generated_Source\PSoC5/SleepTimer.c ****     CyExitCriticalSection(interruptState);
 318              		.loc 1 247 0
 319 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 320 0020 1846     		mov	r0, r3
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 11


 321 0022 FFF7FEFF 		bl	CyExitCriticalSection
 248:Generated_Source\PSoC5/SleepTimer.c **** }
 322              		.loc 1 248 0
 323 0026 00BF     		nop
 324 0028 0837     		adds	r7, r7, #8
 325              		.cfi_def_cfa_offset 8
 326 002a BD46     		mov	sp, r7
 327              		.cfi_def_cfa_register 13
 328              		@ sp needed
 329 002c 80BD     		pop	{r7, pc}
 330              	.L20:
 331 002e 00BF     		.align	2
 332              	.L19:
 333 0030 82430040 		.word	1073759106
 334              		.cfi_endproc
 335              	.LFE5:
 336              		.size	SleepTimer_DisableInt, .-SleepTimer_DisableInt
 337              		.section	.text.SleepTimer_SetInterval,"ax",%progbits
 338              		.align	2
 339              		.global	SleepTimer_SetInterval
 340              		.thumb
 341              		.thumb_func
 342              		.type	SleepTimer_SetInterval, %function
 343              	SleepTimer_SetInterval:
 344              	.LFB6:
 249:Generated_Source\PSoC5/SleepTimer.c **** 
 250:Generated_Source\PSoC5/SleepTimer.c **** 
 251:Generated_Source\PSoC5/SleepTimer.c **** /*******************************************************************************
 252:Generated_Source\PSoC5/SleepTimer.c **** * Function Name: SleepTimer_SetInterval
 253:Generated_Source\PSoC5/SleepTimer.c **** ********************************************************************************
 254:Generated_Source\PSoC5/SleepTimer.c **** *
 255:Generated_Source\PSoC5/SleepTimer.c **** * Summary:
 256:Generated_Source\PSoC5/SleepTimer.c **** *  This function sets the CTW interval period. The first interval can range
 257:Generated_Source\PSoC5/SleepTimer.c **** *  from 1 to (period + 1) milliseconds. Additional intervals occur at the
 258:Generated_Source\PSoC5/SleepTimer.c **** *  nominal period. You can only change the interval value when CTW is disabled,
 259:Generated_Source\PSoC5/SleepTimer.c **** *  which you do by stopping the component.
 260:Generated_Source\PSoC5/SleepTimer.c **** *
 261:Generated_Source\PSoC5/SleepTimer.c **** * Parameters:
 262:Generated_Source\PSoC5/SleepTimer.c **** *  uint8 interval: interval?s value for the CTW.
 263:Generated_Source\PSoC5/SleepTimer.c **** *
 264:Generated_Source\PSoC5/SleepTimer.c **** *  PSoC 5:
 265:Generated_Source\PSoC5/SleepTimer.c **** *  Only the 4-, 8-, 16-, 32-, 64-, 128-, and 256-ms selections are supported.
 266:Generated_Source\PSoC5/SleepTimer.c **** *
 267:Generated_Source\PSoC5/SleepTimer.c **** *           Name                    Value        Period
 268:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_2_MS      4'b0001        2 ms
 269:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_4_MS      4'b0010        4 ms
 270:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_8_MS      4'b0011        8 ms
 271:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_16_MS     4'b0100        16 ms
 272:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_32_MS     4'b0101        32 ms
 273:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_64_MS     4'b0110        64 ms
 274:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_128_MS    4'b0111        128 ms
 275:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_256_MS    4'b1000        256 ms
 276:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_512_MS    4'b1001        512 ms
 277:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_1024_MS   4'b1010        1024 ms
 278:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_2048_MS   4'b1011        2048 ms
 279:Generated_Source\PSoC5/SleepTimer.c **** *   SleepTimer__CTW_4096_MS   4'b1100        4096 ms
 280:Generated_Source\PSoC5/SleepTimer.c **** *
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 12


 281:Generated_Source\PSoC5/SleepTimer.c **** * Return:
 282:Generated_Source\PSoC5/SleepTimer.c **** *  None
 283:Generated_Source\PSoC5/SleepTimer.c **** *
 284:Generated_Source\PSoC5/SleepTimer.c **** * Side Effects:
 285:Generated_Source\PSoC5/SleepTimer.c **** *  Interval value can be only changed when component is stopped (CTW is
 286:Generated_Source\PSoC5/SleepTimer.c **** *  disabled).
 287:Generated_Source\PSoC5/SleepTimer.c **** *
 288:Generated_Source\PSoC5/SleepTimer.c **** *******************************************************************************/
 289:Generated_Source\PSoC5/SleepTimer.c **** void SleepTimer_SetInterval(uint8 interval) 
 290:Generated_Source\PSoC5/SleepTimer.c **** {
 345              		.loc 1 290 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 8
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350 0000 80B4     		push	{r7}
 351              		.cfi_def_cfa_offset 4
 352              		.cfi_offset 7, -4
 353 0002 83B0     		sub	sp, sp, #12
 354              		.cfi_def_cfa_offset 16
 355 0004 00AF     		add	r7, sp, #0
 356              		.cfi_def_cfa_register 7
 357 0006 0346     		mov	r3, r0
 358 0008 FB71     		strb	r3, [r7, #7]
 291:Generated_Source\PSoC5/SleepTimer.c ****     /* Check if CTW is disabled */
 292:Generated_Source\PSoC5/SleepTimer.c ****     if (0u == (SleepTimer_TW_CFG_REG & SleepTimer_CTW_EN))
 359              		.loc 1 292 0
 360 000a 0D4B     		ldr	r3, .L24
 361 000c 1B78     		ldrb	r3, [r3]
 362 000e DBB2     		uxtb	r3, r3
 363 0010 03F00403 		and	r3, r3, #4
 364 0014 002B     		cmp	r3, #0
 365 0016 0DD1     		bne	.L23
 293:Generated_Source\PSoC5/SleepTimer.c ****     {
 294:Generated_Source\PSoC5/SleepTimer.c ****         #if(CY_PSOC5A)
 295:Generated_Source\PSoC5/SleepTimer.c **** 
 296:Generated_Source\PSoC5/SleepTimer.c ****             CYASSERT((SleepTimer__CTW_4_MS   == interval) ||
 297:Generated_Source\PSoC5/SleepTimer.c ****                      (SleepTimer__CTW_8_MS   == interval) ||
 298:Generated_Source\PSoC5/SleepTimer.c ****                      (SleepTimer__CTW_16_MS  == interval) ||
 299:Generated_Source\PSoC5/SleepTimer.c ****                      (SleepTimer__CTW_32_MS  == interval) ||
 300:Generated_Source\PSoC5/SleepTimer.c ****                      (SleepTimer__CTW_64_MS  == interval) ||
 301:Generated_Source\PSoC5/SleepTimer.c ****                      (SleepTimer__CTW_128_MS == interval) ||
 302:Generated_Source\PSoC5/SleepTimer.c ****                      (SleepTimer__CTW_256_MS == interval));
 303:Generated_Source\PSoC5/SleepTimer.c **** 
 304:Generated_Source\PSoC5/SleepTimer.c ****         #endif  /* (CY_PSOC5A) */
 305:Generated_Source\PSoC5/SleepTimer.c **** 
 306:Generated_Source\PSoC5/SleepTimer.c ****         /* Set CTW interval */
 307:Generated_Source\PSoC5/SleepTimer.c ****         SleepTimer_CTW_INTERVAL_REG = \
 366              		.loc 1 307 0
 367 0018 0A49     		ldr	r1, .L24+4
 308:Generated_Source\PSoC5/SleepTimer.c ****             (SleepTimer_CTW_INTERVAL_REG & ((uint8)~SleepTimer_INTERVAL_MASK)) | \
 368              		.loc 1 308 0
 369 001a 0A4B     		ldr	r3, .L24+4
 370 001c 1B78     		ldrb	r3, [r3]
 371 001e DBB2     		uxtb	r3, r3
 307:Generated_Source\PSoC5/SleepTimer.c ****             (SleepTimer_CTW_INTERVAL_REG & ((uint8)~SleepTimer_INTERVAL_MASK)) | \
 372              		.loc 1 307 0
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 13


 373 0020 23F00F03 		bic	r3, r3, #15
 374 0024 DAB2     		uxtb	r2, r3
 375 0026 FB79     		ldrb	r3, [r7, #7]
 376 0028 03F00F03 		and	r3, r3, #15
 377 002c DBB2     		uxtb	r3, r3
 378 002e 1343     		orrs	r3, r3, r2
 379 0030 DBB2     		uxtb	r3, r3
 380 0032 0B70     		strb	r3, [r1]
 381              	.L23:
 309:Generated_Source\PSoC5/SleepTimer.c ****             (interval & SleepTimer_INTERVAL_MASK);
 310:Generated_Source\PSoC5/SleepTimer.c ****     }
 311:Generated_Source\PSoC5/SleepTimer.c ****     /* Do nothing if CTW is enabled. */
 312:Generated_Source\PSoC5/SleepTimer.c **** }
 382              		.loc 1 312 0
 383 0034 00BF     		nop
 384 0036 0C37     		adds	r7, r7, #12
 385              		.cfi_def_cfa_offset 4
 386 0038 BD46     		mov	sp, r7
 387              		.cfi_def_cfa_register 13
 388              		@ sp needed
 389 003a 80BC     		pop	{r7}
 390              		.cfi_restore 7
 391              		.cfi_def_cfa_offset 0
 392 003c 7047     		bx	lr
 393              	.L25:
 394 003e 00BF     		.align	2
 395              	.L24:
 396 0040 82430040 		.word	1073759106
 397 0044 81430040 		.word	1073759105
 398              		.cfi_endproc
 399              	.LFE6:
 400              		.size	SleepTimer_SetInterval, .-SleepTimer_SetInterval
 401              		.section	.text.SleepTimer_GetStatus,"ax",%progbits
 402              		.align	2
 403              		.global	SleepTimer_GetStatus
 404              		.thumb
 405              		.thumb_func
 406              		.type	SleepTimer_GetStatus, %function
 407              	SleepTimer_GetStatus:
 408              	.LFB7:
 313:Generated_Source\PSoC5/SleepTimer.c **** 
 314:Generated_Source\PSoC5/SleepTimer.c **** 
 315:Generated_Source\PSoC5/SleepTimer.c **** /*******************************************************************************
 316:Generated_Source\PSoC5/SleepTimer.c **** * Function Name: SleepTimer_GetStatus
 317:Generated_Source\PSoC5/SleepTimer.c **** ********************************************************************************
 318:Generated_Source\PSoC5/SleepTimer.c **** *
 319:Generated_Source\PSoC5/SleepTimer.c **** * Summary:
 320:Generated_Source\PSoC5/SleepTimer.c **** *  This function returns the state of the Sleep Timer's status register, and
 321:Generated_Source\PSoC5/SleepTimer.c **** *  clears the pending interrupt status bit. The application code must always
 322:Generated_Source\PSoC5/SleepTimer.c **** *  call this function after wakeup to clear the ctw_int status bit. The code
 323:Generated_Source\PSoC5/SleepTimer.c **** *  must call this function whether the Sleep Timer's interrupt is disabled or
 324:Generated_Source\PSoC5/SleepTimer.c **** *  enabled.
 325:Generated_Source\PSoC5/SleepTimer.c **** *
 326:Generated_Source\PSoC5/SleepTimer.c **** * Parameters:
 327:Generated_Source\PSoC5/SleepTimer.c **** *  None
 328:Generated_Source\PSoC5/SleepTimer.c **** *
 329:Generated_Source\PSoC5/SleepTimer.c **** * Return:
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 14


 330:Generated_Source\PSoC5/SleepTimer.c **** *  Returns an 8-bit value (uint8) with bits set if a corresponding event has
 331:Generated_Source\PSoC5/SleepTimer.c **** *  occurred. The constants shown in the following table describe the two-bit
 332:Generated_Source\PSoC5/SleepTimer.c **** *  masks for the two events that this return value can contain.
 333:Generated_Source\PSoC5/SleepTimer.c **** *
 334:Generated_Source\PSoC5/SleepTimer.c **** *            Name                             Description
 335:Generated_Source\PSoC5/SleepTimer.c **** *  SleepTimer_PM_INT_SR_ONEPPSP  A onepps event has occured
 336:Generated_Source\PSoC5/SleepTimer.c **** *  SleepTimer_PM_INT_SR_CTW      A central timewheel event occured
 337:Generated_Source\PSoC5/SleepTimer.c **** *  SleepTimer_PM_INT_SR_FTW      A fast timewheel event occured
 338:Generated_Source\PSoC5/SleepTimer.c **** *
 339:Generated_Source\PSoC5/SleepTimer.c **** * Side Effects:
 340:Generated_Source\PSoC5/SleepTimer.c **** *  If the SleepTimer_GetStatus() function is not called in an interrupt
 341:Generated_Source\PSoC5/SleepTimer.c **** *  associated with the SleepTimer, the interrupt is not cleared and as soon as
 342:Generated_Source\PSoC5/SleepTimer.c **** *  the interrupt is exited it is re-entered.
 343:Generated_Source\PSoC5/SleepTimer.c **** *
 344:Generated_Source\PSoC5/SleepTimer.c **** *  After the Sleep Timer has expired, the sleep interval is functionally 0 ms,
 345:Generated_Source\PSoC5/SleepTimer.c **** *  because the interrupt is called until the ctw_int flag is cleared by the
 346:Generated_Source\PSoC5/SleepTimer.c **** *  SleepTimer_GetStatus() function.
 347:Generated_Source\PSoC5/SleepTimer.c **** *
 348:Generated_Source\PSoC5/SleepTimer.c **** *  If an interrupt is generated at the same time as a register read/clear, the
 349:Generated_Source\PSoC5/SleepTimer.c **** *  bit remains set (which causes another interrupt).
 350:Generated_Source\PSoC5/SleepTimer.c **** *
 351:Generated_Source\PSoC5/SleepTimer.c **** *  Reports and then clears all interrupt status bits in the Power Manager
 352:Generated_Source\PSoC5/SleepTimer.c **** *  Interrupt Status register. Some of the bits are not relevant to this
 353:Generated_Source\PSoC5/SleepTimer.c **** *  component's operation.
 354:Generated_Source\PSoC5/SleepTimer.c **** *
 355:Generated_Source\PSoC5/SleepTimer.c **** *  The application code must always call this function (when the Sleep Timer's
 356:Generated_Source\PSoC5/SleepTimer.c **** *  interrupt is disabled or enabled) after wakeup to clear the ctw_int status
 357:Generated_Source\PSoC5/SleepTimer.c **** *  bit. The code must call SleepTimer_GetStatus() within 1 ms (1 clock cycle of
 358:Generated_Source\PSoC5/SleepTimer.c **** *  the ILO) after the CTW event occurred.
 359:Generated_Source\PSoC5/SleepTimer.c **** *
 360:Generated_Source\PSoC5/SleepTimer.c **** *******************************************************************************/
 361:Generated_Source\PSoC5/SleepTimer.c **** uint8 SleepTimer_GetStatus(void) 
 362:Generated_Source\PSoC5/SleepTimer.c **** {
 409              		.loc 1 362 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 1, uses_anonymous_args = 0
 413 0000 80B5     		push	{r7, lr}
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 7, -8
 416              		.cfi_offset 14, -4
 417 0002 00AF     		add	r7, sp, #0
 418              		.cfi_def_cfa_register 7
 363:Generated_Source\PSoC5/SleepTimer.c ****     /* Read to clear  */
 364:Generated_Source\PSoC5/SleepTimer.c ****     return CyPmReadStatus(CY_PM_CTW_INT);
 419              		.loc 1 364 0
 420 0004 0220     		movs	r0, #2
 421 0006 FFF7FEFF 		bl	CyPmReadStatus
 422 000a 0346     		mov	r3, r0
 365:Generated_Source\PSoC5/SleepTimer.c **** }
 423              		.loc 1 365 0
 424 000c 1846     		mov	r0, r3
 425 000e 80BD     		pop	{r7, pc}
 426              		.cfi_endproc
 427              	.LFE7:
 428              		.size	SleepTimer_GetStatus, .-SleepTimer_GetStatus
 429              		.text
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 15


 430              	.Letext0:
 431              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 432              		.section	.debug_info,"",%progbits
 433              	.Ldebug_info0:
 434 0000 A7010000 		.4byte	0x1a7
 435 0004 0400     		.2byte	0x4
 436 0006 00000000 		.4byte	.Ldebug_abbrev0
 437 000a 04       		.byte	0x4
 438 000b 01       		.uleb128 0x1
 439 000c 00000000 		.4byte	.LASF24
 440 0010 0C       		.byte	0xc
 441 0011 DB010000 		.4byte	.LASF25
 442 0015 5D010000 		.4byte	.LASF26
 443 0019 00000000 		.4byte	.Ldebug_ranges0+0
 444 001d 00000000 		.4byte	0
 445 0021 00000000 		.4byte	.Ldebug_line0
 446 0025 02       		.uleb128 0x2
 447 0026 01       		.byte	0x1
 448 0027 06       		.byte	0x6
 449 0028 3C020000 		.4byte	.LASF0
 450 002c 02       		.uleb128 0x2
 451 002d 01       		.byte	0x1
 452 002e 08       		.byte	0x8
 453 002f 0B010000 		.4byte	.LASF1
 454 0033 02       		.uleb128 0x2
 455 0034 02       		.byte	0x2
 456 0035 05       		.byte	0x5
 457 0036 04020000 		.4byte	.LASF2
 458 003a 02       		.uleb128 0x2
 459 003b 02       		.byte	0x2
 460 003c 07       		.byte	0x7
 461 003d AB000000 		.4byte	.LASF3
 462 0041 02       		.uleb128 0x2
 463 0042 04       		.byte	0x4
 464 0043 05       		.byte	0x5
 465 0044 17020000 		.4byte	.LASF4
 466 0048 02       		.uleb128 0x2
 467 0049 04       		.byte	0x4
 468 004a 07       		.byte	0x7
 469 004b 2D010000 		.4byte	.LASF5
 470 004f 02       		.uleb128 0x2
 471 0050 08       		.byte	0x8
 472 0051 05       		.byte	0x5
 473 0052 CD010000 		.4byte	.LASF6
 474 0056 02       		.uleb128 0x2
 475 0057 08       		.byte	0x8
 476 0058 07       		.byte	0x7
 477 0059 85010000 		.4byte	.LASF7
 478 005d 03       		.uleb128 0x3
 479 005e 04       		.byte	0x4
 480 005f 05       		.byte	0x5
 481 0060 696E7400 		.ascii	"int\000"
 482 0064 02       		.uleb128 0x2
 483 0065 04       		.byte	0x4
 484 0066 07       		.byte	0x7
 485 0067 78010000 		.4byte	.LASF8
 486 006b 04       		.uleb128 0x4
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 16


 487 006c 3F010000 		.4byte	.LASF12
 488 0070 02       		.byte	0x2
 489 0071 9201     		.2byte	0x192
 490 0073 2C000000 		.4byte	0x2c
 491 0077 02       		.uleb128 0x2
 492 0078 04       		.byte	0x4
 493 0079 04       		.byte	0x4
 494 007a 8E000000 		.4byte	.LASF9
 495 007e 02       		.uleb128 0x2
 496 007f 08       		.byte	0x8
 497 0080 04       		.byte	0x4
 498 0081 56010000 		.4byte	.LASF10
 499 0085 02       		.uleb128 0x2
 500 0086 01       		.byte	0x1
 501 0087 08       		.byte	0x8
 502 0088 FF010000 		.4byte	.LASF11
 503 008c 04       		.uleb128 0x4
 504 008d 19010000 		.4byte	.LASF13
 505 0091 02       		.byte	0x2
 506 0092 3C02     		.2byte	0x23c
 507 0094 98000000 		.4byte	0x98
 508 0098 05       		.uleb128 0x5
 509 0099 6B000000 		.4byte	0x6b
 510 009d 02       		.uleb128 0x2
 511 009e 08       		.byte	0x8
 512 009f 04       		.byte	0x4
 513 00a0 20020000 		.4byte	.LASF14
 514 00a4 02       		.uleb128 0x2
 515 00a5 04       		.byte	0x4
 516 00a6 07       		.byte	0x7
 517 00a7 B2010000 		.4byte	.LASF15
 518 00ab 06       		.uleb128 0x6
 519 00ac 45010000 		.4byte	.LASF16
 520 00b0 01       		.byte	0x1
 521 00b1 35       		.byte	0x35
 522 00b2 00000000 		.4byte	.LFB0
 523 00b6 24000000 		.4byte	.LFE0-.LFB0
 524 00ba 01       		.uleb128 0x1
 525 00bb 9C       		.byte	0x9c
 526 00bc 06       		.uleb128 0x6
 527 00bd 2C020000 		.4byte	.LASF17
 528 00c1 01       		.byte	0x1
 529 00c2 56       		.byte	0x56
 530 00c3 00000000 		.4byte	.LFB1
 531 00c7 12000000 		.4byte	.LFE1-.LFB1
 532 00cb 01       		.uleb128 0x1
 533 00cc 9C       		.byte	0x9c
 534 00cd 07       		.uleb128 0x7
 535 00ce BB010000 		.4byte	.LASF18
 536 00d2 01       		.byte	0x1
 537 00d3 7E       		.byte	0x7e
 538 00d4 00000000 		.4byte	.LFB2
 539 00d8 78000000 		.4byte	.LFE2-.LFB2
 540 00dc 01       		.uleb128 0x1
 541 00dd 9C       		.byte	0x9c
 542 00de F1000000 		.4byte	0xf1
 543 00e2 08       		.uleb128 0x8
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 17


 544 00e3 1E010000 		.4byte	.LASF20
 545 00e7 01       		.byte	0x1
 546 00e8 80       		.byte	0x80
 547 00e9 6B000000 		.4byte	0x6b
 548 00ed 02       		.uleb128 0x2
 549 00ee 91       		.byte	0x91
 550 00ef 77       		.sleb128 -9
 551 00f0 00       		.byte	0
 552 00f1 07       		.uleb128 0x7
 553 00f2 D3000000 		.4byte	.LASF19
 554 00f6 01       		.byte	0x1
 555 00f7 B2       		.byte	0xb2
 556 00f8 00000000 		.4byte	.LFB3
 557 00fc 34000000 		.4byte	.LFE3-.LFB3
 558 0100 01       		.uleb128 0x1
 559 0101 9C       		.byte	0x9c
 560 0102 15010000 		.4byte	0x115
 561 0106 08       		.uleb128 0x8
 562 0107 1E010000 		.4byte	.LASF20
 563 010b 01       		.byte	0x1
 564 010c B4       		.byte	0xb4
 565 010d 6B000000 		.4byte	0x6b
 566 0111 02       		.uleb128 0x2
 567 0112 91       		.byte	0x91
 568 0113 77       		.sleb128 -9
 569 0114 00       		.byte	0
 570 0115 07       		.uleb128 0x7
 571 0116 BE000000 		.4byte	.LASF21
 572 011a 01       		.byte	0x1
 573 011b CF       		.byte	0xcf
 574 011c 00000000 		.4byte	.LFB4
 575 0120 34000000 		.4byte	.LFE4-.LFB4
 576 0124 01       		.uleb128 0x1
 577 0125 9C       		.byte	0x9c
 578 0126 39010000 		.4byte	0x139
 579 012a 08       		.uleb128 0x8
 580 012b 1E010000 		.4byte	.LASF20
 581 012f 01       		.byte	0x1
 582 0130 D1       		.byte	0xd1
 583 0131 6B000000 		.4byte	0x6b
 584 0135 02       		.uleb128 0x2
 585 0136 91       		.byte	0x91
 586 0137 77       		.sleb128 -9
 587 0138 00       		.byte	0
 588 0139 07       		.uleb128 0x7
 589 013a 9C010000 		.4byte	.LASF22
 590 013e 01       		.byte	0x1
 591 013f EC       		.byte	0xec
 592 0140 00000000 		.4byte	.LFB5
 593 0144 34000000 		.4byte	.LFE5-.LFB5
 594 0148 01       		.uleb128 0x1
 595 0149 9C       		.byte	0x9c
 596 014a 5D010000 		.4byte	0x15d
 597 014e 08       		.uleb128 0x8
 598 014f 1E010000 		.4byte	.LASF20
 599 0153 01       		.byte	0x1
 600 0154 EE       		.byte	0xee
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 18


 601 0155 6B000000 		.4byte	0x6b
 602 0159 02       		.uleb128 0x2
 603 015a 91       		.byte	0x91
 604 015b 77       		.sleb128 -9
 605 015c 00       		.byte	0
 606 015d 09       		.uleb128 0x9
 607 015e 94000000 		.4byte	.LASF23
 608 0162 01       		.byte	0x1
 609 0163 2101     		.2byte	0x121
 610 0165 00000000 		.4byte	.LFB6
 611 0169 48000000 		.4byte	.LFE6-.LFB6
 612 016d 01       		.uleb128 0x1
 613 016e 9C       		.byte	0x9c
 614 016f 83010000 		.4byte	0x183
 615 0173 0A       		.uleb128 0xa
 616 0174 0E020000 		.4byte	.LASF27
 617 0178 01       		.byte	0x1
 618 0179 2101     		.2byte	0x121
 619 017b 6B000000 		.4byte	0x6b
 620 017f 02       		.uleb128 0x2
 621 0180 91       		.byte	0x91
 622 0181 77       		.sleb128 -9
 623 0182 00       		.byte	0
 624 0183 0B       		.uleb128 0xb
 625 0184 F6000000 		.4byte	.LASF28
 626 0188 01       		.byte	0x1
 627 0189 6901     		.2byte	0x169
 628 018b 6B000000 		.4byte	0x6b
 629 018f 00000000 		.4byte	.LFB7
 630 0193 10000000 		.4byte	.LFE7-.LFB7
 631 0197 01       		.uleb128 0x1
 632 0198 9C       		.byte	0x9c
 633 0199 0C       		.uleb128 0xc
 634 019a E3000000 		.4byte	.LASF29
 635 019e 01       		.byte	0x1
 636 019f 13       		.byte	0x13
 637 01a0 6B000000 		.4byte	0x6b
 638 01a4 05       		.uleb128 0x5
 639 01a5 03       		.byte	0x3
 640 01a6 00000000 		.4byte	SleepTimer_initVar
 641 01aa 00       		.byte	0
 642              		.section	.debug_abbrev,"",%progbits
 643              	.Ldebug_abbrev0:
 644 0000 01       		.uleb128 0x1
 645 0001 11       		.uleb128 0x11
 646 0002 01       		.byte	0x1
 647 0003 25       		.uleb128 0x25
 648 0004 0E       		.uleb128 0xe
 649 0005 13       		.uleb128 0x13
 650 0006 0B       		.uleb128 0xb
 651 0007 03       		.uleb128 0x3
 652 0008 0E       		.uleb128 0xe
 653 0009 1B       		.uleb128 0x1b
 654 000a 0E       		.uleb128 0xe
 655 000b 55       		.uleb128 0x55
 656 000c 17       		.uleb128 0x17
 657 000d 11       		.uleb128 0x11
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 19


 658 000e 01       		.uleb128 0x1
 659 000f 10       		.uleb128 0x10
 660 0010 17       		.uleb128 0x17
 661 0011 00       		.byte	0
 662 0012 00       		.byte	0
 663 0013 02       		.uleb128 0x2
 664 0014 24       		.uleb128 0x24
 665 0015 00       		.byte	0
 666 0016 0B       		.uleb128 0xb
 667 0017 0B       		.uleb128 0xb
 668 0018 3E       		.uleb128 0x3e
 669 0019 0B       		.uleb128 0xb
 670 001a 03       		.uleb128 0x3
 671 001b 0E       		.uleb128 0xe
 672 001c 00       		.byte	0
 673 001d 00       		.byte	0
 674 001e 03       		.uleb128 0x3
 675 001f 24       		.uleb128 0x24
 676 0020 00       		.byte	0
 677 0021 0B       		.uleb128 0xb
 678 0022 0B       		.uleb128 0xb
 679 0023 3E       		.uleb128 0x3e
 680 0024 0B       		.uleb128 0xb
 681 0025 03       		.uleb128 0x3
 682 0026 08       		.uleb128 0x8
 683 0027 00       		.byte	0
 684 0028 00       		.byte	0
 685 0029 04       		.uleb128 0x4
 686 002a 16       		.uleb128 0x16
 687 002b 00       		.byte	0
 688 002c 03       		.uleb128 0x3
 689 002d 0E       		.uleb128 0xe
 690 002e 3A       		.uleb128 0x3a
 691 002f 0B       		.uleb128 0xb
 692 0030 3B       		.uleb128 0x3b
 693 0031 05       		.uleb128 0x5
 694 0032 49       		.uleb128 0x49
 695 0033 13       		.uleb128 0x13
 696 0034 00       		.byte	0
 697 0035 00       		.byte	0
 698 0036 05       		.uleb128 0x5
 699 0037 35       		.uleb128 0x35
 700 0038 00       		.byte	0
 701 0039 49       		.uleb128 0x49
 702 003a 13       		.uleb128 0x13
 703 003b 00       		.byte	0
 704 003c 00       		.byte	0
 705 003d 06       		.uleb128 0x6
 706 003e 2E       		.uleb128 0x2e
 707 003f 00       		.byte	0
 708 0040 3F       		.uleb128 0x3f
 709 0041 19       		.uleb128 0x19
 710 0042 03       		.uleb128 0x3
 711 0043 0E       		.uleb128 0xe
 712 0044 3A       		.uleb128 0x3a
 713 0045 0B       		.uleb128 0xb
 714 0046 3B       		.uleb128 0x3b
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 20


 715 0047 0B       		.uleb128 0xb
 716 0048 27       		.uleb128 0x27
 717 0049 19       		.uleb128 0x19
 718 004a 11       		.uleb128 0x11
 719 004b 01       		.uleb128 0x1
 720 004c 12       		.uleb128 0x12
 721 004d 06       		.uleb128 0x6
 722 004e 40       		.uleb128 0x40
 723 004f 18       		.uleb128 0x18
 724 0050 9642     		.uleb128 0x2116
 725 0052 19       		.uleb128 0x19
 726 0053 00       		.byte	0
 727 0054 00       		.byte	0
 728 0055 07       		.uleb128 0x7
 729 0056 2E       		.uleb128 0x2e
 730 0057 01       		.byte	0x1
 731 0058 3F       		.uleb128 0x3f
 732 0059 19       		.uleb128 0x19
 733 005a 03       		.uleb128 0x3
 734 005b 0E       		.uleb128 0xe
 735 005c 3A       		.uleb128 0x3a
 736 005d 0B       		.uleb128 0xb
 737 005e 3B       		.uleb128 0x3b
 738 005f 0B       		.uleb128 0xb
 739 0060 27       		.uleb128 0x27
 740 0061 19       		.uleb128 0x19
 741 0062 11       		.uleb128 0x11
 742 0063 01       		.uleb128 0x1
 743 0064 12       		.uleb128 0x12
 744 0065 06       		.uleb128 0x6
 745 0066 40       		.uleb128 0x40
 746 0067 18       		.uleb128 0x18
 747 0068 9642     		.uleb128 0x2116
 748 006a 19       		.uleb128 0x19
 749 006b 01       		.uleb128 0x1
 750 006c 13       		.uleb128 0x13
 751 006d 00       		.byte	0
 752 006e 00       		.byte	0
 753 006f 08       		.uleb128 0x8
 754 0070 34       		.uleb128 0x34
 755 0071 00       		.byte	0
 756 0072 03       		.uleb128 0x3
 757 0073 0E       		.uleb128 0xe
 758 0074 3A       		.uleb128 0x3a
 759 0075 0B       		.uleb128 0xb
 760 0076 3B       		.uleb128 0x3b
 761 0077 0B       		.uleb128 0xb
 762 0078 49       		.uleb128 0x49
 763 0079 13       		.uleb128 0x13
 764 007a 02       		.uleb128 0x2
 765 007b 18       		.uleb128 0x18
 766 007c 00       		.byte	0
 767 007d 00       		.byte	0
 768 007e 09       		.uleb128 0x9
 769 007f 2E       		.uleb128 0x2e
 770 0080 01       		.byte	0x1
 771 0081 3F       		.uleb128 0x3f
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 21


 772 0082 19       		.uleb128 0x19
 773 0083 03       		.uleb128 0x3
 774 0084 0E       		.uleb128 0xe
 775 0085 3A       		.uleb128 0x3a
 776 0086 0B       		.uleb128 0xb
 777 0087 3B       		.uleb128 0x3b
 778 0088 05       		.uleb128 0x5
 779 0089 27       		.uleb128 0x27
 780 008a 19       		.uleb128 0x19
 781 008b 11       		.uleb128 0x11
 782 008c 01       		.uleb128 0x1
 783 008d 12       		.uleb128 0x12
 784 008e 06       		.uleb128 0x6
 785 008f 40       		.uleb128 0x40
 786 0090 18       		.uleb128 0x18
 787 0091 9742     		.uleb128 0x2117
 788 0093 19       		.uleb128 0x19
 789 0094 01       		.uleb128 0x1
 790 0095 13       		.uleb128 0x13
 791 0096 00       		.byte	0
 792 0097 00       		.byte	0
 793 0098 0A       		.uleb128 0xa
 794 0099 05       		.uleb128 0x5
 795 009a 00       		.byte	0
 796 009b 03       		.uleb128 0x3
 797 009c 0E       		.uleb128 0xe
 798 009d 3A       		.uleb128 0x3a
 799 009e 0B       		.uleb128 0xb
 800 009f 3B       		.uleb128 0x3b
 801 00a0 05       		.uleb128 0x5
 802 00a1 49       		.uleb128 0x49
 803 00a2 13       		.uleb128 0x13
 804 00a3 02       		.uleb128 0x2
 805 00a4 18       		.uleb128 0x18
 806 00a5 00       		.byte	0
 807 00a6 00       		.byte	0
 808 00a7 0B       		.uleb128 0xb
 809 00a8 2E       		.uleb128 0x2e
 810 00a9 00       		.byte	0
 811 00aa 3F       		.uleb128 0x3f
 812 00ab 19       		.uleb128 0x19
 813 00ac 03       		.uleb128 0x3
 814 00ad 0E       		.uleb128 0xe
 815 00ae 3A       		.uleb128 0x3a
 816 00af 0B       		.uleb128 0xb
 817 00b0 3B       		.uleb128 0x3b
 818 00b1 05       		.uleb128 0x5
 819 00b2 27       		.uleb128 0x27
 820 00b3 19       		.uleb128 0x19
 821 00b4 49       		.uleb128 0x49
 822 00b5 13       		.uleb128 0x13
 823 00b6 11       		.uleb128 0x11
 824 00b7 01       		.uleb128 0x1
 825 00b8 12       		.uleb128 0x12
 826 00b9 06       		.uleb128 0x6
 827 00ba 40       		.uleb128 0x40
 828 00bb 18       		.uleb128 0x18
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 22


 829 00bc 9642     		.uleb128 0x2116
 830 00be 19       		.uleb128 0x19
 831 00bf 00       		.byte	0
 832 00c0 00       		.byte	0
 833 00c1 0C       		.uleb128 0xc
 834 00c2 34       		.uleb128 0x34
 835 00c3 00       		.byte	0
 836 00c4 03       		.uleb128 0x3
 837 00c5 0E       		.uleb128 0xe
 838 00c6 3A       		.uleb128 0x3a
 839 00c7 0B       		.uleb128 0xb
 840 00c8 3B       		.uleb128 0x3b
 841 00c9 0B       		.uleb128 0xb
 842 00ca 49       		.uleb128 0x49
 843 00cb 13       		.uleb128 0x13
 844 00cc 3F       		.uleb128 0x3f
 845 00cd 19       		.uleb128 0x19
 846 00ce 02       		.uleb128 0x2
 847 00cf 18       		.uleb128 0x18
 848 00d0 00       		.byte	0
 849 00d1 00       		.byte	0
 850 00d2 00       		.byte	0
 851              		.section	.debug_aranges,"",%progbits
 852 0000 54000000 		.4byte	0x54
 853 0004 0200     		.2byte	0x2
 854 0006 00000000 		.4byte	.Ldebug_info0
 855 000a 04       		.byte	0x4
 856 000b 00       		.byte	0
 857 000c 0000     		.2byte	0
 858 000e 0000     		.2byte	0
 859 0010 00000000 		.4byte	.LFB0
 860 0014 24000000 		.4byte	.LFE0-.LFB0
 861 0018 00000000 		.4byte	.LFB1
 862 001c 12000000 		.4byte	.LFE1-.LFB1
 863 0020 00000000 		.4byte	.LFB2
 864 0024 78000000 		.4byte	.LFE2-.LFB2
 865 0028 00000000 		.4byte	.LFB3
 866 002c 34000000 		.4byte	.LFE3-.LFB3
 867 0030 00000000 		.4byte	.LFB4
 868 0034 34000000 		.4byte	.LFE4-.LFB4
 869 0038 00000000 		.4byte	.LFB5
 870 003c 34000000 		.4byte	.LFE5-.LFB5
 871 0040 00000000 		.4byte	.LFB6
 872 0044 48000000 		.4byte	.LFE6-.LFB6
 873 0048 00000000 		.4byte	.LFB7
 874 004c 10000000 		.4byte	.LFE7-.LFB7
 875 0050 00000000 		.4byte	0
 876 0054 00000000 		.4byte	0
 877              		.section	.debug_ranges,"",%progbits
 878              	.Ldebug_ranges0:
 879 0000 00000000 		.4byte	.LFB0
 880 0004 24000000 		.4byte	.LFE0
 881 0008 00000000 		.4byte	.LFB1
 882 000c 12000000 		.4byte	.LFE1
 883 0010 00000000 		.4byte	.LFB2
 884 0014 78000000 		.4byte	.LFE2
 885 0018 00000000 		.4byte	.LFB3
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 23


 886 001c 34000000 		.4byte	.LFE3
 887 0020 00000000 		.4byte	.LFB4
 888 0024 34000000 		.4byte	.LFE4
 889 0028 00000000 		.4byte	.LFB5
 890 002c 34000000 		.4byte	.LFE5
 891 0030 00000000 		.4byte	.LFB6
 892 0034 48000000 		.4byte	.LFE6
 893 0038 00000000 		.4byte	.LFB7
 894 003c 10000000 		.4byte	.LFE7
 895 0040 00000000 		.4byte	0
 896 0044 00000000 		.4byte	0
 897              		.section	.debug_line,"",%progbits
 898              	.Ldebug_line0:
 899 0000 F7000000 		.section	.debug_str,"MS",%progbits,1
 899      02004700 
 899      00000201 
 899      FB0E0D00 
 899      01010101 
 900              	.LASF24:
 901 0000 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 901      43313120 
 901      352E342E 
 901      31203230 
 901      31363036 
 902 0033 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 902      20726576 
 902      6973696F 
 902      6E203233 
 902      37373135 
 903 0066 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 903      66756E63 
 903      74696F6E 
 903      2D736563 
 903      74696F6E 
 904              	.LASF9:
 905 008e 666C6F61 		.ascii	"float\000"
 905      7400
 906              	.LASF23:
 907 0094 536C6565 		.ascii	"SleepTimer_SetInterval\000"
 907      7054696D 
 907      65725F53 
 907      6574496E 
 907      74657276 
 908              	.LASF3:
 909 00ab 73686F72 		.ascii	"short unsigned int\000"
 909      7420756E 
 909      7369676E 
 909      65642069 
 909      6E7400
 910              	.LASF21:
 911 00be 536C6565 		.ascii	"SleepTimer_EnableInt\000"
 911      7054696D 
 911      65725F45 
 911      6E61626C 
 911      65496E74 
 912              	.LASF19:
 913 00d3 536C6565 		.ascii	"SleepTimer_Stop\000"
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 24


 913      7054696D 
 913      65725F53 
 913      746F7000 
 914              	.LASF29:
 915 00e3 536C6565 		.ascii	"SleepTimer_initVar\000"
 915      7054696D 
 915      65725F69 
 915      6E697456 
 915      617200
 916              	.LASF28:
 917 00f6 536C6565 		.ascii	"SleepTimer_GetStatus\000"
 917      7054696D 
 917      65725F47 
 917      65745374 
 917      61747573 
 918              	.LASF1:
 919 010b 756E7369 		.ascii	"unsigned char\000"
 919      676E6564 
 919      20636861 
 919      7200
 920              	.LASF13:
 921 0119 72656738 		.ascii	"reg8\000"
 921      00
 922              	.LASF20:
 923 011e 696E7465 		.ascii	"interruptState\000"
 923      72727570 
 923      74537461 
 923      746500
 924              	.LASF5:
 925 012d 6C6F6E67 		.ascii	"long unsigned int\000"
 925      20756E73 
 925      69676E65 
 925      6420696E 
 925      7400
 926              	.LASF12:
 927 013f 75696E74 		.ascii	"uint8\000"
 927      3800
 928              	.LASF16:
 929 0145 536C6565 		.ascii	"SleepTimer_Start\000"
 929      7054696D 
 929      65725F53 
 929      74617274 
 929      00
 930              	.LASF10:
 931 0156 646F7562 		.ascii	"double\000"
 931      6C6500
 932              	.LASF26:
 933 015d 433A5C6E 		.ascii	"C:\\notoriOS\\notoriOS.cydsn\000"
 933      6F746F72 
 933      694F535C 
 933      6E6F746F 
 933      72694F53 
 934              	.LASF8:
 935 0178 756E7369 		.ascii	"unsigned int\000"
 935      676E6564 
 935      20696E74 
 935      00
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 25


 936              	.LASF7:
 937 0185 6C6F6E67 		.ascii	"long long unsigned int\000"
 937      206C6F6E 
 937      6720756E 
 937      7369676E 
 937      65642069 
 938              	.LASF22:
 939 019c 536C6565 		.ascii	"SleepTimer_DisableInt\000"
 939      7054696D 
 939      65725F44 
 939      69736162 
 939      6C65496E 
 940              	.LASF15:
 941 01b2 73697A65 		.ascii	"sizetype\000"
 941      74797065 
 941      00
 942              	.LASF18:
 943 01bb 536C6565 		.ascii	"SleepTimer_Enable\000"
 943      7054696D 
 943      65725F45 
 943      6E61626C 
 943      6500
 944              	.LASF6:
 945 01cd 6C6F6E67 		.ascii	"long long int\000"
 945      206C6F6E 
 945      6720696E 
 945      7400
 946              	.LASF25:
 947 01db 47656E65 		.ascii	"Generated_Source\\PSoC5\\SleepTimer.c\000"
 947      72617465 
 947      645F536F 
 947      75726365 
 947      5C50536F 
 948              	.LASF11:
 949 01ff 63686172 		.ascii	"char\000"
 949      00
 950              	.LASF2:
 951 0204 73686F72 		.ascii	"short int\000"
 951      7420696E 
 951      7400
 952              	.LASF27:
 953 020e 696E7465 		.ascii	"interval\000"
 953      7276616C 
 953      00
 954              	.LASF4:
 955 0217 6C6F6E67 		.ascii	"long int\000"
 955      20696E74 
 955      00
 956              	.LASF14:
 957 0220 6C6F6E67 		.ascii	"long double\000"
 957      20646F75 
 957      626C6500 
 958              	.LASF17:
 959 022c 536C6565 		.ascii	"SleepTimer_Init\000"
 959      7054696D 
 959      65725F49 
 959      6E697400 
ARM GAS  C:\Users\klabu\AppData\Local\Temp\ccXaVd5d.s 			page 26


 960              	.LASF0:
 961 023c 7369676E 		.ascii	"signed char\000"
 961      65642063 
 961      68617200 
 962              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
